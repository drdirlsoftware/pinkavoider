package com.drdirlsoftware.pinkavoider;

import static android.content.ContentValues.TAG;
import static android.media.AudioTrack.PLAYSTATE_PLAYING;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.view.ViewCompat;

import java.util.List;
import java.util.Random;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.RectF;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioTrack;
import android.media.MediaPlayer;
import android.os.Handler;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;

import com.android.billingclient.api.PendingPurchasesParams;
import com.android.billingclient.api.QueryPurchasesParams;

import java.util.ArrayList;


import com.android.billingclient.api.BillingClient;
import com.android.billingclient.api.BillingClientStateListener;
import com.android.billingclient.api.BillingFlowParams;
import com.android.billingclient.api.BillingResult;
import com.android.billingclient.api.ConsumeParams;
import com.android.billingclient.api.ConsumeResponseListener;
import com.android.billingclient.api.ProductDetails;
import com.android.billingclient.api.Purchase;
import com.android.billingclient.api.QueryProductDetailsParams;
import com.google.android.gms.ads.AdError;
import com.google.android.gms.ads.FullScreenContentCallback;
import com.google.android.gms.ads.LoadAdError;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.interstitial.InterstitialAd;
import com.google.android.gms.ads.interstitial.InterstitialAdLoadCallback;
import com.google.firebase.crashlytics.buildtools.reloc.com.google.common.collect.ImmutableList;


public class MainActivity extends AppCompatActivity {

    boolean active = true;
    boolean inFreespace = false;
    boolean loadingLevel = false;
    boolean mouseDown = false;
    boolean slide = false;
    boolean start = true;
    boolean teleporting = false;
    boolean visible = true;
    boolean adsRemoved = false;
    boolean googlePlayIsLoaded = false;

    enum Direction {NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST}

    final int horizontalTiles = 21;
    final int verticalTiles = 35;

    int deathTimer = 0;
    int respawnTimer = 0;
    int deathLayerOpacity = 0;
    static int widthPixels;
    static int heightPixels;
    int currentLevel = 0;
    int levelButtonBaseX = 0;
    int nextButtonBaseX = 0;
    int time = 0;
    int levelButtonDisplacement = 0;
    int nextButtonDisplacement = 0;
    int adCount = 0;
    int deathCount = 0;
    boolean loadAdFlag = false;
    int buttonSpacing = 0;
    int introduction = 0;
    int levelButtonInQuestion;
    int square;
    int widthFraction;
    int pauseTimer;
    int endStarTimer = 60;
    int endStarSizing = 1;
    int endStarInQuestion = 0;
    int levelButtonCount = 0;
    int slideDirection = 1;
    int stopTimer = 0;
    static int zoneWidth;
    static int zoneHeight;
    static int zoneX;
    static int zoneY;
    int freePoints = 0;
    int creditsTimer = 0;
    float[] titleLettersSpeed = new float[11];
    int[] titleLettersBounce = new int[11];
    int[] menuButtonSpeed = new int[2];
    int[][] teleportX = new int[2][4];
    int[][] teleportY = new int[2][4];
    TextView[] credits = new TextView[13];
    //AudioTrack mAudioTrack;

    int[] levelStars = new int[100];

    float vSquare;

    enum Status {WAITING, ONGOING, PAUSED, WON, LOST}

    enum portStatus {RAISED, LOWERING, LOWERED, RAISING}

    Status status = null;
    Status pauseStatus = null;

    Character tile;

    Point spawn = new Point();


    Random random = new Random();


    Level[] level = new Level[100];


    TextView bestText;
    TextView endLevelText;
    TextView copyright;
    TextView endText;
    TextView pauseText;
    TextView deleteText;
    TextView[] gameText = new TextView[3];
    TextView[] menuText = new TextView[2];

    Button[] menuButton = new Button[2];
    Button[] levelButton;
    Button[] settingsButton = new Button[5];
    Button[] pauseButton = new Button[2];
    Button[] endButton = new Button[3];
    Button[] deleteButton = new Button[3];

    Avoider avoider;
    Portcullis portcullis;
    MenuBackground menuBackground;
    ImageView[] mapImage = new ImageView[2];
    Joystick joystick;
    ImageView deathLayer;
    TextView[] titleLetters = new TextView[11];
    Star[] star = new Star[3];

    ScrollView scroll;
    RelativeLayout scrollLayout;

    ConstraintLayout deleteLayout;

    ConstraintLayout intersticeLayout;
    ConstraintLayout menuLayout;
    ConstraintLayout menuBackgroundLayout;
    ConstraintLayout menuInterfaceLayout;
    ConstraintLayout gameLayout;
    ConstraintLayout pauseLayout;
    ConstraintLayout endLayout;
    ConstraintLayout creditsLayout;
    ConstraintLayout[] menuSector = new ConstraintLayout[3];
    Bitmap[][] levelBitmap = new Bitmap[2][2];
    Canvas[][] levelCanvas = new Canvas[2][2];
    Paint paint;

    ArrayList<Mover> moverList = new ArrayList<>();


    Path path = new Path();
    final RectF bounds = new RectF();
    Matrix matrix = new Matrix();


    Bitmap[] levelButtonBitmap = new Bitmap[5];


    Paint intersticePAINT;
    Bitmap pauseBitmap;
    Canvas pauseCanvas;
    Paint pausePaint;

    SharedPreferences data;
    SharedPreferences.Editor dataEditor;

    private InterstitialAd mInterstitialAd;

    private BillingClient billingClient;
    List<ProductDetails> productDetailsList;

    Sound rocketSound = new Sound(5, 44100, 0);
    Sound crashSound = new Sound(0.25, 44100, 1);
    Sound winSound = new Sound(0.25, 44100, 3);
    Sound buttonSound = new Sound(0.25, 44100, 2);
    Sound teleportSound = new Sound(0.25, 44100, 4);


    Handler handler = new Handler();


    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);

        ConstraintLayout layout = new ConstraintLayout(this);
        layout.setBackgroundColor(Color.MAGENTA);
        setContentView(layout);

        String[] levelString = getResources().getStringArray(R.array.level);

        level[0] = new Level(levelString[0], 3, Direction.SOUTH, "11111111111111111111111111I000000000J111111111100000000000111111111100000000000111111111100000000000111111111100000a00000111111111100000000000111111111100000000000111111111100000000000111111111100000000000111111111100000000000111111111100000M00000111111111100000M00000111111111100000M00000111111111100000M00000111111111100000M00000111111111100000M00000111111111100000M00000111111111100000M00000111111111100000M000001111111111000Q0M0P0001111111111000MQMPM0001111111111000OMMMN00011111111110000OMN0000111111111100000000000111111111100000000000111111111100000000000111111111100000000000111111111100000000000111111111100000b000001111111111000000000001111111111000000000001111111111000000000001111111111L000000000K11111111111111111111111111", null);
        level[1] = new Level(levelString[1], 4, Direction.WEST, "1111111111111111111111I0000000J1111111111110000000001111111111110000000001111111111110000000001111111111110000ba0011000000000000000000011000000000000000000011000000000000000000011L00000000000000000K1111111111111111111111", null);
        level[2] = new Level(levelString[2], 9, Direction.NORTH, "1111111111111111111111I00000000000000000J110000000000000000000110000000000000000000110000000000000000000110000000000000000000110000000000000000000110000000000000000000110000000G111H000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000000011111000000011000a00011111000b00011000000011111000000011000000011111000000011L00000K11111L00000K1111111111111111111111", null);
        level[3] = new Level(levelString[3], 10, Direction.WEST, "1111111111111111111111I00000000000000000J110000000000000000000110000000000000000000110000000000000000a0011000000000000000000011000000000000000000011000000000000000000K110000000G1111111111111000000011111111111111000000011111111111111000000011111111111111000000011111111111111000000011111111111111000000011111111111111000000011I00000000J110000000110000000000110000000110b0000000011000000011000000000011000000011L000000000110000000111111H00000110000000111111100000110000000111111100000110000000111111100000110000000111111100000110000000111111100000110000000F11111E0000011000000000000000000011000000000000000000011000000000000000000011000000000000000000011000000000000000000011000000000000000000011L00000000000000000K1111111111111111111111", null);
        level[4] = new Level(levelString[4], 9, Direction.NORTH, "11111111111111111111111111111I000J111111111111111100000111111111111111100000111111111111111A00000B1111111111111100000001111111111111100000001111111111111100000001111111111111A0000000B11111111111100000000011111111111100000000011111111111100000000011111111111A000000000B111111111100000100000111111111100000100000111111111100000100000111111111A0000C1D0000B1111111100000111000001111111100000111000001111111100000111000001111111A0000C111D0000B11111100000111110000011111100000111110000011111100000111110000011111A0000C11111D0000B111100000111111100000111100000111111100000111100000111111100000111A0000C1111111D0000B110000011I000000000001100000110000000000001100a001100b00000000011000001100000000000011L000K11L0000000000K1111111111111111111111", null);
        level[5] = new Level(levelString[5], 13, Direction.NORTH, "1111111111111111111111I00000000B1111I000J110000000000111100000110000000000111100ba001111000000000011000001111000000000011L000K1111D00000000K1111111111111111111111", null);
        level[6] = new Level(levelString[6], 8, Direction.EAST, "111111111111111111111111111A000000J111111111111A0000000011111111111A0000000001111111111A000000ba000000C1111111111000000000C1111111111100000000C111111111111L000000C111111111111111111111111111", null);
        level[7] = new Level(levelString[7], 10, Direction.SOUTH, "1111111111111111111111I0000000000000B1111110000000000000000B111100b00000000000000B111000000000000000000111L00000000000000000B111111111111D0000000011I000J1111111D000000110000011111111000000110000011111111D000001100anull);
        level[8] = new Level(levelString[8], 9, Direction.WEST, "1111111111111111111111111111A00000B111111111111A000000000B111111111A00000000000B1111111A0000000000000B11111A000000000000000B11110000000C1D0000000111A00000C11111D00000B1100000011111110000001100000C1111111D000001100000111111111000001100000B111111110000011000000111111110000011D00000B1111111000001110000000B1111100000111D0000000J1111000001111D0000000111A0000011111D0000a011A000000111111D000001A000000011111111D00KA0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C1111111111110000000C111111111111100b000C1111111111111100000C111111111111111L000C111111111111111111111111111111111111", null);
        level[9] = new Level(levelString[9], 4, Direction.WEST, "111111111111111111111111111I000000000000J1111111000000000000001111111000000000000001111111000000000000ab00011111111111111000000011111111111111000000011111111111111L00000K11111111111111111111111111111", null);

        level[10] = new Level(levelString[10], 8, Direction.SOUTHEAST, "1111111111111111111111111AB111111111111111111A00B1111111111111111A0000B11111111111111A00a000B1111111111111D0000000B1111111111111D0000000B1111111111111D0000000B1111111111111D0000000B1111111111111D0000000B1111111111111D0000000B1111111111111D0000000B1111111111111D0000000B1111111111111D0000000B1111111111111D0000000B1111111111111D0000000B111111111111A0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C11111111111A0000000C1AB11111111A0000000C1A00B111111A0000000C1A00b0B1111A0000000C1A00000C111A0000000C1A00000C1111D0000000BA00000C111111D000000000000C11111111D0000000000C1111111111D00000000C111111111111D000000C11111111111111D0000C1111111111111111D00C111111111111111111DC1111111111111111111111111111111", null);
        level[11] = new Level(levelString[11], 11, Directiona001100b0011111111100000110000011111111100000110000011111111111111111111111111111", null);
        level[12] = new Level(levelString[12], 10, Direction.EAST, "1111111111111111111111I000J11I0000000000J1100000110000000000001100000110000000000001100b0011000anull);
        level[13] = new Level(levelString[13], 8, Direction.EAST, "1111111111111111111111I00000000000000000J1100000000000000000001100ba000000000111111111000000000000111111111L0000000000K1111111111111111111111", null);
        level[14] = new Level(levelString[14], 18, Direction.NORTH, "111111111111111111111111111111111111I000J111111111111111100000111111111111111100ba001111111111111111000001111111111111111L000K1111111111111111111111", null);
        level[15] = new Level(levelString[15], 15, Directiona0010000000000000110000010b0000000000011L000K1L00000000000K1111111111111111111111", null);
        level[16] = new Level(levelString[16], 11, Direction.EAST, "111111111111111111111111111111111111A000J111111111111111A0000011111111111111A000ba000000000000000011000000000000000000011L00000000000000000K1111111111111111111111", null);
        level[17] = new Level(levelString[17], 7, Direction.WEST, "1111111111111111111111I00000000000000000J110000000000000000000110000000000000000ab001111111111111111000001111111111111111L000K11111111111111111111111111111", null);
        level[18] = new Level(levelString[18], 17, Direction.SOUTH, "1111111111111111111111I0000000000J11I000J110000000000001100000110000000000001100000110000000000001100a001100000000000011000001100000GH00000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000110000011000001100000FE000001100000110000000000001100000110000000000001100b001100000000000011000001100000000000011L000K11L0000000000K1111111111111111111111", null);
        level[19] = new Level(levelString[19], 15, Direction.NORTH, "1111111111111111111111I000J1111111A00000C1100000111111A00000C1110000011111A00b00C111100ca001000000000000011000001000000000000011L000K1L00000000000K1111111111111111111111", "1111111111111111111111I000J1111111A00000C1100000111111A00000C1110000011111A00b00C111100ca000000000000000011000000000000000000011L00000000000000000K1111111111111111111111");

        level[20] = new Level(levelString[20], 15, Direction.WEST, "1111111111111111111111I00000000000000000J110000000000000000000110000000000000000b0011000000000000000000011000000000000000000K1100000G11111111111111111111111111111111111111111111111111111111111111111111111111111100000F111111111111111000000000000000000J110000000000000000000110000000000000000a0011000000000000000000011000000000000000000K1100000G11111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000F111111111111111000000000000000000J110000000000000000000110000000000000000c0011000000000000000000011L00000000000000000K1111111111111111111111", "1111111111111111111111I00000000000000000J110000000000000000000110000000000000000b0011000000000000000000011000000000000000000K1100000G11111111111111100000111111111111111100000111111111111111100000111111111111111100000F111111111111111000000000000000000J110000000000000000000110000000000000000a0011000000000000000000011000000000000000000K1100000G11111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000F111111111111111000000000000000000J110000000000000000000110000000000000000c0011000000000000000000011L00000000000000000K1111111111111111111111");
        level[21] = new Level(levelString[21], 14, Direction.EAST, "1111111111111111111111I00000000000000000J1100000000000000000001100000000000000000001100ab0111111111111111111L0K11111111111111111111111111111111111111", null);
        level[22] = new Level(levelString[22], 12, Direction.NORTH, "1111111111111111111111I0000000000J11111111100000000000011111111100000000000011111111100000000000011111111100000000000011111111100000GH00000111111111000001100000111111111000001100000111111111000001100000111111111000001100a0011111111100000110000011111111100000110000011111111100000110000011111111100000F111111111111111000000000000000000J11000000000000000000011000000000000000000011000000000000000000011L000000000000000000111111111111111H0000011111111100000110000011111111100000110000011111111100000110000011111111100c00110000011111111100000110000011111111100000110000011111111100000110000011111111100000FE00000111111111000000000000111111111000000000000111111111000000000000111111111000000000000111111111L0000000000K1111111111111111111111", "1111111111111111111111I0000000000J11111111100000000000011111111100000000000011111111100000000000011111111100000000000011111111100000GH00000111111111000001100000111111111000001100000111111111000001100000111111111000001100b0011111111100000110000011111111100000110000011111111100000110000011111111100000F100000111111111000000100000100000J11000000100000100000011000000100000100000011000000100000100000011L000001000001000000111111111000001H0000011111111100000110000011111111100000110000011111111100000110000011111111100c00110000011111111100000110000011111111100000110000011111111100000110000011111111100000FE00000111111111000000000000111111111000000000000111111111000000000000111111111000000000000111111111L0000000000K1111111111111111111111");
        level[23] = new Level(levelString[23], 12, Directiona0000000100b0000011000000000010000000011L00000000K1L000000K1111111111111111111111", null);
        level[24] = new Level(levelString[24], 9, Direction.WEST, "11111111111111111111111111A000000000000B111111A00000000000000B1111A0000000000000000111A0000000000000a00011A00000000000000000011000000000000000000C1100000000000000000C111000000000C1111111111100000000C1111111111110000000C1111111111111000000011I00000000J1100000001100000000001100000001100f000000011000000011000000000011000000011L00000000011000000011111110000011000000011111110000011000000011111110000011000000011I0000000001100000001100000000001100000001100b000000011000000011000000000011000000011L00000000K110000000B111111111111100000000B111111111111000000000B1111111111100000000000000000B111000000000000000000B11D000000000000000000111D0000000000000e0001111D000000000000000011111D00000000000000C111111D000000000000C11111111111111111111111", null);
        level[25] = new Level(levelString[25], 11, Direction.SOUTHWEST, "1111111111111111111111I0000J1111111I0000J1100000011111110000001100e0001111111000ac0001111111000f0011000000111111100000011L0000K1111111L0000K1111111111111111111111", "1111111111111111111111I0000J1111111I0000J1100000011111110000001100e0001111111000bc0001111111000f0011000000111111100000011L0000K1111111L0000K1111111111111111111111");
        level[26] = new Level(levelString[26], 9, Direction.NORTH, "11111111111111111111111111A00B1111111111111111A0000B11111111111111100000011111111111111A000000B111111111111100000000111111111111100000000111111111111A00000000B1111111111100000000001111111111100000000001111111111100000000001111111111A0000GH0000B111111111000001100000111111111000001100000111A0B11100000110000011100011100000110000011A000B1100000110000011000001100a0011000001100b0011000001100000110000011D000C11000001100000111000111000001100000111D0C111000001100000111111111000001100000111111111D0000FE0000C1111111111000000000011111111111000000000011111111111000000000011111111111D00000000C111111111111000000001111111111111000000001111111111111D000000C11111111111111000000111111111111111D0000C1111111111111111D00C11111111111111111111111111", null);
        level[27] = new Level(levelString[27], 26, Direction.WEST, "1111111111111111111111I00000000000000000J11000000000000000000011000000000000000000011000ea0100c0000f0011000000001000000000011000000001L00000000K11L000000K111111111111111111111111111111111", "1111111111111111111111I00000000000000000J11000000000000000000011000000000000000000011000e00000000000000011000000000000000000011000000000000000000011L0000000000000000001111111111111H000000011I000000000J1000000011000000000001000000011000000000001000000011000000000001000000011000000000001000000011000001000001000000011000001000001000000011000001000001000000011000001000001000000011000001000001000000011000001000001000000011000001000001000000011000001000000000000011000001000000000000011000001000000000000011000001000000000000011000001L00000000000K1100000F1111111111111110000000J1111111111111000000001I00000000J11000000001000000000011000000b0100c0000f0011000000001000000000011000000001L00000000K11L000000K111111111111111111111111111111111");
        level[28] = new Level(levelString[28], 16, Direction.SOUTHWEST, "11111111111111111111111111111111111100000111111111111111100000111111111111111100a0011111111111111110000011111111111111110000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111I00000J11111111111111000000011111111111111000000011111111111111000000011111111111111000000011111111111111000000011111111111111L00000K11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000111111111111111100000111111111111111100c0011111111111111110000011111111111111110000011111111111111111111111111111", "111111111111111111111100000111111111000001100000111111111000001100b0011111111100ac0011111111111111110000011111111111111110000011111111111111111111111111111");
        level[29] = new Level(levelString[29], 8, Direction.NORTH, "111111111111111111111100000000000000111111100000000000000111111100f00000000000111111100000000000000111111100000000000000111111111111111100000111111111111111100000111111111111111100g0011111111111111110000011111111111111110000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000110000000000000000000110000000000000000e001100000000000000000001100000000000000000001100000111111111111111100000111111111111111100000111111111111111100000111111111111111100000111100000111111100000111100000111111100000111100h00111111100000111100000111111100000111100000111111100000111100000000001100000111100000000001100a0011110000000b001100000111100000000001100000111100000000001111111111111111111111", null);

        level[30] = new Level(levelString[30], 14, Direction.WEST, "1111111111111111111111I0000000000000J111111000000000000000111111000000000000000111111000000000000000111111000000000000000F1111100000G11111H000000J11000001111111000000011000001111111L00000011000001111111111H0001100000111111111110001100000111111111110001100000F11111111110001100000000000J111100011000000000000111100011000000000a00111100011000000000000111100011L0000000000K111100011111111111111111E00011111111111I00000000011111111111000000000011111111111000000000K11111111111000111111111111111111000000000J11111111111000000000011111111111L00000000011111111111111111H0001111111111111111110001111111111111111110001111111111111111110001111111111111111110001111111111111111110001111111111111111110b0111111111111111111L0K1111111111111111111111", null);
        level[31] = new Level(levelString[31], 20, Direction.NORTH, "111111111111111111111100000000000100000001100000000000100000001100000000000100000e01100000000000100000001100000000000100000001100000100000100000111100000100000100000111100000100000100000111100000100000100000111100000100000100000111100000100000100000111100000100000100000111100000100000000000111100000100000000000111100a0010000000000011110000010000000000011110000010000000000011111111111111111111111110000000000000000000110000000000000000000110f00000000000000000110000000000000000000110000000000000000000111111111111111100000111111111111111100000111111111111111100000110000000111111100000110b00000111111100000110000000011111100000110000000011111100000110000000011111100c001100000000111111000001100000000111111000001111111111111111111111", "111111111111111111111100000000000100000001100000000000100000001100000000000100000e01100000000000100000001100000000000100000001100000100000100000111100000100000100000111100000100000100000111100000100000100000111100000100000100000111100000100000100000111100000100000100000111100000100000000000111100000100000000000111100a0010000000000011110000010000000000011110000010000000000011111111111111111111111110000000000000000000110000000000000000000110f00000000000000000110000000000000000000110000000000000000000111111111100000100000111111111100000100000111111111100000100000110000000100000100000110b00000100000100000110000000000000100000110000000000000100000110000000000000100c001100000000000001000001100000000000001000001111111111111111111111");
        level[32] = new Level(levelString[32], 14, Direction.WEST, "1111111111111111111111111111I00000000000J1111111100000000000001111111E000000000000011I00000000G11111H000110f0000000111111100011L0000000K111111100011111111111A000J1100011111111A00000a0110001111111A0000000011000111111A00000000K1100011111A00000C1111110001111A0000C1111111E000111A0000C111I000000001110000C111100000000011100001111100000000K11A000C11111000G111111100001111110001111111100001111110001111111100001111110001111111100001111110b0111111110000111111L0K11111111000011111111111111111000011111111111111111D000B111111111111111110000111111111111111110000B1111111111111111D0000B1111111111111111D0000B1111111111111111D00000B111111111111111D00000000J111111111111D000000001111111111111D00000e01111111111111111D000K111111111111111111111111111", null);
        level[33] = new Level(levelString[33], 13, Direction.NORTH, "1111111111111111111111I0000J1I0000000000J110000c0100000000000011L0000010000000000001111H000100000000000011111000100000000000011111000100000GH00000111110001000001100000111110h01000001100a0011111L0K10000011000001111111110000011L000K11111111100000111111111111111100000111111111111111100000111111111111111100000111111111I00000100000100000J110000001000001000000110b0000100000100000011000000100000100000011L00000100000100000K1111111110000011111111111111110000011111111111111110000011111111111111110000011111111111111110000011I000J11I0J1111000001100e00110g0111100000110000011000111100000110000011000111100000FE00000110001111000000000000110001111000000000000110001111000000000000110f0111100000000000011L0K1111L0000000000K1111111111111111111111", "1111111111111111111111I0000J1I0000000000J110h00c0100000000000011L0000010000000000001111H000100000000000011111000100000000000011111000100000GH00000111110001000001100000111110001000001100a0011111L0K10000011000001111111110000011L000K11111111100000111111111111111100000111111111111111100000111111111111111111111111111111I00000000000000000J110000000000000000000110b00000000000000g0011000000000000000000011L00000000000000000K1111111111111111111111111111110000011111111111111110000011111111111111110000011111111111111110000011I000J11I0J1111000001100e0011000111100000110000011000111100000110000011000111100000FE00000110001111000000000000110001111000000000000110001111000000000000110f0111100000000000011L0K1111L0000000000K1111111111111111111111");
        level[34] = new Level(levelString[34], 20, Direction.EAST, "1111111111111111111111I00000J11111111111111000000011111111111111000000001111111111111000a00001111111111111000000001111111111111000000001111111111111L00000001111111111111111111111111111111111I000J111111111111111100000111111111111111100bnull);
        level[35] = new Level(levelString[35], 18, Direction.SOUTH, "111111111111111111111111A00000B111111I00J111A0000000B1111100ab001111111111D0000110000111111111110000110000F111111111E000011000000000000000000011000000000000000000011000000000000000000011L00000000000000000K1111111111111111111111", null);
        level[36] = new Level(levelString[36], 23, Direction.NORTHEAST, "1111111111111111111111I00000000000000000J110000000000000000000110000000000000000000110000000000000000000110000G111111111H00001100001I0000000J1000011000010000000001000011000010000000001000011000010000000001000011000010000100001000011000010000100c0100c011000010000100001L00K11000010000F11111111111000010000000000000J1100001000000000000001100001000000000000001100001L00000000000001100001111111111H0000110000100001I000100001100001000010000100001100001000010b0010000110000100001L000100001100001000011111A0000110000100001111A0000011000010000111A00000011000010d0011A000000011D0000000C1A0000000C111D00000CI00000000C11111D000C100000000C1111111D0C110000000C111111111111100a000C11111111111111000000111111111111111L0000K111111111111111111111111111", "1111111111111111111111I00000000000000000J110000000000000000000110000000000000000000110000000000000000000110000G111111111H00001100001I0001000J1000011000010000100001000011000010000100001000011000010000100001000011000010000100001000011000010000100c0100c01100001000CA000010000110000100CA0000C1000011000010CA0000CA100001100001CA0000CA0100001100001A0000CA001000011000010000CA00010000110000100001111110000110000100001I000000001100001000010000000001100001000010b0000000110000100001L00000000110000100001111111111110000100001111A0000011000010000111A00000011000010d0011A000000011D0001000C1A0000000C111D00100CI00000000C11111D010C100000000C1111111D1C110000000C111111111111100a000C11111111111111000000111111111111111L0000K111111111111111111111111111");
        level[37] = new Level(levelString[37], 12, Direction.WEST, "111111111111111111111100000000011111I000J110000000000000000000110000000000000000ab01100000000000000000001111111111111111111111", null);
        level[38] = new Level(levelString[38], 12, Direction.SOUTHWEST, "1111111111111111111111111111111110000000011111111111110b0000001111111111111000000001111111111111000000001111111111111000000001111111111111000000001111111111111000000001111111111111000000001111111111111111100001111111111111111100001111111111111111100001111000000001111100001111000000a01111100001111000000001111100001111000000001111100001111000000001111100001111000000001111100001111000000001111100001111000000001111100001111110000111111100001111110000111111100001111110000111111100001111110000111111100001111110000111111100001100000000111111100001100000000111111100001100000000111111100001100000000111111100001100001111111111100001100000000000000000001100000000000000000001100000000000000000001100000000000000000001111111111111111111111", null);
        level[39] = new Level(levelString[39], 33, Direction.NORTH, "111111111111111111111111111111111111100001111111111111111100ba001111111111111111100001111111111111111111111111111111111111", null);

        level[40] = new Level(levelString[40], 20, Direction.WEST, "111111111111111111111111111111111A000000J1111111111A00000000001111111A00000000000001111A00000000C111H00011I0000000C11111110001100000C11111111110001100011111111111110001100000B111111111100011L0000000B11111110001111D00000000B11110001111111D00000000J10001111111111D0000b010001111111111111D00K100011111111111111111100011111111111111111100011111111111111111100011I00000000J11111100011000000000011111A000110000000000111A0000011000G11H000FA000000K1100011110000000000C111000111100000000C111110001111L00000C111111100011111111111111111100011111111111111111100011111111111111111100011111A000000000J110001111A0000000000011000B11A00000000000011D000BA000C1H000a000111D000000C11100000001111D0000C1111000000011111D00C11111L00000K1111111111111111111111", null);
        level[41] = new Level(levelString[41], 14, Direction.NORTHWEST, "1111111111111111111111A000B111111111111111100000111111111111111100b00B111111111111111000000111111111111111D00000B11111111111111100000C111111111111111D000C11111111111111111DC111A000B11111111111111A0000000B1111111111A00000000000B1111111A0000000000000B11111100000000000000011111A000000000000000B111100000000000000000111A00000000000000000B11000000000000000000011000000000000000000011000000000000000000011D00000000000000000C111000000000000000001111D000000000000000C1111100c000000000000111111D0000000000000C1111111D0000000000001111111111D0000000000111111111111D00000000B111111111111111D00000B111111111111111000000111111111111111D00000B111111111111111000000111111111111111D00a001111111111111111000001111111111111111D000C1111111111111111111111", "1111111111111111111111A000B111111111111111100000111111111111111100b00B111111111111111000000111111111111111D00000B111111111111111000000111111111111111D00000B111111111111111D00000000B1111111111110000000000B1111111111000000000000B1111111A0000000000000B11111100000000000000011111A000000000000000B111100000000000000000111A00000000000000000B11000000000000000000011000000000000000000011000000000000000000011D00000000000000000C111000000000000000001111D000000000000000C1111100c000000000000111111D0000000000000C1111111D00000000000C1111111111D0000000C11111111111111D000C111AB11111111111111111A000B111111111111111A00000111111111111111D00000B111111111111111000000111111111111111D00a001111111111111111000001111111111111111D000C1111111111111111111111");
        level[42] = new Level(levelString[42], 28, Direction.WEST, "1111111111111111111111I00000000010000000J1100000000001000000a011000000000010000000011000000000010000000K11111111111110000G11111000010000J10000111111000010000010c0011111100001000001L00K11111100001000001111111111100001H00001I000000J1100001100001000000001100001100001000000001100001100001000000001100001E00001000000001100000000000000C0000110000000000000C1000011000000000000C1100d01100000000000C111000011000011000011111000011000011000000000000011000011000000000000011000011000000000000011000011L00000000000K110000F1111111111111111000000000000000000J1100000000000000000001100000000000000000c011L00000000000000000K111111111111111111111111111110000111111111111111110000111111111111111110b0011111111111111111L00K1111111111111111111111111111111", "1111111111111111111111I00000000000000000J1100000000000000000a011000000000000000000011000000000000000000K11000011111110000G11111000000000J10000111111000000000010c0011111100000000001L00K11111100000000001111111111100001H00001I000000J1100001100001000000001100001100001000000001100001100001000000001100001E00001000000001100001000000000C0000110000100000000C1000011000010000000C1100d01100001000000C111000011111111111111111111111000011000000000000011000011000000000000011000011000000000000011000011L00000000000K110000F1111111111111111000000000000000000J1100000000000000000001100000000000000000c011L00000000000000000K111111110000111111111111111110000111111111111111110000111111111111111110b0011111111111111111L00K1111111111111111111111111111111");
        level[43] = new Level(levelString[43], 17, Direction.EAST, "11111111111111111111111A000B1111111A000B111A00000B11111A00000B110000000000J1000000011000a00000001000bnull);
        level[44] = new Level(levelString[44], 25, Direction.EAST, "11111111111111111111110000000001000000000110a000000C1000000000110C1000001A00000000C1111A0000C1000010000111000000C1A000C1000011100000C1A00001A000C1110000C1A0000C100001A1100011A0000C1A00001011000000000C1A0000C101100000000C1A0000C1A0110000000C1A0000C1A001100000C11A000001A00011000C11A000000C10000111111A000000C11A0000110000000000C1A00000011000000000C1A000000011000000C111A0000000011000C111A000000C1000110001A00000000C1A00011000000000000C1A0000110000000000C11A0000C110000000C111A00000C1110000C111A0000000C1A1111111A000000000C1A0110000000000000C11A001100000000000C11A00b01100000000C111A00000C110000C1111A0000000C11100011A0000000000C111100000000000000C111111000000000000C11111111000000000C1111111111100000C11111111111111111111111111111111111", null);
        level[45] = new Level(levelString[45], 24, Direction.SOUTH, "1111111111111111111111000000000000000000011000000000a000000000110000000000000000000110000000000000000000110000111D000C11100001100001111111111100001100001I0000000J100001100001000000000100001100001000000000100001100001000000000100001100001000000000100001100001L0000000K10000110000111H000G111000011D000B111000111A000C11100001110001110000111100001110b0111000011110000111L0K11100001111000011111111100001111D000B11I0J11A000C111110000110c0110000111111000011000110000111111000011000110000111111000011000110000111111D000B10001A000C1111111000010001000011111111000010001000011111111000010001000011111111000010001000011111111D000B000A000C1111111110000000000011111111110000000000011111111110000000000011111111110000000000011111111111111111111111111", "1111111111111111111111000000000000000000011000000000a000000000110000000000000000000110000000000000000000110000111D000C11100001100001111000111100001100001I0000000J100001100001000000000100001100001000000000100001100001000000000100001100001000000000100001100001L0000000K10000110000111H000G111000011D000B111000111A000C11100001110001110000111100001110b0111000011110000111L0K11100001111000011111111100001111D000B11I0J11A000C111110000110c0110000111111000011000110000111111000011000110000111111000011000110000111111D000B10001A000C1111111000010001000011111111000010001000011111111000010001000011111111000010001000011111111D000B000A000C1111111110000000000011111111110000000000011111111110000000000011111111110000000000011111111111111111111111111");
        level[46] = new Level(levelString[46], 9, Direction.SOUTH, "1111111111111111111111111111111111111I00J1111111111111111100b01111111111111111100001111111111111111100001111111111111111A000C111111111111111100001111111111111111100001111111111111111100001111111111111111A000C111111111111111100001111111111I000J110000111111111100000110000111111111100a001A000C111111111100000100001111111111100000100001111111111A0000C100001111111111000001A000C111111111A0000C10000111111111100000110000111111111A0000C1100001111111110000011A000C11111111A0000C11000011111111100000111000011111111A0000C11100001111111100000111A000C1111111A0000C11100001111111100000111100001111111100000F11A000011111111000000000000C11111111000000000000111111111000000000000111111111000000000000111111111L0000000000C11111111111111111111111111111", null);
        level[47] = new Level(levelString[47], 40, Direction.EAST, "1111111111111111111111I00000000000000000J110a000000000000000e011000000000000000000011L00000000000000000K111111111111H0000G11111111111111110000111111111111111110000111111I000000J1110000111111000000b011100001111110000000011100001111110000000K111000011111100001111111000011111100001111111000011111100001111111000011111100001111111000011111100001111111000011111100001111111000011111100001111111111111111100000000000000011111100000000000000011111100000000000000011111100000000000000K111111000011111111111111111000011111111111111111000010000000000001111000010f00000000c0111100001000000000000111100001111111111111111100001111111111111111100000000000000J1111110000000000000001111110000000000000d011111100000000000000K11111111111111111111111111", "1111111111111111111111I00000000000000000J110a000000000000000e011000000000000000000011L00000000000000000K111111111111H0000G11111111111111110000111111111111111110000111111I000000J1110000111111000000b011100001111110000000011100001111110000000K111000011111100001111111000011111100001111111000011111100001111111000011111100001111111000011111100001111111000011111100001111111000011111111111111111000011111100000000000000011111100000000000000011111100000000000000011111100000000000000K111111000011111111111111111000011111111111111111000010000000000001111000010f00000000c0111100001000000000000111100001111111111111111100001111111111111111100000000000000J1111110000000000000001111110000000000000d011111100000000000000K11111111111111111111111111");
        level[48] = new Level(levelString[48], 47, Direction.WEST, "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000J1111111111111110000001111111111111110000001111111111111110000001111111111111111H00001I00011111111111100001000011111111111100e010b00111111111111L00K1L00011111111111111111111111111111111I00000J1111111111111100000c011111111111111000000K11111111111111000111111111111111111000000J1111111111111100000h011111111111111L00000K1111111111111111111111111111111111111111I00J1111111111111111E00f01111111111111I000000011111111111110000000011111111111110g0000001111111111111L000000K11111111111111111111111111111111111111111111111111111111111111111111111111111111111111y111111111111111111111111111111111111111111111", null);
        level[49] = new Level(levelString[49], 47, Direction.EAST, "1111111111111111111111I0000000000J1111I0J110a000000000011110ec0000000111000000011L0000000K111L00000K1111111111111111111111", "1111111111111111111111I0000000000J1111I0J110a000000000011110e011L0000000000011110001111111111H000111100011111111111000111100011111111111111111E00011I00000000000000000011000000000000000000011000000000000000000K1100011111111111111111100010000000011111111100010000000011111111100010000000K11111111100011111111111111111100000000J1I0000000J11000000000100000000011L0000000010001000001111111H000100011H0001111111100010001110011111111100010f0111000111111110001L0K11100011111111000111111100011111111000111111100011111111000111111110011I000000001I000J10001100000000010b0001000110000000001L0000100011000G11111111100100011000111000111000100111000F1E0001110001000110000000001110001000110c0000000111000000011L0000000K111L00000K1111111111111111111111");

        level[50] = new Level(levelString[50], 21, Direction.NORTHEAST, "111111111111111111111111111111I000000000J111111111100000000000111111111E00000000000111I000000000G111H000111000000000011111000111000000000K11111000111000G11111111111000111000F11111111111000111000000000J11111000111000000000011111000111L00000000011111000111111111H0001111100011111111110001111100011111111110001111100011I00J111100011111000110b00B111000111110001100000B110001111100011L00000B1000111110001111A0000B00011111000111A0000000001111100011A0CD000000011111000110C11D0000001111I00011C1111D00000B111000011111111D00000B110a00111111111D00000B1L00K1111111111D00000B111111111111111D00000B111111111111111D00000B111111111111111D00000B111111111111111D00000J11111111111111A0C00001111111111111A0C100c0111111111111A0C11L00K1111111111111111111111", "111111111111111111111111111111I000000000J111111111100000000000111111111E00000000000111I000000000G111H000111000000000011111000111000000000K11111000111000G11111111111000111000F11111111111000111000000000J11111000111000000000011111000111L00000000011111000111111111H0001111100011111111110001111100011111111110001111100011I00J111100011111000110b00B111000111110001100000B110001111100011L00000B1000111110001111A0000B00011111000111A0000000001111100011A0CD000000011111000110C11D0000001111I00011C1111D00000B111000011111111D00000B110a00111111111D00000B1L00K1111111111D00000B111111111111111D00000B111111111111111D00000B111111111111111D00000B111111111111111D00000J11111111111111A0C00001111111111111A0C100c0111111111111A0C11L00K1111111111111111111111");
        level[51] = new Level(levelString[51], 24, Direction.SOUTHEAST, "1111111111111111111111111I00B111111111111111110a00B111111111111111100000B111111111111111D00000B11I00000J1111ABD00000110000000111A00BD00e011L00000011A0000BD00K11111H0001100000C1111111111000110000C1111111111E00011000C11111111A0000001100011111111A0000000110001111111A0000000011000111111A000C1H0001100011111A000C11100011000F111A000C11110001100000000000000J1000110000000000000b010d011L0000000000000K1L0K11111111111111111111111111111111111111111111111111I0J1111111111111111110h01111111111111111110001111111111111111110001111111111111111110001111A0000J111111110c0111A00000011I00B1100011A0000000110f00B11111A0000C0001100000B111A0000C100011D00000B1A0000C11000111D0000000000C1110001111D00000000C11110g011111D000000C11111L0K1111111111111111111111", "1111111111111111111111111I00B111111111111111110a00B111111111111111100000B111111111111111000000B11I00000J1111A0000000110h00000111A000000e011L00000011A00000000K11111H0001100000C1111111111000110000C1111111111E00011000C11111111100000011000111111111100000011000111111111100000011000111111111111H00011000111111111111100011000F1111111111110001100000000000100J100011000000000g010b010d011L0000000000100K1L0K11111111111111111111111111111111111111111111111111I0J1111111111111111110001111111111111111110001111111111111111110001111111111111111110001111A0000J111111110c0111A00000011I00B1100011A0000000110f00B10001A0000C0001100000B000A0000C100011D000000000000C11000111D0000000000C1110001111D00000000C111100011111D000000C11111L0K1111111111111111111111");
        level[52] = new Level(levelString[52], 33, Direction.NORTH, "1111111111111111111111111111111I0000000001111111111100000000001111111111E000000000011I00000000000G111111110c0000000000111111111L0000000000K111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111A0000001111111111111100000001111111111111A00000001111111111111000C1111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111111111111A00011111111111111111000C1111111111111111100011111111111I000001000100000000110b0000100010000000011L00000100010000000011111111A00011111111111111111000C111111111111111110001111111111111111110001111111111111111110001111111111111111110a0111111111111111111L0K11111111111111111111111111111111", "1111111111111111111111111111111I0000000001111111111100000000001111111111E000000000011I00000000000G111111110c0000000000111111111L0000000000K111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111A0000011111111111111100000011111111111111A00000011111111111111000C1111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111111111111A00011111111111111111000C1111111111111111111111111111111I000000000000000000110b0000000000000000011L00000000000000000011111111111111111111111111111000C111111111111111110001111111111111111110001111111111111111110001111111111111111110a0111111111111111111L0K11111111111111111111111111111111");
        level[53] = new Level(levelString[53], 36, Direction.EAST, "111111111111111111111110000000000000000001110000000000000000001110b0011111111110000111000010000000000000111111110000000000000111111110000111111111111111110000000011111111111110000000011111111111111111000011111110000000001000000000110000000c010000000001100000000010000000001100000000010000000001100001111111111111111100001111111111100001100001111111111100g0110h0011111111111000011000011111111111000011111111111111111000011110000000000001000011110000000000d010000111100000000000010000111100000000000010000111100001111111110000110000001000000000000110000001000000000000110f000010000000000e0110000001000000000000111111111111111111111110000000000000000000110000000000000000000110a000000000000000c01100000000000000000001111111111111111111111", "111111111111111111111110000000000000000001110000000000000000001110b0011111111110000111000010000000000000111111110000000000000111111110000111111111111111110000000011111111111110000000011111111111111111000011111110000000001000000000110000000c010000000001100000000010000000001100000000010000000001100001111111111100001100001111111111100001100001111111111100g0110h0011111111111000011000011111111111000011111111111111111000011110000000000001000011110000000000d010000111100000000000010000111100000000000010000111100001111111111111110000001000000000000110000001000000000000110f000010000000000e0110000001000000000000111111111000011111111110000000000000000000110000000000000000000110a000000000000000c01100000000000000000001111111111111111111111");
        level[54] = new Level(levelString[54], 9, Direction.SOUTH, "11111111111111111111111111111A000B111111111111111A00ab0000000001100000000000000000001100000000000000000001111111111111111111111", null);
        level[55] = new Level(levelString[55], 21, Direction.SOUTH, "11111111111111111111111111111I0000000000J1111111110000000000001111111110000000000001111111110000000000001111111110000G11H000011111111100001111000011111111100001111000011111111E00001111000011111I0000000111100001111100000000111100001111100000000111100b0111110000000K1111L00K111110000G111111111111111100001111100000J1111110000111110000a01111110000F111100000K1111110000000J1000111111111000000001000000111111000000001000000111111L00000001000000111111111H0000111H000111111111100001000000111111111E000010000001111111A0000001000000111111A0000000100000011111A0000000K10000001111A000C11111111E000111A000C1A00000000000111D000BA0000000000001111D000000000000000011111D0000C1111111111111111D00C111111111111111111DC11111111111111111111111111111111111", null);
        level[56] = new Level(levelString[56], 14, Direction.WEST, "111111111111111111111100000000000000000001100000000000000000ba01100000000000001000001111111111111111111111", null);
        level[57] = new Level(levelString[57], 53, Direction.WEST, "1111111111111111111111000000000001000000011000000000g0100000001100000000000100000001100011111111111110001100010000000000010001100010000000000010001100010000000000010001100010001000100010001100010001000100010001100010c0100010001000110001000100010001000110001111100011111000110001000100000000000110001000100000000000110001000100000000000110001000111110001111110001000100010000000110d0100010e0100000001100010001000100000001111110001000100010001100000001000100010001100000001000100010001100000001000100010001100010001000100010f01100010001000100010001100010001000111111111100010000000000010001100010000000000010b01100010000000000010001100011111111111110001100000001000000000001100000a010h0000000001100000001000000000001111111111111111111111", "1111111111111111111111000000000001000000011000000000h0100000001100000000000100000001100011111111100010001100010000000100010001100010000000100010001100010000000100010001100010001000100010001100010001000000010001100010c01000000010001100010001000000010001100011111111111110001100010000000100000001100010g0000010000000110001000000010000000110001111100011111000110001000000010001000110d0100000001000100011000100000001000100011111100010001000100011000000010001000100011000000011111000100011000000010000000100011000100010e0000010001100010001000000010001100011111111100010001100010000000000010001100010000000000010001100010000000000010001100011111000111110001100000001000000000001100000f01000000000001100000001000000000001111111111111111111111");
        level[58] = new Level(levelString[58], 34, Direction.WEST, "11111111111111111111110000B111111111111111100000000B111111111111000000000000B111111110000000000000000111110000D000000000001111100001111D00000a011111000011111111D000111110000111111111111111110000111111111111111110000111111111111111110000111111111111111110000111111111A0000J11000011111111A0000001100001111111A0000000110000111111A0000000011000011111A0000C00001100001111A0000C1000011000000000000C1100001100000000000C11E0000110000000000CI000000011000000000C10000000011111111111110000000011111111111110000000K11111111111110000111111111111111110000000J1111111111111000000001111111111111000000001111110000111L000000011111E00001111111000011I0000000111I000000011000000001110000000011000000001110c00000011L000000K111L000000K1111111111111111111111", "11111111111111111111110000B111111111111111100000000B111111111111000000000000B111111110000000000000000111110000D000000000001111100001111D00000f011111000011111111D00011111000C1111111111111111100C11111111111111111100111111111111111111100B111111111111111111000B111111111A0000J11000011111111A00000011D0001111111A0000000111D00111111A0000000011110011111A0000C0000111A001111A0000C1000011A000111A0000C11000011000011A0000C11E0000110b001A0000CI000000011000CA0000C1000000001111110000C110000000011111100001110000000K11111100001110000111111111100001110000000J1111110000111000000001111110000111000000001111110000111L000000011111E00001111111000011I0000000111I0000000110000000011100000000110e0000001110c00000011L000000K111L000000K1111111111111111111111");
        level[59] = new Level(levelString[59], 29, Direction.EAST, "1111111111111111111111000000000000000000011000000000a00000000011000000000000000000011111111111111111100011000000000000000100011000000000000000100011000000000000000100011000111111111000100011000100000001000100011000100000001000100011000100000001000100011000100010001000100011000100010001000100011000100010001000100011000100010001000100011000100010001000100011000100010001000100011000100010001000100011000100010001000100011000100010001000100011000100010001000100011000100010001000100011000100010001000100011000100010b0100010001100010001000100010001100010001111100010001100010000000000010001100010000000000010001100010000000000010001100011111111111110001100000000000000000001100000000000000000001100000000000000000001111111111111111111111", null);

        level[60] = new Level(levelString[60], 40, Direction.NORTH, "111111111111111111111111110001000100011111111110b010c010da0111110001100011111000111110001100011111111111110001100000000000000000001100000000000000000001100000000000000000001111111111111111111111", "111111111111111111111111110001000100011111111110b010c010da0111110001100011111000111110001100011111000111110001100000000000000000001100000000000000000001100000000000000000001111111111111111111111");
        level[61] = new Level(levelString[61], 27, Direction.WEST, "1111111111111111111111I00000000000000000J1100000000000000000001100000000000000000001100000G1111111H0000011000001111111110000011000001111111110000011000001111111110000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111y1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000001111111111111111000001111z111111111110000011111111111111110000011111111111111110000K1111111111111111111111", null);
        level[62] = new Level(levelString[62], 50, Direction.SOUTHWEST, "1111111111111111111111I00000000000000000J1100000000000000000a0110000000000000000000110001111111110000000110000000100J1000000011000000010bc0100000001000000011L0K1L00000K1L00000K1111111111111111111111", "1111111111111111111111I00000000000000000J1100000000000000000a0110000000000000000000110001111111110000000110000000000J1000000011000000000bc0100000001000000011L0K1L00000K1L00000K1111111111111111111111");
        level[63] = new Level(levelString[63], 26, Direction.EAST, "1111111111111111111111I0000000000000J1111110a0000000000000111111000000000000000111111000111111H0000011111100000000J1000001111110000000f0100000111111L0000000K1000001111111111111111D0000B111111111111111100000B111111111111111000000B1111111111111100000001111111111111E0000000B11I000000000000000000110c0000000000000000011000000000000000000011000G11D00000000000C110001111000000000001110001111D000000000C111000F1111D0000000C1111000000J111D000C111111000000011111111111111L00000011110001111111111111111110001111111I000000111100011111110e0000011110000000J11L00000K1111000000001111111111111L000000011111111111111111H00011111111111111111100011111111111111111E000111111111I000000000001111111110b0000000000111111111L0000000000K1111111111111111111111", "1111111111111111111111I0000000000000J1111110a0000000000000111111000000000000000111111000111111H0000011111100000000J1000001111110000000f0100000111111L0000000K1000001111111111111111D0000B111111111111111100000B111111111111111000000B1111111111111100000001111111111111E0000000B11I000010000000000000110c0001000000000000011000001000000000000011000G11D00000000000C110001111000000000001110001111D000000000C111000F1111D0000000C1111000000J111D000C111111000000011110001111111L00000011110001111111111100011110001111111I000000111100011111110e0000011110000000J11L00000K1111000000001111111111111L000000011111111111111111H00011111111111111111100011111111111111111E000111111111I000000000001111111110b0000000000111111111L0000000000K1111111111111111111111");
        level[64] = new Level(levelString[64], 39, Direction.NORTH, "111111111111111111111111111111111111110001111111111111111110b0111111111111111111000111111111111111111000111111111111111111000111111111111111111000111111111111111111000110000001000100000000110000c010e010000000011000000100010000000011000111100010011111111000001100010000011111000001100010000011111111001A00C1111001111111100100010001001111111100100010g01001111100000100010001000001100000100010001000001100011A00C100010000011000110001A00C111111110h011000100010000001100011000100010000001111111000100010010001100000000100010010001100000000100000010f0110000000010000001000110001111111111111111110001111111111111111110001111111111111111110001111111111111111110001111111111111111110a011111111111111111100011111111111111111111111111111111111111", "111111111111111111111111111111111111110001111111111111111110b0111111111111111111000111111111111111111000111111111111111111000111111111111111111000111111111111111111000110000001000100000000110000c010e010000000011000000100010000000011000111100010011111111000001100010000011111000001100010000011111111001A00C1111001111111100100010001001111111100100010g01001111100000100010001000001100000100010001000001100011A00C100010000011000110001A00C111000110h011000100010000001100011000100010000001111111000100010010001100000000100010010001100000000100000010f0110000000010000001000110001111111111111111110001111111111111111110001111111111111111110001111111111111111110001111111111111111110a011111111111111111100011111111111111111111111111111111111111");
        level[65] = new Level(levelString[65], 38, Direction.EAST, "111111111111111111111111111I0000J1111111111111110ba000000000000001100000000C11111111111111111111111111111111", null);
        level[66] = new Level(levelString[66], 43, Direction.WEST, "11111111111111111111110000000100000111111110000000100000000000110000000100b000000001100010001000000000001100010001000001110001100010001111111110001100010001111111110001100010001111111110001100010001111111000001100010000001000000001100010000c010d0000001100010000001000000001100011111111D0C00000110001111111111111111110001111111111111111110001111111111111111110001111111111111111110d0111111111111111111000111111111111111111D0C1111111111111111111111110000000111111111111110c00000111111111111110000000111111111111111111000111111111111110000000111111111111110000000111111111111110000000111111111111110001111111111111111110001111100000111111110000000000000111111110000000000a001111111100000000000001111111111111111000001111111111111111111111", "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111A0001000111111111111100c010d01111111111111D000100011111111111111100100C11111111111111100100111111111111000000100000011111111000000100000011110001001111111110011110d010000000000000111100010000000000000111100C111111111111111111001000000B111111111110010000c0011111111111001001000C1111111111100100111111111111111100100111111111111111100100111111111111111100100111111111111111100100111111111111111100100111111111111111100100111111111111111100100111111111111111100000111111111111111100000111111111111111111111111111111111111");
        level[67] = new Level(levelString[67], 27, Direction.EAST, "1111111111111111111111I0000B111111110000J1100000011111111000001100e0001111111100b0011000000111111110000011L0000C111111110000K11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000J111111111111111100000111111111111111100c0011I0000B11111111000001100000011111111000001100a0001111111111H0011000000111111111110011L0000C1111111111100111111111111111111100111111111111111111100111111111111111111100111111111111111111100111111111111111111E00111111111111111A00000111111111111111000000111111111111111000000111111111111111000000111111111111111D0000K111111111111111111111111111111111111A0000J111111111111111000000111111111111111000f00111111111111111000000111111111111111D0000K1111111111111111111111", "1111111111111111111111I0000B1111111A0000J1100000011111110000001100e0001111111000b0011000000111111100000011L0000C1111111D0000K111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111A0000J111111111111111000000111111111111111000c0011I0000B1111111000000110000001111111D000001100a0001111111111H0011000000111111111110011L0000C1111111111100111111111111111111100111111111111111111100111111111111111111100111111111111111111100111111111111111111E00111111111111111A00000111111111111111000000111111111111111000000111111111111111000000111111111111111D0000K111111111111111111111111111111111111A0000J111111111111111000000111111111111111000f00111111111111111000000111111111111111D0000K1111111111111111111111");
        level[68] = new Level(levelString[68], 26, Direction.EAST, "1111111111111111111111I0000000000000B111111000000000000000B111110000000000000000B111100000000000000000B1110001111111111D0000B1100011111111111D00001100011111111111100001100011111111111100001111111111111111E000011111111110001I000000111111111100010a0000011111111110001L0000001111111111111111H00001111111111111111A00001111111111111A000000011111111A00000000000011111A00000000000CH0011I00000000000C111100110000000C11111111100110000C1111111111110011000011111111111111111000011110001111110011000011110b0111111001100001111L0K11111100110000111111111111E001100001111111111100001100001111111111100001100001111111111100c01100001111111111100001100001111111111111111100001111111111111111100001111111111111111100001111111111111111111111111111111111111", "1111111111111111111111I0000000000000B111111000000000000000B111110000000000000000B111100000000000000000B1110001111111111D0000B1100011111111111D00001100011111111111100001100011111111111100001111111111111111E000011111111110001I000000111111111100010a0000011111111110001L0000001111111111000111H00001111111111000111A000011111111110001000000011111111A10001000000011111A00010001000CH0011I00000010001C111100110000000100011111100110000C1110001111110011000011110001111110011000011110001111110011000011110b0111111001100001111L0K11111100110000111111111111E001100001111111111100001100001111111111100001100001111111111100c01100001111111111100001100001111111111111111100001111111111111111100001111111111111111100001111111111111111111111111111111111111");
        level[69] = new Level(levelString[69], 40, Direction.WEST, "1111111111111111111111I0J111111I0J1I0000J110001111I000010000a011L0011110000K100000K11100F1110011110001111110000J1000J1100000J111L00001L0001100000011111H0011H0011L0000011111100111001111100011I0JE0011E00J1I00000110g00000000d010c00001100000000000K100000K1111111111111111111111100000J111I0J1000111110d00001110e0100011111L0KH00111L001D00B1111111100111E00110001111I000001I000011D00B11100000K10000K111000111001111100G11111D00B11000000000111111100011L0000000K1111111D0K11111111111111111111111111A0010000J111I00J1111A0c010000011100h0111A0000100000111000K11A000C1111H0011100G111000C1111110011E0011110001111111001I0001111000B111111001000K1111D000B1111E001001111111D000J1I0000100000J1111D0f010000010000b011111D0K1L000K1L0000K1111111111111111111111", "1111111111111111111111I0J111111I0J1I0000J110f01111I00h010000a011L0011110000K100000K11100F1110011110001111110000J1000J1100000J111L00001L0001100000011111H0011H0011L0000011111100111001111100011I0JE0011E00J1I00000110000001000d010c00001100000010000K100000K1100011111111110001111100000J111I0J1000111110d0000111000100011111L0KH00111L001D00B1111111100111E00110001111I000001I000011D00B11100000K10000K111000111001111100G11111D00B1100000010011111110e011L0000010K1111111D0K11111111111111111111111111A0000000J111I00J1111A0c00000001110000111A0000000000111000K11A000C1111H0011100G111000C1111110011E0011110001111111001I0001111000B111111001000K1111D000B1111E001001111111D000J1I0000100000J1111D00010g00010000b011111D0K1L000K1L0000K1111111111111111111111");

        level[70] = new Level(levelString[70], 28, Direction.EAST, "1111111111111111111111I000000J1111111I00J110a000000111111100b011000000001111111000011L00000001111111000011111H0000111111100001111110000111111100001111110000111111100001111110000F11111E0000111111000000B1A00000011111100000001000000011111100000001000000011111A000000C1D00000K1111A000C111111111111111A000C111111111111111A000C1111111111I00J11D000B111111111100c0111D000B11111111100001111D000B11111111000C11111D000B111111A0001111111D000B11111000C1111111A000C1111A0001111111A000C11111000C111111A000C11111A000111111A000C111111000C11111A000C111111A000111111D000B11111100001111111D000B1111A000C11111111D0000000000C1111111111D00000000C111111111111D000000C11111111111111D0000C1111111111111111D00C111111111111111111DC11111111111111111111111111111111", "1111111111111111111111I000000J1111111I00J110a000000111111100b011000000001111111000011L00000001111111000011111H0000111111100001111110000111111100001111110000111111100001111110000F11111E000011111100000000000000011111100000000000000011111100000000000000011111A00000000000000K1111A000C111111111111111A000C111111111111111A000C1111111111I00J11D000B111111111100c0111D000B11111111100001111D000B11111111000C11111D000B111111A0001111111D000B11111000C1111111A000C1111A0001111111A000C11111000C111111A000C11111A000111111A000C111111000C11111A000C111111A000111111D000B11111100001111111D000B1111A000C11111111D0000000000C1111111111D00000000C111111111111D000000C11111111111111D0000C1111111111111111D00C111111111111111111DC11111111111111111111111111111111");
        level[71] = new Level(levelString[71], 21, Direction.EAST, "1111111111111111111111111I00000J111111111111110000000111111111111110000000111111111111110001000111111111111110001000111111111111110001000111111111111110001000111111111111110001000111111111111110001000111111111111110001000111111111111110001000F11111111111110001000000000J11111110001000000000011111110001L0000000001111111000111111110001111111000111111I00000J1111E0001111110000000110000001111110000000110a000011111100000001100000K111111000000011111111111111000000011111111111111000000011111111111111000000011111100010001000000011111100010001L00000K111111000100011100011111I00000000000000011111000000000000000011111000000000000000K111110001111111111111111100000000000000000001100000000000000000b01100000000000000000001111111111111111111111", null);
        level[72] = new Level(levelString[72], 25, Direction.SOUTH, "111111111111111111111111111111111111I000J111111111111111100000111111111111111100a001100000000001111000001100000000001111000001100bnull);
        level[73] = new Level(levelString[73], 47, Direction.WEST, "1111111111111111111111111111111111100000J11111111111111100000011111111111111100000011111111111111100000011111111111111111111111111111111111111100011I000001111111111D00110000001111111111100110000001111111111A0011000000111111111100C11000111111000011100111000111111000011100B1100011111E0000111000110001I000000001110f0110001000000000111L0K11000100000000K111111110001000G11111111111110001000F11111111111110001000000000001111110001000000000001111110001L0000000000111111000111111111000111111000000J1I001000000J1100000a010b01000000011000000K1L001000000K111111111111110001111111111I00000000001I0J1111110c00000000010e011111100000000000100011111111111111111E000111111000000000000000111111000000000000000111111L0000000000000K1111111111111111111111", "1111111111111111111111111111111111100000J11111111111111100000011111111111111100000011111111111111100000011111111111111111100011111111111111111100011I000001111111111D00110000001111111111100110000001111111111A0011000000111111111100C11000111111000011100111000111111000011100B1100011111E0000111000110001I000000001110f0110001000000000111L0K11000100000000K111111110001000G11111111111110001000F11111111111110001000000000001111110001000000000001111110001L0000000000111111000111111111000111111000000J1I000000100J1100000a010b00000100011000000K1L000000100K111111111111110001111111111I00B10000001I0J1111110c00100000010e0111111000C1000000100011111100011111111E000111111000000000000000111111000000000000000111111L0000000000000K1111111111111111111111");
        level[74] = new Level(levelString[74], 26, Direction.EAST, "11111111111111111111111111I000J111111111111111100000111111111111111100100111111111111111100100111111111111111100100111111111111111A00100B1111111111111100C1D001111111111111100111001111111111111100111001111111111111100111001111111111111100111001111111111111100111001111111111111A0011100B11111111111100C111D0011111111111100111110011111111111100111110011111111111100111110011111111111100111110011111111111100111110011111111111E001111100B111111111000011111D00111I000110a001111110011100b011000K1111110011100001111111111110011100G111111111111100111001111111111111100111001111111111111100B1A0011111111111111D00100C111111111111111001001111111111111111001001111111111111111001001111111111111111000001111111111111111L000K1111111111111111111111111", null);
        level[75] = new Level(levelString[75], 40, Direction.EAST, "1111111111111111111111I0J11111I000000000J110g0111110f0000000ca0000010001000110001L00000K1000100011000F111111110001000110000000000J1000100011000000000e010h010b011L000000000K1L0K1L0K1111111111111111111111", "1111111111111111111111I0J11111I0000000000110g0111110f0000000ca0000010001000110001L00000K1000100011000F111111110001000110000000000J1000100011000000000e010h010b011L000000000K1L0K1L0K1111111111111111111111");
        level[76] = new Level(levelString[76], 41, Direction.SOUTH, "1111111111111111111111I00B1111I0J1I00000J110000B1110a0100000d01100000B110001000000K11000D00B10001000G111110001D00B0001000F1111100011D000001000000J11000111D000010000000110001111D0001L00000011000111111111111A00011000F1111000111A000011000000J100011A0000K1100000c010001A00C11111L00000K1000A00C1111111111111A00000C1111111111111A00000C1111111111111A00000C1111111111111A00C1111111111111111A00CA00J1111A00J11I0000CA00e0111A0000110000CA0000K11A0000011000CA00C1111A00C00011000A00C1111A00C10001100000C11I0000C11000110000C1110c00C11100011L00C1111000C111100011111111111111111100011I0000000000000J1000110f0000000000000100011L00000000000000100011111111111111000000011111111110001000000011111111110b0100000001111111111L0K1L00000K1111111111111111111111", "1111111111111111111111I00B1111I0J1I00000J110000B1110a0100000d01100000B110001000000K11000D00B10001000G111110001D00B0001000F1111100011D000001000000J11000111D000010000000110001111D0001L00000011000111110001111A00011000F1111000111A000011000000J100011A0000K1100000c010001A00C11111L00000K1000A00C1111111111111100000C1111111111111A10000C1111111111111A01000C1111111111111A0011111111111111111A00CA00J1111A00J11I0000CA00e0111A0000110000CA0000K11A0000011000CA00C1111A00C00011000A00C1111A00C10001100000C11I0000C11000110000C1110c00C11100011L00C1111000C111100011111111110001111100011I0000001000100J1000110f0000010001000100011L00000010001000100011111111110001000100011111111110001000000011111111110b0100000001111111111L0K1L00000K1111111111111111111111");
        level[77] = new Level(levelString[77], 45, Direction.NORTH, "1111111111111111111111000000000000000000011000000000000000000011000000000000000000011111111111111111100011111111111111111100011111111A0000001110001111111A0000000111000111111A0000000011100011111100000C0000000001111110000C1000000000111111000C1100000000011111100011111111111111111100010000000000011111100010000000000011111100010000000000011111100010001111A0001111110001000111A000011111100010a011A0000011111100010001A0000001111110001111A0000000111111000111A0000C1111111110001110000C1111111111000111000C1A0001111110001110001A0000111111000111000A0000011111100011100000000011111100011100000000011111100011100000C0001111110001110000C1000111111000111111111000110001000000000000000110b010000000000000001100010000000000000001111111111111111111111", null);
        level[78] = new Level(levelString[78], 41, Direction.WEST, "1111111111111111111111110000011111111111111110000011111111111111110000011111111111111110000011111111111111110000011111111111111111111111111110000011111000111111110000011111000000000J10000011111000000000010000011111L0000000001000001111111H0001000110001111111110001000110001111110B100010001100011111100000010001100011111100000010001100011111100000K1000F11111111110C11111000000001111111111111000000a011111111111110000000K1111111111111111111111111111111111000000111111111111111000000111111111111e11L00000111111111111111111111111111111111111110001111111111111111110c011111111111111111100011111111111111111100011fb011111111111110000100K1111111111111000111111111111111111000000111111111111111000000111111111111e11L00000111111111111111111111111111111111111110001111111111111111110c011111111111111111100011111111111111111100011f1111110B111111E00011111111100000000000011111111100000000000011111111100000000000K1111111110C111111111111111111111111111111111111");
        level[79] = new Level(levelString[79], 31, Directionb00C111111111111111D000C1111111111111111111111111111y11111111111111111111111111111111111111111111111", null);

        level[80] = new Level(levelString[80], 47, Direction.SOUTH, "11111111111111111111111111110000000000000111111110000000000000111111110000000000000111111111111111111000111111111111111111000111111111111111111000110001111111111111000110b01111111111111000110001111111111111000111111111111111111000111111111111111111111111111111111111111111111111111111111111111111000111111111000111111000111111111000111111000111111111000111111000111111111000B11111000111111111D000B11110001111111111D0001111000111111111110001111000000111111110001111000000111111110001111000000111111110c01111111111111111110001111111111111111111111111111111111111111111110001111000111111111110a011110001111111111100011110001111111111100011110001111111111100000000001111111111100000000001111111111100000000001111111111111111111111111111111", null);
        level[81] = new Level(levelString[81], 42, Direction.EAST, "11111111111111111111111111I00000J1I00000J11111100000c010000000111111000000K1000000011111E000G111E000100011I0000001I000000100011000000010a00000100011000000K1L00000K100011000G11111111111100011000111111111111100011000111111111111100011000111111111111100011000111111111111100011000111111111111100011000000111111100000011000000111111100000011L00000111111100000K11111111111111111111111I0J1111111111111111110f0111111111111111111L00111111111111111111100111111111111111111100111111111111111111A0011111111111111111100C11111111111111111100111111111111111111100B111111111111111111D00111111111111100011100111111111111100011100111111111111100011I001111111111111000110b0111111111111100011L0K11111111111110e0111111111111111111L0K1111111111111111111111", "11111111111111111111111111I00000J1I00000J11111100000c01000000011111100000001000000011111E000G000E000100011I00000010000000100011000000010a00000100011000000K1000000K100011000G11110001111100011000111110001111100011000111110001111100011000111110001111100011000111111111111100011000111111111111100011111111111111111111111111111111111111111111111111111111111111111111111111111111111111I0J1111111111111111110f0111111111111111111L00111111111111111111100111111111111111111100111111111111111111A0011111111111111111100C111111111100000J1100111111111110000001100B111111111100000011D00111111111111100011100111111111111100011100111111111111100011I001111111111111000110b0111111111111100011L0K11111111111110e0111111111111111111L0K1111111111111111111111");
        level[82] = new Level(levelString[82], 40, Direction.NORTH, "1111111111111111111111111100010000J11111111111100010000011111111111100010000011111111I0J111111H000111111110e01111111000111111110001111111000111111110001111111000111111110001111111000000111110001111111L000001111100001111111111111111100001111I0J1111111111L00011110c0111111111111111111L00111111111111111111100111111111111111111100F111111111111111111000000000011111111111L00000000011111111111111H000000111111111000J1111111111111111100001111111111111111100001111111111111111110001111111111111111110a0111111111111111111L0K1111111111I001000111111I0000011000100011111100000011000100011111100011111000111111111100011111000000J1111110001111100000b011111100011111L00000K1111110001111111111111111110f0111111111111111111L0K1111111111111111111111111", "1111111111111111111111111100000000J11111111111100000000011111111111100000000011111111I0J111111H000111111110e01111111000111111110001111111000111111110001111111000111111110001111111000000111110001111111L000001111100011111111111111111100011111I0J1111111111L00111110c0111111111111111111L00111111111111111111100111111111111111111100F111111111111111111000000000011111111111L00000000011111111111111H000000111111111100J1111111111111111110001111111111111111110001111111111111111110001111111111111111110a0111111111111111111L0K1111111111I000000111111I0000011000000011111100000011000000011111100011111000111111111100011111000000J1111110001111100000b011111100011111L00000K1111110001111111111111111110f0111111111111111111L0K1111111111111111111111111");
        level[83] = new Level(levelString[83], 31, Direction.NORTH, "1111111111111111111111111000000000111111111111000000000111111111111000000000111111111111000111000110001111111000111000110b011111110001110001100011111110001110001100011111110001110001100011111110001110001100011110000001110000000000110000001110000000000110000001110000000000110001111111111111111111111111111111111111111111111111111111111111111100000000000000111111100000000000000111111100000000000000111111110001111111000111111110001111111000111111110001111111000110000000000000001000110000000000000001000110000000000000001000110001111111110001000110001111111110001000110001111111110001000110001110001110001000110001110c011100010001100011100011100010001100000000000000010001100000000000000010a01100000000000000010001111111111111111111111", "1111111111111111111111111000000000111111111111000000000111111111111000000000111111111111000111000110001111111000111000110b011111110001110001100011111110001110001100011111110001110001100011111110001110001100011110000001110000000000110000001110000000000110000001110000000000110001111111111111111110001111111111111111110001111111111111111110000000000000000000110000000000000000000110000000000000000000111111110001111111000111111110001111111000111111110001111111000110000000000000001000110000000000000001000110000000000000001000110001111111110001000110001111111110001000110001111111110001000110001110001110001000110001110c011100010001100011100011100010001100000000000000010001100000000000000010a01100000000000000010001111111111111111111111");
        level[84] = new Level(levelString[84], 44, Direction.SOUTHWEST, "11111111111111111111111111111I0J1111I0J1111111111A0a0111A0f0111111111A000K11A000K11111111A00C111A00C111111111A00C111A00C111111111A00C111A00C111111111A00C111A000B11111111A00C11I000000B1111111D00B110c0C1D00B1111111D00B1L0K111D00B1111111D00B1111111D00B1111111D00B1111111D00B1111111D00B1111111D00B1111111D00B111111A00C11111111D00B111I000C1111111111D00B11000C11111111111A000B1L0K11111111111A00000B1111111111111A00C1D00B11111111111A00C111D00B111111111A00C11111D000J111111A000B111111D0c01111I000000B111111L0K11110d0C1D00B111111111111L0K111D00B111111111111111111D00B111111111111111111D00B111111111111111111D00B111111111111111111D00B11111111111111111A00C111111111111111I000C11111111111111110e0C11111111111111111L0K111111111111111111111111111111", "11111111111111111111111111111I0J1111I0J1111111111A0f0111A000111111111A000K11A000K11111111A00C111A00C111111111A00C111A00C111111111A00C111A00C111111111A00C111A000B11111111A00C11I000000B1111111D00B110c0C1D00B1111111D00B1L0K111D00B1111111D00B1111111D00B1111111D00B1111111D00B1111111D00B1111111D00B1111111D00B111111A00C11111111D00B1111A00C1111111111D00B11A00C11111111111A00C1A00C11111111111A00C1A00C11111111111A00C1A00C11111111111A00C1A00C11111111111A00C1A00C11I0J111111A00C1A00C11A0c01111I000C1A00C11A000K11110d0C1A00C11A00C111111L0K1A00C11A00C1111111111A00C1I000C1111111111A00C110e0C11111111111D00B11L0K1111111111111D00B111111111111111111D00B111111111111111111D000J11111111111111111D0b0111111111111111111L0K1111111111111111111111111111111");
        level[85] = new Level(levelString[85], 39, Direction.NORTH, "1111111111111111111111111111111111111000J11111111111111111000011111111111111111000011111111111111111H00011111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111111111111100011000F11111111111E0001100000000000J1I0000011000000000000100000011L00000000000100000K11111111111H001000G111111I0000J11001000111111100000011001000111111100GH00FE00100011111110011000000100011111110011L0000K10001111111001111111110a0111111100111111111L0K111111100F11111111111111111100000000J11I0000J1111L00000000110000b01111111111H00FE00GL0K11111111111000000111111111111111L0000K11111111111111111111111111", null);
        level[86] = new Level(levelString[86], 44, Direction.EAST, "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100011111111100011111100011111111100011111100011111111100011111100011111111100011I0010001111111110001100010a011111111100011000100K1111111110001100G1111111111111000110011I0J111111111L001100110e011111111110011001100K1I0J11111E0011001100110c00J11I0001100FE0011L0000FE000K110000001111H000000G111L0000K11111L0000K111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100011111111111110001100011111111111110b0110001111111111111000110001111111111111111110001111111111111111110f011111111111111111100011111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100011111111100011111100011111111100011111100011111111100011111100011111111100011I0000001111111110001100000a011111111100011000000K1111111110001100G1111111111111000110011I0J111111111L001100110e011111111110011001100K1I0J11111E0011001100110c00J11I0001100FE0011L0000FE000K110000001111H000000G111L0000K11111L0000K111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100011111111111110001100011111111111110b0110001111111111111000110001111111111111111110001111111111111111110f011111111111111111100011111111111111111111111111111111111111");
        level[87] = new Level(levelString[87], 31, Direction.SOUTHEAST, "11111111111111111111111111111111AB111111111111111111A00B1111111111111111A0000B11111111AB1111A000000B111111A00B11A000CD000B11111D000BA000C1A000C111111D000000C1A000C1AB11111D0000C1A000C1A00B1111A000C1A000C1A0b0C111A000C1A000C1A000C111A000C1A000C1A000C1111D000B1D000B1D00C111111D000B1D000B1DC11111111D000B1D000B11111111111D000B1D000B11111111111D000B1D000B11111111111D000B1D000B11111111111D000B1D000B11111111111D000B1D000B11111111111D000B1D0c0B11111111111D000B1D00C111AB1111111D000B1DC111A00B1111AB1D000B11111D0a0B11A00B1D000B11111D000BA000C11D000B11111D0000000B111D0d0B11111D0000000B111D00C11111A000CD00C1111DC11111A000C11DC11111111111A000C111111111111111A0c0C1111111111111111D00C111111111111111111DC11111111111111111111111111111111111111", "11111111111111111111111111111111AB111111111111111111A00B1111111111111111A0000B11111111AB1111A000000B111111A00B11A000CD000B11111D00C1A000C1A000C111111DC1A000C1A000C1AB111111A000C1A000C1A00B1111A000C1A000C1A0b0C111A000C1A000C1A000C111A000C1A000C1A000C1111D000B1D000BA000C111111D000B1D000000C11111111D000B1D0000C1111111111D000B1D000B11111111111D000B1D000B11111111111D000B1D000B11111111111D000B1D000B11111111111D000B1D000B11111111111D000B1D0c0B11111111111D000B1D00C111AB111111A0000B1DC111A00B1111A000000B11111D0a0B11A000CD000B11111D000BA000C11D000B11111D0000000B111D0d0B11111D0000000B111D00C11111A000CD00C1111DC11111A000C11DC11111111111A000C111111111111111A0c0C1111111111111111D00C111111111111111111DC11111111111111111111111111111111111111");
        level[88] = new Level(levelString[88], 66, Direction.NORTH, "1111111111111111111111000000000000000000J110000000000000000000110000000000000000000110001110001111111000110001110001I000J1000110001110001000c010001100000000010000K10001100000000010h0G11000110000000001L0K111000110001111111111111000110e0111A00000B11100011L0K11A0000000B11000111111A000000000B10001111111111111H000100011I000000000J1000000011000000000b010000000110000000000K1000000K1100011111111E0001111110001D000000000C11111100011D0000000C1111111000111D00000C11111111000111110001111111111000B11110a0111111111100000B11L0K11f111g1110000000B111111111111111D00000B1111111111111111D000011111111111111111D000B11111111111111111D000111111111111111111000B11111111111111111D0000000000J1111111111000000000d011111111110000000000K1111111111111111111111", "1111111111111111111111000000000000000000J110000000000000000000110000000000000000000110001110001111111000110001110001I000J1000110001110001000c010001100000000010000K10001100000000010h0G11000110000000001L0K111000110001111111111111000110e0111A00000B11100011L0K11A0000000B11000111111A000000000B10001111110001111H000100011I000000100J1000000011000000010b010000000110000000100K1000000K1100010001111E0001111110001D000000000C11111100011D0000000C1111111000111D00000C11111111000111110001111111111000B11110a0111111111100000B11L0K11f111g1110000000B111111111111111D00000B1111111111111111D000011111111111111111D000B11111111111111111D000111111111111111111000B11111111111111111D0000000000J1111111111000000000d011111111110000000000K1111111111111111111111");
        level[89] = new Level(levelString[89], 54, Direction.NORTH, "1111111111111111111111I0000J1000000000111110000b010000d00001111100GL0K10000000001111100F11110000000001111100000J100000000011111L00000100000000011111111H00100000000011111111E00100000000011111I0000010000000001111100000K10000000001111100G11110000000001111100F1I0000000000010011000000000000000010011L00000000000000010011111111111111111110011I0000000000000001001100000000000000001001100G1L0000000000010011001111100000000010011001I0J1000000000100110010c0100000000010011001L0010000000001001100FE00100000000010011000000100000000010011L0000K1000000000100111111111000000000111111I000J100000000011111100000100000000011111100100100000000011111100100F00000000011111I001000000000000111110a0100000000000011111L0K1L000000000001111111111111111111111111", "1111111111111111111111I0000J1000000000111110000b010000d00001111100GL0K10000000001111100F11110000000001111100000J100000000011111L00000100000000011111111H00100000000011111111E00100000000011111I0000010000000001111100000K10000000001111100G11110000000001111100F1I0100000000000011000000100000000000011L00000100000000000011111111111111111110011I0000000000000001001100000000000000001001100G1L0000000000010011001111H00000000010011001I0J1000000000100110010c0100000000010011001L0010000000001001100FE00100000000000011000000100000000000011L0000K1000000000000111111111000000000111111I000J100000000011111100000100000000011111100100100000000011111100100F00000000011111I001000000000000111110a0100000000000011111L0K1L000000000001111111111111111111111111");

        level[90] = new Level(levelString[90], 89, Direction.WEST, "1111111111111111111111000000000100000000011000000000100000000011001111100100111110011001I0J1001001I0J1001100000010010010000001100000K1001001L0000011111111100100111111111I00000100100100000J1100000010010010000c011L0K1001001001001L0K11111100111111100111111111100000100000111111111100000100000111111111111100100111111111I00000000100000000J110g000000010000000h011L0K1111001001111L0K11111I0J1001001I0J111110000d010010010c00001100000K1001001L0000011001111100100111110011000000000100000000011000000000100000000011111111111111111111111I00000000100000000J110e000000010000000f011L0K1001111111001L0K11111100111111100111111000000111111100000011000000111111100000011001111I0J1I0J111100110000000a010c00000001100000000K1L000000001111111111111111111111", "1111111111111111111111000000000100000000011000000000100000000011001111100100111110011001I0J1001001I0J100110000e010010010f00001100000K1001001L0000011111111100100111111111I00000100100100000J110b000010010010000c011L0K1001001001001L0K11111100100100100111111111100000100000111111111100000100000111111111111111111111111111I00000000100000000J110g000000010000000h011L0K1111001001111L0K11111I0J1001001I0J111110000d010010010c00001100000K1001001L0000011001111100100111110011000000000100000000011000000000100000000011111111100100111111111I00000000100000000J11000000000100000000011L0K1001111111001L0K11111100111111100111111000000111111100000011000000111111100000011001111I0J1I0J111100110000000a010c00000001100000000K1L000000001111111111111111111111");
        level[91] = new Level(levelString[91], 37, Direction.EAST, "1111111111111111111111111111A00000B111111111111A000000000B11111111A0000000000000B11111100000000000000011111A000000000000000B111100000000000000000111A00000000000000000B11000000000000000000011000000000000000000011000000000100000000011000000000100000000011000000000100000000011D000000001000000000111000000001000000000111D000000010000000001111000000010000000001111D0000001000000C00111111D000010000C110011111111D00100C11110011111111111111111110011I000011001000000000110a0001100100000000011L000011001001111111111110011001000000000110000011001000000000110000011001111111100110011111001I0000J10011001I0J10010000c0100110010e0100100000K100110010001001000G111001100100010010001I00001100000000010f010ba0001100100000000011L000011001001111111111110011001000000000110000011001000000000110000011001111111100110011111001I0000J10011001I0J10010000c0100110010e0100100000K100110010001001000G111001100100010010001I00001100000000010f010b000110000000001L0K1L00001111111111111111111111");
        level[92] = new Level(levelString[92], 43, Direction.NORTH, "111111111111111111111111111111I0J1111111111111111110b011111111111111111100011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110001111111111111111110d01111111111111111110001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000F1111111111111111100000011111111111111100000011111I0J1111111L00000111110c01111111111111111110001111111111111111111111111111111111111111111111111111111111111111111110001111111111111111110001I0000000000000J110001000000000000000110001000000000000000110001000G1111111H00011111111111111111111111111111111111111111111111111111111111111111111111110001111111111111111110a0111111111111111111L0K111111111111111111111111111111", "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110001111111111111111110d01111111111111111110001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000F1111111111111111100000011111111111111100000011111I0J1111111L00000111110c0111111111H000111110001111111111111111111111111111111111111111111111111111111111111111111110001111111111111111110001I0000000000000J110001000000000000000110001000000000000000110001000G1111111H00011111111111111111111111111111111111111111111111111111111111111111111111110001111111111111111110a0111111111111111111L0K111111111111111111111111111111");
        level[93] = new Level(levelString[93], 55, Direction.EAST, "1111111111111111111111I00J1111111I00J1111110a0000000J100c0111111000000000010000111111L00K111H001L00K1111111111111E0011001111111I0000000001100F111111000000000K110000J111100000G11111100000111100000111111100000111100000F111111000001111000000000J11L000011110000000000111110011110000000000F111E001111000000000000000001111L000000000000000K1111111111111H00G11111111111111111111111111111111111111E00111111111I0000000000011111111100000000000K111I00J1100000G11111111100b011000001111111111000011000001111111111L00K11000001111111111100111000001111111111E001110000011111111I0000111000001111111100000111000001111111E000001110000011111I000000011100000111110000000K11100000F111E00000G11111000000000000000111111L0000000000000K11111111111111111111111111", "1111111111111111111111I00J1111111I00J1111110a0000000J100c0111111000000000010000111111L00K111H001L00K1111111111111E0011001111111I0000000001100F111111000000000K110000J111100000G11111100000111100000111111100000111100000F111111000001111000000000J11L000011110000000000111110011110000000000F111E001111000000000000000001111L000000000000000K1111111111111H00G11111111111111111100111111111111111111E00111111111I0000000000011111111100000000000K111I00J1100000G11111111100b011000001111111111000011000001111111111L00K11000001111111111100111000001111111111E001110000011111111I0000111000001111111100000111000001111111E000001110000011111I000000011100000111110000000K11100000F111E00000G11111000000000000000111111L0000000000000K11111111111111111111111111");
        level[94] = new Level(levelString[94], 97, Direction.EAST, "1111111111111111111111I000001100000000000110a0000110000000000011L0K100110011111110011111100110011111110011111100110011I0J1100111111001100000e011001111110011000000K11001111110011111111111001111110011111111111001100000001000000000001100000001000000000001100111111001111111111100111111001111111111100001111001000000111100001111001000000111111000011001001100111111000011001001I001111111100110010010d0111111110011001001L0011111100001100100J1001111110000110010g0100111100001111001L0K10011110000111100111111111110011111100000000011110011I0J1000000000111100J10h0111111110011110c0100K11110011001111L0K100100000011000011111100100000011000011111100100111111110011I0J1001001I0J111100110f000000010b000000011L000000001L000000001111111111111111111111", "1111111111111111111111I000001100000000000110a0000110000000000011L0K100110011111110011111100110011111110011111100110011I0J1100111111001100000e011001111110011000000K11001111110011111111111001111110011111111111001100000000000000000001100000000000000000001100111111001111111111100111111001111111111100001111001000000111100001111001000000111111000011001001111111111000011001001I0J1111111100110010010d0111111110011001001L0011111100001100100J1001111110000110010g0100111100001111001L0K10011110000111100111110011110011111100100000011110011I0J1001000000111100J10h0111100111111110c0100K11110011001111L0K100100000011000011111100100000011000011111100100111111110011I0J1111001I0J111100110f000000010b000000011L000000001L000000001111111111111111111111");
        level[95] = new Level(levelString[95], 63, Direction.EAST, "11111111111111111111111111I000000J11I000J11111100000000110000011111100G11H00FE00100111111001111000000100111111001111L0000K100111111001111111111E0011111100111111I00000011111100111111000000K11000000000011001111111000000000011001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100111111111111111111100111111111111111I0JE001111111111111110b0000111111111111111L0000K111111111111111111111111111111111111I0000J1111111111111110a0000111111111111111L0KH00111000000000011111100111000000000011111100111111100111111111111111111100111111111111111111100111111111111111111100F111111111111111111000000001111111111111L000000011111111111111111111111111111", null);
        level[96] = new Level(levelString[96], 52, Direction.WEST, "1111111111111111111111111111000100000111111111111000100000111111111111000100000000011111111000100000000011111111000100000000011111111000111111100011111111000100000100011111111000000000100011000001000000c00100011000000000000000100011000000000100000100011000000000111111100011000001000100000100011111111000100000000011000001000100e0000001100000100010000000001100000000010000010001100000000011111110001100000000010000000001110001111110000d0000111000111111000000000111000111111111111111110000011100000100000110000011100000000000110000011100c00000f001100000111000000000001100000111000001000001110001111111111111111100000100000111000001100000000000111000001100000000a0011100b001100000000000111000001100000100000111000001111111111111111111111", "1111111111111111111111111111000000000111111111111000000000111111111111000000000000011111111000100000000011111111000100000000011111111000111111100011111111000100000100011111111000100000000011000001000100c0000001100000000010000000001100e0000001000001000110000000001111111000110000010001000001000111111110001000000000110000010001000000000110000011111000000000110000000001000001000110000000g011111111111100000000010000000001110001111110h00d0000111000111111000000000111000111111111111111110000011100000100000110000011100000000000110000011100c000000001100000111000000000001100000111000001000001110001111111111100011100000100000111000001100000000000111000001100000000f0011100b001100000000000111000001100000100000111000001111111111111111111111");
        level[97] = new Level(levelString[97], 99, Direction.EAST, "1111111111111111111111I00100000000J111111110c01000000000111111110001111111H00111111110011111111E001111111100000J1I0000011111111000000100000K11111111000000100111111111111000000100010000010J110000001L0010000010011L00000111110010010011111H001111E00100100111111001I0000010010011111100100000K10010011111100100G111100100111111001001I0JE001001111110010010a0000100111111001001L0000K10011111E00100F11111111111I0000010000000000001100000K1L0000000000011001111111111111001111001111111111111001111001111111111111001111000000011100000001111000000011100000001111111110011100111111111111110011100100000J1111111001110010000b0111111100000001001L0K111111100000001001111111111111111111001111111111111000000001111111111111L000000011111111111111111111111111", "1111111111111111111111I00000000000J111111110c00000000000111111110001111111H0011111111D0C1111111E0011111111B1A00J1I0000011111111000000100000K11111111000000100111111111111000000100000000000J110000001L0000000000011L00000111111111110011111H001111E00100100111111001I0000010010011111100100000K10010011111100100G111100100111111001001I0JE001001111110010010a0000100111111001001L0000K10011111E00100F11111110011I0000010000000100001100000K1L0000001000011001111111111111001111001111111111111001111001111111111111001111000000011100000001111000000011100000001111111110011100111111111111110011100100000J1111111001110010000b0111111100000001001L0K111111100000001001111111111111000111001111111111111000000001111111111111L000000011111111111111111111111111");
        level[98] = new Level(levelString[98], 88, Direction.NORTH, "1111111111111111111111I0000000000000000001100000000000000000c01100G0000000000000000110010000000000000000110010000000000000000110010000000000000000110011111111111000000110011111111111000000110010000000011000000110010000000011000000110010000000011000000110010000000011000000110010000000011000000110010000000011000000110010d000000110000001100100000000110000001100111111100111111111100J1111110011111111110a0111111001111111111L0K111111001111111111111111111001111111111111111111001111111111I00011111001111100J1100001111100111110001100G1111111111111H0011001111111I0000J110011001I000J10c0000110011001000001L0KH0011001111100100111110011001100100100111110011001100100100FI0J100FE00110000010000b0100000011L000K1L0000K1L0000K1111111111111111111111", "1111111111111111111111I0000000000000000001100000000000000000c01100G0000000000000000110010000000000000000110010000000000000000110010000000000000000110010000000000000000110010000000000000000110010000000000000000110010000000000000000110010000000000000000110010000000000000000110010000000000000000110010000000000000000110010d000000000000001100100000000000000001100111111111111111111100J1111110011111111110a0111111001111111111L0K111111001111111111111111111001111111111111111111001111111111I00011111001111100J1100001111100111110001100G1111111111111H0011001111111I0000J110011001I000J10c0000110011001000001L0KH0011001100100100111110011001100100100111110011001100100100FI0J100FE00110000010000b0100000011L000K1L0000K1L0000K1111111111111111111111");
        level[99] = new Level(levelString[99], 100, Direction.EAST, "11111111111111111111111100000111001000000111100000111001000000111100100001001000000111100100001001000000110000100d010010c00001100001000010010000001100111110011111111001100111110000010000001100000010000010000001100000011110010011111111001111110010001001111001000110010f010011000010g0000010001001100001000000011111111100111111111111111111100110001000100000001100010e010b0100000h0110001000100010011000111111100100010011111110000000100011111111110000000100011111111111111111100011111111111100001100011111111111100001100011111111111111001100011111111111111001100011111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111110001111100011111100110a001111000000000001100001111000000000001111111111111111111111", "11111111111111111111111100000111000000000111100000111000000000111100100001001000000111100100001001000000110000100d010010c00001100001000010010000001100111110010011111111100111110010000000001100000010010000000001100000011111111111001111001111110010001001111001000110010f000011000010g0000010000001100001000000011111111100111111111111111111100110001000100000001100000e010b0100000h0110000000100010011000111111111100010011111110000000100011111111110000000100011111111111111111100011111111111100001100011111111111100001100011111111111111001100011111111111111001100011111111111111111100011111111111111111100011111111111111111100011111111111111111100011111111110001111100011111100110a001111000000000001100001111000000000001111111111111111111111");


        MobileAds.initialize(this, initializationStatus -> {
        });

        loadAd();


        DisplayMetrics lDisplayMetrics = getResources().getDisplayMetrics();
        widthPixels = lDisplayMetrics.widthPixels;
        heightPixels = lDisplayMetrics.heightPixels;

        data = getSharedPreferences("sharedPreferences", MODE_PRIVATE);
        dataEditor = data.edit();
        dataEditor.apply();

        if (!data.contains("remove_ads")) {
            dataEditor.putBoolean("remove_ads", false);
            dataEditor.putBoolean("sound", true);
            dataEditor.putBoolean("joystick", true);
            dataEditor.apply();
        }

        boolean marker = false;

        for (int i = 0; i < level.length; i++) {
            marker = setLevelStars(level[i], i, marker);
        }








        if(data.getBoolean("remove_ads", false)){
            adsRemoved = true;
        }

        if ((widthPixels / 21) * 37 < heightPixels) {
            square = widthPixels / 21;
        } else {
            square = heightPixels / 37;
        }

        int zoneSquare;

        if ((widthPixels / 9) * 16 < heightPixels) {
            zoneSquare = widthPixels / 9;
        } else {
            zoneSquare = heightPixels / 16;
        }

        zoneWidth = zoneSquare * 9;
        zoneHeight = zoneSquare * 16;

        zoneX = (widthPixels / 2 - zoneWidth / 2);
        zoneY = (heightPixels / 2 - zoneHeight / 2);


        menuLayout = new ConstraintLayout(this);
        menuLayout.setLayoutParams(new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ConstraintLayout.LayoutParams.MATCH_PARENT));

        menuInterfaceLayout = new ConstraintLayout(this);
        menuInterfaceLayout.setLayoutParams(new ConstraintLayout.LayoutParams(widthPixels * 3, ConstraintLayout.LayoutParams.MATCH_PARENT));
        menuInterfaceLayout.setX(-widthPixels);

        menuBackgroundLayout = new ConstraintLayout(this);
        menuBackgroundLayout.setLayoutParams(new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_PARENT, ConstraintLayout.LayoutParams.MATCH_PARENT));

        deleteLayout = new ConstraintLayout(this);
        deleteLayout.setLayoutParams(new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_PARENT, ConstraintLayout.LayoutParams.MATCH_PARENT));
        deleteLayout.setVisibility(View.INVISIBLE);

        deleteText = new TextView(this);
        deleteLayout.addView(deleteText, (widthPixels / 4) * 3, heightPixels / 8);
        deleteText.setX(zoneX + ((float) zoneWidth / 2) - ((float) deleteText.getLayoutParams().width / 2));
        deleteText.setY(zoneY + ((float) zoneWidth / 4));
        deleteText.setGravity(Gravity.CENTER);
        deleteText.setTextColor(Color.BLACK);
        deleteText.setText(R.string.deleteText0);
        deleteText.setTypeface(Typeface.MONOSPACE, Typeface.BOLD);
        deleteText.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) deleteText.getLayoutParams().height / 4);


        for (int i = 0; i < deleteButton.length; i++) {
            deleteButton[i] = new Button(this, null, android.R.attr.borderlessButtonStyle);
            createButton(deleteButton[i], deleteLayout, (zoneWidth / 8) * 3, zoneHeight / 12, (float) zoneWidth / 2, (float) zoneHeight / 2);
        }

        deleteButton[0].setX(zoneX + ((float) zoneWidth / 4) - ((float) deleteButton[0].getLayoutParams().width / 2));
        deleteButton[1].setX(zoneX + (((float) zoneWidth / 4) * 3) - ((float) deleteButton[0].getLayoutParams().width / 2));
        deleteButton[2].setX(zoneX + ((float) zoneWidth / 2) - ((float) deleteButton[2].getLayoutParams().width / 2));

        deleteButton[0].setText(R.string.deleteButton0);
        deleteButton[1].setText(R.string.deleteButton1);
        deleteButton[2].setText(R.string.deleteButton2);

        deleteButton[2].setVisibility(View.INVISIBLE);

        deleteButton[0].setOnClickListener(v -> {
            deleteLayout.setVisibility(View.INVISIBLE);
            menuInterfaceLayout.setVisibility(View.VISIBLE);
        });

        deleteButton[1].setOnClickListener(v -> {

            boolean adsRemoved = data.getBoolean("remove_ads", false);
            dataEditor.clear();
            dataEditor.putBoolean("remove_ads", adsRemoved);
            dataEditor.apply();
            settingsButton[1].setText(R.string.music_button_1);
            settingsButton[2].setText(R.string.sound_effects_button_1);

            boolean marker2 = false;

            for (int i = 0; i < levelButton.length; i++) {
                marker2 = setLevelStars(level[i], i, marker2);
                updateLevelButton(i);
            }

            deleteText.setText(R.string.deleteText1);
            deleteButton[0].setVisibility(View.INVISIBLE);
            deleteButton[1].setVisibility(View.INVISIBLE);
            deleteButton[2].setVisibility(View.VISIBLE);
        });

        deleteButton[2].setOnClickListener(v -> {
            deleteLayout.setVisibility(View.INVISIBLE);
            deleteText.setText(R.string.deleteText0);
            deleteButton[0].setVisibility(View.VISIBLE);
            deleteButton[1].setVisibility(View.VISIBLE);
            deleteButton[2].setVisibility(View.INVISIBLE);
            menuInterfaceLayout.setVisibility(View.VISIBLE);
        });

        layout.addView(menuLayout);
        menuLayout.addView(menuBackgroundLayout);
        menuLayout.addView(menuInterfaceLayout);

        layout.addView(deleteLayout);


        gameLayout = new ConstraintLayout(this);
        gameLayout.setLayoutParams(new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_PARENT, ConstraintLayout.LayoutParams.MATCH_PARENT));
        layout.addView(gameLayout, new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_PARENT, ConstraintLayout.LayoutParams.MATCH_PARENT));
        gameLayout.setVisibility(View.INVISIBLE);


        endLayout = new ConstraintLayout(this);


        endLayout.setLayoutParams(new ConstraintLayout.LayoutParams(zoneSquare * 9, zoneSquare * 16));
        endLayout.setX(((float) widthPixels / 2) - ((float) endLayout.getLayoutParams().width / 2));
        endLayout.setY(((float) heightPixels / 2) - ((float) endLayout.getLayoutParams().height / 2));
        layout.addView(endLayout);
        endLayout.setVisibility(View.INVISIBLE);

        creditsLayout = new ConstraintLayout(this);
        creditsLayout.setLayoutParams(new ConstraintLayout.LayoutParams(widthPixels, heightPixels));
        creditsLayout.setX(((float) widthPixels / 2) - ((float) creditsLayout.getLayoutParams().width / 2));
        creditsLayout.setY(((float) heightPixels / 2) - ((float) creditsLayout.getLayoutParams().height / 2));
        layout.addView(creditsLayout);
        creditsLayout.setVisibility(View.INVISIBLE);


        for (int i = 0; i < credits.length; i++) {
            credits[i] = new TextView(this);
            credits[i].setTextColor(Color.WHITE);
            credits[i].setGravity(Gravity.CENTER);
            creditsLayout.addView(credits[i]);
            creditsLayout.getLayoutParams().width = widthPixels;
            credits[i].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) credits[i].getLayoutParams().height / 2);
            credits[i].setY(heightPixels);
            credits[i].getLayoutParams().width = (widthPixels / 32) * 30;
            credits[i].getLayoutParams().height = zoneHeight / 16;
            credits[i].setX((float) widthPixels / 2 - (float) credits[i].getLayoutParams().width / 2);
            credits[i].setTypeface(Typeface.MONOSPACE, Typeface.BOLD);
        }


        credits[0].setText(R.string.credits0);
        credits[0].setAllCaps(true);
        credits[0].getLayoutParams().height = (heightPixels / 8);
        credits[1].setText(R.string.credits1);
        credits[1].setY(credits[0].getY() + credits[0].getLayoutParams().height);


        credits[2].setText(R.string.credits2);
        credits[3].setText(R.string.credits3);
        credits[4].setText(R.string.credits4);
        credits[5].setText(R.string.credits5);
        credits[3].getLayoutParams().height = (heightPixels / 8);
        credits[5].getLayoutParams().height = (heightPixels / 8);
        credits[3].setY(credits[2].getY() + credits[2].getLayoutParams().height);
        credits[4].setY(credits[3].getY() + credits[3].getLayoutParams().height);
        credits[5].setY(credits[4].getY() + credits[4].getLayoutParams().height);

        credits[6].setText(R.string.credits6);
        credits[7].setText(R.string.credits7);
        credits[8].setText(R.string.credits8);
        credits[9].setText(R.string.credits9);
        credits[7].getLayoutParams().height = (heightPixels / 8);
        credits[7].setY(credits[6].getY() + credits[6].getLayoutParams().height);
        credits[8].setY(credits[7].getY() + credits[7].getLayoutParams().height);
        credits[9].setY(credits[8].getY() + credits[8].getLayoutParams().height);

        credits[10].setText(R.string.credits10);
        credits[11].setText(R.string.credits11);
        credits[11].getLayoutParams().height = (heightPixels / 8);

        credits[11].setY(credits[10].getY() + credits[10].getLayoutParams().height);

        credits[12].setText(R.string.credits12);


        for (TextView textView : credits) {
            textView.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) textView.getLayoutParams().height / 2);
        }

        credits[0].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) (credits[0].getLayoutParams().height / 8) * 3);
        credits[3].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) (credits[3].getLayoutParams().height / 8) * 3);
        credits[5].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) (credits[5].getLayoutParams().height / 8) * 3);
        credits[7].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) (credits[5].getLayoutParams().height / 8) * 3);
        credits[11].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) (credits[11].getLayoutParams().height / 8) * 3);


        for (int i = 0; i <= 2; i++) {
            menuSector[i] = new ConstraintLayout(this);
            menuSector[i].setLayoutParams(new ConstraintLayout.LayoutParams(zoneSquare * 9, zoneSquare * 16));
            menuSector[i].setX((((float) widthPixels / 2) - ((float) menuSector[i].getLayoutParams().width / 2)) + (widthPixels * i));
            menuSector[i].setY(((float) heightPixels / 2) - ((float) menuSector[i].getLayoutParams().height / 2));
            menuInterfaceLayout.addView(menuSector[i]);
        }

        pauseLayout = new ConstraintLayout(this);
        layout.addView(pauseLayout, new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_PARENT, ConstraintLayout.LayoutParams.MATCH_PARENT));
        pauseLayout.setVisibility(View.INVISIBLE);

        intersticeLayout = new ConstraintLayout(this);
        intersticeLayout.setLayoutParams(new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, heightPixels + (widthPixels / 16)));
        layout.addView(intersticeLayout);


        deathLayer = new ImageView(this);
        gameLayout.addView(deathLayer, widthPixels, heightPixels);
        deathLayer.setBackgroundColor(Color.BLACK);
        deathLayer.getBackground().setAlpha(0);

        buttonSpacing = (widthPixels / 2 - widthPixels / 8) - (widthPixels / 2 - widthPixels / 8 - widthPixels / 4 - widthPixels / 16);
        endText = new TextView(this);
        endLayout.addView(endText, (zoneWidth / 8) * 7, zoneHeight / 10);
        endText.setX(((float) zoneWidth / 2) - ((float) endText.getLayoutParams().width / 2));
        endText.setY((float) zoneHeight / 8);
        endText.setGravity(Gravity.CENTER);
        endText.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) endText.getLayoutParams().height / 2);
        endText.setAllCaps(true);
        endText.setTypeface(Typeface.MONOSPACE);

        for (int i = 0; i < star.length; i++) {
            star[i] = new Star(this, i);
        }

        endLevelText = new TextView(this);
        endLayout.addView(endLevelText, (zoneWidth / 16) * 15, zoneHeight / 24);
        endLevelText.setX((float) zoneWidth / 2 - (float) endLevelText.getLayoutParams().width / 2);
        endLevelText.setY(star[1].getY() + star[1].getLayoutParams().height + ((float) zoneHeight / 64));
        endLevelText.setGravity(Gravity.CENTER);
        endLevelText.setTextColor(Color.WHITE);
        endLevelText.setTypeface(Typeface.MONOSPACE);
        endLevelText.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) endLevelText.getLayoutParams().height / 2);
        bestText = new TextView(this);
        endLayout.addView(bestText, (zoneWidth / 16) * 15, zoneHeight / 24);
        bestText.setX((float) zoneWidth / 2 - (float) bestText.getLayoutParams().width / 2);
        bestText.setY(star[1].getY() + star[1].getLayoutParams().height + ((float) zoneHeight / 16));
        bestText.setGravity(Gravity.CENTER);
        bestText.setTextColor(Color.WHITE);
        bestText.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) bestText.getLayoutParams().height / 2);
        bestText.setTypeface(Typeface.MONOSPACE);

        //bestText.setBackgroundColor(Color.parseColor("#000080"));


        for (int i = 0; i < gameText.length; i++) {
            gameText[i] = new TextView(this);
            gameLayout.addView(gameText[i], zoneWidth / 2, square * 2);
            //gameLayout.addView(gameText[i], zoneWidth/2, (zoneHeight * 8) / 105);
            gameText[i].setX(zoneX + square + (((float) zoneWidth / 2) - (square * 2)) * i);
            gameText[i].setY(zoneY + ((float) square / 2));

            gameText[i].setTextColor(Color.BLACK);
            gameText[i].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) gameText[i].getLayoutParams().height / 2);
        }
        gameText[1].setText(getString(R.string.time_text, (float) time / 50));

        gameText[0].setGravity(Gravity.START);
        gameText[1].setGravity(Gravity.END);


        intersticePAINT = new Paint();

        pauseBitmap = Bitmap.createBitmap(widthPixels / 2, heightPixels / 6, Bitmap.Config.ARGB_8888);
        pauseCanvas = new Canvas(pauseBitmap);
        pausePaint = new Paint();


        scroll = new ScrollView(this);
        menuInterfaceLayout.addView(scroll);
        scroll.setLayoutParams(new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        scroll.setX(widthPixels * 2);
        scroll.setVerticalScrollBarEnabled(false);
        scroll.setOverScrollMode(View.OVER_SCROLL_NEVER);

        scrollLayout = new RelativeLayout(this);
        scrollLayout.setLayoutParams(new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, (int) (zoneY + ((((float) zoneWidth / 5 + ((float) zoneWidth / 25)))) + ((((float) zoneWidth / 5 + ((float) zoneWidth / 25)) * 26)))));

        scroll.addView(scrollLayout);

        avoider = new Avoider();

        portcullis = new Portcullis(this);
        layout.addView(portcullis, widthPixels, heightPixels + widthPixels / 16);

        joystick = new Joystick(this);


        menuBackground = new MenuBackground();
        genTone();

        for (int i = 0; i <= 1; i++) {
            menuButton[i] = new Button(this, null, android.R.attr.borderlessButtonStyle);
            menuInterfaceLayout.addView(menuButton[i], zoneWidth - (zoneWidth / 16), zoneHeight / 8);
            menuButton[i].setX(widthPixels + zoneX + (float) zoneWidth / 32);
            menuButton[i].setY(zoneY + (float) zoneHeight / 2 + i * menuButton[i].getLayoutParams().height * 2);
            menuButton[i].setTextColor(Color.WHITE);
            menuButton[i].setBackgroundColor(getResources().getColor(R.color.buttonBackgroundColor));
            menuButton[i].setTypeface(Typeface.MONOSPACE);
            menuButton[i].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) menuButton[i].getLayoutParams().height / 2);
            menuButtonSpeed[i] = heightPixels / 32 - (heightPixels / 256) * i;
        }


        menuButton[0].setText(R.string.menuButton0);
        menuButton[0].setOnClickListener(v -> {
            if (!slide && !start) {
                slideDirection = -1;
                slide = true;
            }
        });

        menuButton[1].setText(R.string.menuButton1);
        menuButton[1].setOnClickListener(v -> {
            if (!slide && !start) {
                slideDirection = 1;
                slide = true;
            }
        });

        createLevelButtons();
        createTitleLetters();
        createEndButton();


        for (int i = 0; i <= 1; i++) {
            menuText[i] = new TextView(this);
            menuText[i].setLayoutParams(new ViewGroup.LayoutParams((zoneWidth / 8) * 7, zoneHeight / 8));
            menuText[i].setX(zoneX + ((float) zoneWidth / 2) - ((float) menuText[i].getLayoutParams().width / 2));
            menuText[i].setY(levelButton[0].getY() - (float) menuText[i].getLayoutParams().height);
            menuText[i].setGravity(Gravity.CENTER_HORIZONTAL);
            menuText[i].setTextColor(Color.BLACK);
            menuText[i].setAllCaps(true);
            menuText[i].setTypeface(Typeface.MONOSPACE, Typeface.BOLD);
            menuText[i].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) menuText[i].getLayoutParams().height / 2);
        }

        menuInterfaceLayout.addView(menuText[0]);
        menuText[0].setText(R.string.settings_text);

        scrollLayout.addView(menuText[1]);
        menuText[1].setText(R.string.select_level_text);


        copyright = new TextView(this);
        menuSector[1].addView(copyright, widthPixels * 3, heightPixels / 64);
        copyright.setY(heightPixels - ((float) heightPixels / 64));
        copyright.setGravity(Gravity.CENTER);
        copyright.setText(R.string.copyright);
        copyright.setTextColor(Color.BLACK);
        copyright.setVisibility(View.INVISIBLE);
        copyright.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) copyright.getLayoutParams().height / 2);


        for (int i = 0; i < settingsButton.length; i++) {
            settingsButton[i] = new Button(this, null, android.R.attr.borderlessButtonStyle);
            menuSector[0].addView(settingsButton[i], zoneWidth - (zoneWidth / 8), zoneHeight / 10);
            //settingsButton[i].setStateListAnimator(null);
            settingsButton[i].setX((float) (zoneWidth / 16));
            settingsButton[i].setY((float) menuSector[1].getLayoutParams().height / 2 - ((float) menuSector[1].getLayoutParams().height / 16) * 5 + ((float) menuSector[1].getLayoutParams().height / 6) * i);
            //settingsButton[i].setAllCaps(false);
            settingsButton[i].setBackgroundColor(getResources().getColor(R.color.buttonBackgroundColor));
            //settingsButton[i].setPadding(settingsButton[i].getLayoutParams().height / 3, settingsButton[i].getLayoutParams().height / 3, settingsButton[i].getLayoutParams().height / 3, settingsButton[i].getLayoutParams().height / 3);
            settingsButton[i].setTextColor(Color.WHITE);
            settingsButton[i].setTypeface(Typeface.MONOSPACE);
            settingsButton[i].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) settingsButton[i].getLayoutParams().height / 2);
        }

        settingsButton[1].setText(R.string.music_button_0);
        if (data.getBoolean("joystick", true)) {
            settingsButton[1].setText(R.string.music_button_1);
        } else {
            settingsButton[1].setText(R.string.music_button_0);
        }
        settingsButton[1].setOnClickListener(v -> {
            if (data.getBoolean("joystick", true)) {
                dataEditor.putBoolean("joystick", false).apply();
                settingsButton[1].setText(R.string.music_button_0);
            } else {
                dataEditor.putBoolean("joystick", true).apply();
                settingsButton[1].setText(R.string.music_button_1);
            }
        });

        settingsButton[2].setText(R.string.sound_effects_button_0);
        if (data.getBoolean("joystick", true)) {
            settingsButton[2].setText(R.string.sound_effects_button_1);
        } else {
            settingsButton[2].setText(R.string.sound_effects_button_0);
        }
        settingsButton[2].setOnClickListener(v -> {
            if (settingsButton[2].getText() == getResources().getString(R.string.sound_effects_button_0)) {
                settingsButton[2].setText(R.string.sound_effects_button_1);
                dataEditor.putBoolean("soundEffects", true);
            } else {
                settingsButton[2].setText(R.string.sound_effects_button_0);
                dataEditor.putBoolean("soundEffects", false);
            }
            dataEditor.apply();
        });

        settingsButton[3].setText(R.string.credits_button);
        settingsButton[3].setOnClickListener(v -> {
            menuInterfaceLayout.setVisibility(View.INVISIBLE);
            credits[12].setText(R.string.credits12);
            creditsLayout.setVisibility(View.VISIBLE);
            for (TextView credit : credits) {
                credit.setTextColor(Color.BLACK);
            }
            creditsTimer = 0;
            moveCreditsToStart();
        });

        settingsButton[4].setText(R.string.delete_saved_data_button);
        settingsButton[4].setOnClickListener(v -> {
            menuInterfaceLayout.setVisibility(View.INVISIBLE);
            deleteLayout.setVisibility(View.VISIBLE);
        });

        productDetailsList = new ArrayList<>();

        initializeBillingClient();



        if(data.getBoolean("remove_ads", false)) {
            settingsButton[0].setBackgroundColor(Color.parseColor("#005f00"));
            settingsButton[0].setTextColor(Color.parseColor("#ffffff"));
            settingsButton[0].setText(R.string.ads_removed);
        } else {
            settingsButton[0].setBackgroundColor(getResources().getColor(R.color.fadedButtonBackgroundColor));
            settingsButton[0].setTextColor(Color.parseColor("#808080"));
            settingsButton[0].setText(R.string.remove_ads);
        }

        settingsButton[0].setOnClickListener(v -> {
            if(!data.getBoolean("remove_ads", false) && googlePlayIsLoaded) {
                launchPurchaseFlow(productDetailsList.get(0));
            }
        });


        widthFraction = widthPixels / 8;


        for (int i = 0; i < mapImage.length; i++) {
            mapImage[i] = new ImageView(this);
            gameLayout.addView(mapImage[i]);
            mapImage[i].getLayoutParams().width = square * 21;
            mapImage[i].getLayoutParams().height = square * 35;
            mapImage[i].setX(((float) widthPixels / 2) - ((float) mapImage[i].getLayoutParams().width / 2));
            mapImage[i].setY(heightPixels - zoneY - mapImage[i].getLayoutParams().height);
            //mapImage[i].setY(gameText[0].getY() + gameText[0].getLayoutParams().height);
        }


        for (int i = 0; i <= 1; i++) {
            for (int j = 0; j <= 1; j++) {
                levelBitmap[i][j] = Bitmap.createBitmap(mapImage[i].getLayoutParams().width, mapImage[i].getLayoutParams().height, Bitmap.Config.ARGB_8888);
                levelCanvas[i][j] = new Canvas(levelBitmap[i][j]);
            }
        }
        paint = new Paint();


        for (int i = 0; i <= 1; i++) {
            pauseButton[i] = new Button(this, null, android.R.attr.borderlessButtonStyle);
            pauseLayout.addView(pauseButton[i], zoneWidth / 3, zoneWidth / 8);
            pauseButton[i].setX(zoneX + ((float) zoneWidth / 2) - ((float) zoneWidth / 4) - ((float) pauseButton[i].getLayoutParams().width / 2) + (((float) zoneWidth / 2) * i));
            pauseButton[i].setY(zoneY + (float) zoneHeight / 2);
            pauseButton[i].setBackgroundColor(getResources().getColor(R.color.buttonBackgroundColor));
            pauseButton[i].setTextColor(Color.WHITE);
            pauseButton[i].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) pauseButton[i].getLayoutParams().height / 2);
        }

        pauseButton[0].setText(R.string.menu_button);
        pauseButton[0].setOnClickListener(v -> {
            upAction();
            portcullis.status = portStatus.LOWERING;
            pauseLayout.setVisibility(View.INVISIBLE);
        });

        pauseButton[1].setText(R.string.resume_button);
        pauseButton[1].setOnClickListener(v -> {
            upAction();
            status = Status.ONGOING;
            pauseLayout.setVisibility(View.INVISIBLE);
        });

        pauseText = new TextView(this);
        pauseLayout.addView(pauseText, widthPixels / 2, heightPixels / 16);
        pauseText.setX((float) widthPixels / 2 - (float) pauseText.getLayoutParams().width / 2);
        pauseText.setY((float) heightPixels / 2 - (float) heightPixels / 8);
        pauseText.setGravity(Gravity.CENTER);
        pauseText.setText(R.string.paused);
        pauseText.setTextColor(Color.WHITE);
        pauseText.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) pauseText.getLayoutParams().height / 2);
        pauseText.setAllCaps(true);


        ViewCompat.setElevation(mapImage[1], 9);
        ViewCompat.setElevation(deathLayer, 16);
        ViewCompat.setElevation(gameText[0], 15);
        ViewCompat.setElevation(gameText[1], 15);


        new Thread(new Task()).start();
    }

    class Star extends androidx.appcompat.widget.AppCompatImageView {

        Bitmap[] bitmap = new Bitmap[3];

        public Star(Context context, int n) {
            super(context);
            endLayout.addView(this, zoneHeight / 7, zoneHeight / 7);
            this.setX(((float) endLayout.getLayoutParams().width / 2) - ((float) this.getLayoutParams().width / 2) - ((float) endLayout.getLayoutParams().width / 3) + (((float) endLayout.getLayoutParams().width / 3) * n));
            this.setY(endText.getY() + endText.getLayoutParams().height + ((float) zoneHeight / 16));
            ViewCompat.setElevation(this, 2);


            Canvas[] canvas = new Canvas[3];
            Paint paint = new Paint();
            Path path = new Path();

            for (int i = 0; i < bitmap.length; i++) {
                bitmap[i] = Bitmap.createBitmap(this.getLayoutParams().width, this.getLayoutParams().height, Bitmap.Config.ARGB_8888);
                canvas[i] = new Canvas(bitmap[i]);
            }

            double fff = ((float) bitmap[0].getWidth() / 2) + (((float) bitmap[0].getWidth() / 2) * 0.328 * Math.sin(Math.toRadians(36)));
            path.moveTo((float) bitmap[0].getWidth() / 2, 0);
            path.lineTo((float) bitmap[0].getWidth() / 2, (float) bitmap[0].getHeight() / 2);
            path.lineTo(((float) fff), ((float) bitmap[0].getWidth() / 2) - (float) (((float) bitmap[0].getWidth() / 2) * 0.328 * Math.cos(Math.toRadians(36))));
            path.close();


            int[] color = new int[6];
            color[0] = Color.parseColor("#555555");
            color[1] = Color.parseColor("#444444");
            color[2] = Color.parseColor("#777700");
            color[3] = Color.parseColor("#666600");
            color[4] = Color.parseColor("#ffff00");
            color[5] = Color.parseColor("#eeee00");


            for (int i = 0; i < bitmap.length; i++) {

                paint.setColor(color[i * 2]);

                for (int j = 0; j < 5; j++) {
                    canvas[i].drawPath(path, paint);
                    canvas[i].rotate(72, (float) bitmap[i].getWidth() / 2, (float) bitmap[i].getHeight() / 2);
                }

                canvas[i].scale(-1, 1, (float) bitmap[i].getWidth() / 2, (float) bitmap[i].getHeight() / 2);
                paint.setColor(color[(i * 2) + 1]);

                for (int j = 0; j < 5; j++) {
                    canvas[i].drawPath(path, paint);
                    canvas[i].rotate(72, (float) bitmap[i].getWidth() / 2, (float) bitmap[i].getHeight() / 2);
                }
            }


            paint.setColor(Color.parseColor("#dddd00"));


            this.setImageBitmap(bitmap[0]);


        }

        void instruct(int polarity) {
            this.setImageBitmap(bitmap[2]);
            this.getLayoutParams().width = this.getLayoutParams().width + ((zoneWidth / 64) * polarity);
            this.getLayoutParams().height = this.getLayoutParams().height + ((zoneWidth / 64) * polarity);
            this.requestLayout();
            this.setX(this.getX() - (((float) zoneWidth / 128) * polarity));
            this.setY(this.getY() - (((float) zoneWidth / 128) * polarity));
        }
    }

    class Joystick extends androidx.appcompat.widget.AppCompatImageView {

        Base base;

        int x;
        int y;

        Bitmap bitmap;
        Canvas canvas;
        Paint paint;

        public Joystick(Context context) {
            super(context);
            base = new Base(context);
            gameLayout.addView(this, widthPixels / 6, widthPixels / 6);
            this.setVisibility(View.INVISIBLE);

            this.getLayoutParams().width = zoneWidth / 6;
            this.getLayoutParams().height = zoneWidth / 6;
            ViewCompat.setElevation(this, 14);

            bitmap = Bitmap.createBitmap(this.getLayoutParams().width, this.getLayoutParams().height, Bitmap.Config.ARGB_8888);
            canvas = new Canvas(bitmap);
            paint = new Paint();

            paint.setColor(Color.RED);
            canvas.drawCircle((float) this.getLayoutParams().width / 2, (float) this.getLayoutParams().height / 2, (float) this.getLayoutParams().width / 2, paint);
            this.setImageBitmap(bitmap);


        }

        void moveCursor() {
            if (Math.sqrt(Math.pow(x - base.getX() - ((float) base.getWidth() / 2), 2) + Math.pow(y - base.getY() - ((float) base.getHeight() / 2), 2)) < ((float) base.getWidth() / 2)) {
                this.setX(x - ((float) this.getLayoutParams().width / 2));
                this.setY(y - ((float) this.getLayoutParams().height / 2));
            } else {
                this.setX(base.getX() + ((float) base.getWidth() / 2));
                this.setY(base.getY() + ((float) base.getHeight() / 2));
                this.setX(this.getX() - ((float) this.getWidth() / 2) - (((float) this.getHeight() / 4) * 3) * ((float) (Math.cos(Math.toRadians(Math.toDegrees(Math.atan2(base.getX() + ((float) base.getWidth() / 2) - x, base.getY() + ((float) base.getHeight() / 2) - y)) - 90)))));
                this.setY(this.getY() - ((float) this.getWidth() / 2) - (((float) this.getHeight() / 4) * 3) * ((float) (Math.sin(Math.toRadians(Math.toDegrees(Math.atan2(base.getX() + ((float) base.getWidth() / 2) - x, base.getY() + ((float) base.getHeight() / 2) - y)) + 90)))));
            }
        }
    }

    class Base extends androidx.appcompat.widget.AppCompatImageView {

        Bitmap bitmap;
        Canvas canvas;
        Paint paint;
        Path path;

        public Base(Context context) {
            super(context);
            gameLayout.addView(this, zoneWidth / 4, zoneWidth / 4);
            this.setImageAlpha(191);
            this.setVisibility(View.INVISIBLE);
            ViewCompat.setElevation(this, 13);
            bitmap = Bitmap.createBitmap(this.getLayoutParams().width, this.getLayoutParams().height, Bitmap.Config.ARGB_8888);
            canvas = new Canvas(bitmap);
            paint = new Paint();
            path = new Path();
            paint.setColor(Color.DKGRAY);
            canvas.drawCircle((float) this.getLayoutParams().width / 2, (float) this.getLayoutParams().height / 2, (float) this.getLayoutParams().width / 2, paint);

            paint.setColor(Color.LTGRAY);
            for (int i = 0; i < 4; i++) {
                path.moveTo((float) this.getLayoutParams().width / 2, (float) this.getLayoutParams().height / 16);
                path.lineTo((float) this.getLayoutParams().width / 2 + (float) this.getLayoutParams().width / 32, (float) this.getLayoutParams().height / 8);
                path.lineTo((float) this.getLayoutParams().width / 2 - (float) this.getLayoutParams().width / 32, (float) this.getLayoutParams().height / 8);
                path.close();
                canvas.drawPath(path, paint);
                canvas.rotate(90, (float) this.getLayoutParams().width / 2, (float) this.getLayoutParams().height / 2);
            }

            this.setImageBitmap(bitmap);


        }
    }

    class MenuBackground {

        Bitmap bitmap;
        Canvas canvas;
        Paint paint;
        ImageView[] section;
        int timer = 100;
        int menuBackgroundAngle = 90;
        int menuBackgroundSpeed = 10;
        int direction;
        int count;


        public MenuBackground() {
            int wP = widthPixels;
            bitmap = Bitmap.createBitmap(widthPixels, wP, Bitmap.Config.ARGB_8888);
            canvas = new Canvas(bitmap);
            paint = new Paint(Color.MAGENTA);
            //canvas.drawRect(0, 0, widthPixels, heightPixels, paint);
            paint.setColor(Color.parseColor("#bf00bf"));

            for (int x = 0; x <= widthPixels; x = x + widthPixels / 8) {
                for (int y = 0; y <= widthPixels; y = y + widthPixels / 8) {
                    canvas.drawCircle(x + (float) widthPixels / 32, y + (float) widthPixels / 32, (float) widthPixels / 32, paint);
                }
            }

            count = (int) Math.ceil(((float) heightPixels + ((float) widthPixels / 4)) / (float) widthPixels) * 2;
            section = new ImageView[count];

            for (int n = 0; n <= count - 1; n++) {
                section[n] = new ImageView(getApplicationContext());
                menuBackgroundLayout.addView(section[n], widthPixels, wP);
                section[n].setImageBitmap(bitmap);
                ViewCompat.setElevation(section[n], -1);
            }

            section[0].setX((float) -widthPixels / 32);
        }

        public void instructMenuBackground() {
            if (timer >= 900 && timer < 1000) {
                menuBackgroundSpeed = (1000 - timer) / 10;
            }

            if (timer > 0 && timer <= 100) {
                menuBackgroundSpeed = timer / 10;
            }

            if (timer == 1000) {
                menuBackgroundAngle = random.nextInt(360);
                menuBackgroundSpeed = 0;
                timer = 0;
            }

            if (timer == 455) {
                direction = random.nextInt(2);
            }

            if (timer >= 455 && timer < 545) {
                if (direction == 1) {
                    menuBackgroundAngle++;
                } else {
                    menuBackgroundAngle--;
                }
            }

            section[0].setX((float) (section[0].getX() + menuBackgroundSpeed * (Math.cos(Math.toRadians(menuBackgroundAngle)))));
            section[0].setY((float) (section[0].getY() + menuBackgroundSpeed * (Math.sin(Math.toRadians(menuBackgroundAngle)))));

            if (section[0].getX() > 0) {
                section[0].setX(0 - (float) widthPixels / 4);
            }

            if (section[0].getY() > 0) {
                section[0].setY(0 - (float) widthPixels / 4);
            }

            if (section[0].getY() < 0 - (float) widthPixels / 4) {
                section[0].setY(0);
            }

            if (section[0].getX() < 0 - (float) widthPixels / 4) {
                section[0].setX(0);
            }

            for (int n = 2; n <= count - 1; n = n + 2) {
                section[n].setX(section[0].getX());
                section[n].setY(section[0].getY() + widthPixels * ((float) n / 2));
            }

            for (int n = 1; n <= count - 1; n = n + 2) {
                section[n].setX(section[0].getX() + widthPixels);
                section[n].setY(section[0].getY() + widthPixels * ((float) (n - 1) / 2));
            }

            timer++;
        }

    }

    /**
     * class sButton extends androidx.appcompat.widget.AppCompatButton{
     * <p>
     * public sButton(Context context) {
     * super(context);
     * this.setTextColor(Color.WHITE);
     * this.setBackgroundColor(Color.parseColor("#5f0000"));
     * }
     * }
     **/

    static class TitleLetter extends androidx.appcompat.widget.AppCompatTextView {

        public TitleLetter(Context context) {
            super(context);
        }
    }

    class Portcullis extends ConstraintLayout {

        portStatus status = portStatus.RAISED;
        TextView levelText;
        TextView nameText;
        int intersticeTimer;

        public Portcullis(Context context) {
            super(context);

            ViewCompat.setElevation(this, 100000);
            this.setY(-heightPixels - (float) widthPixels / 16);


            View body = new View(context);
            ImageView spikes = new ImageView(context);
            Bitmap spikeBitmap = Bitmap.createBitmap(widthPixels, widthPixels / 16, Bitmap.Config.ARGB_8888);
            Canvas spikeCanvas = new Canvas(spikeBitmap);
            Path path = new Path();

            this.addView(body, widthPixels, heightPixels);
            this.addView(spikes);
            body.setY(0);
            spikes.setY(heightPixels);

            body.setBackgroundColor(Color.WHITE);


            levelText = new TextView(context);
            nameText = new TextView(context);


            this.addView(levelText, (zoneWidth / 4) * 3, (zoneHeight / 12));
            levelText.setX(((float) widthPixels / 2) - ((float) levelText.getLayoutParams().width / 2));
            levelText.setY(((float) heightPixels / 2) - ((float) levelText.getLayoutParams().height / 2));
            levelText.setGravity(Gravity.CENTER);
            levelText.setTextColor(Color.BLACK);
            levelText.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) levelText.getLayoutParams().height / 2);
            levelText.setAllCaps(true);

            this.addView(nameText, zoneWidth, (zoneHeight / 16));

            nameText.setX(zoneX + ((float) zoneWidth / 2) - ((float) nameText.getLayoutParams().width / 2));
            nameText.setY(levelText.getY() + levelText.getLayoutParams().height);

            nameText.setGravity(Gravity.CENTER_HORIZONTAL);
            nameText.setTextColor(Color.BLACK);
            nameText.setTypeface(null, Typeface.ITALIC);
            nameText.setAllCaps(true);
            nameText.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) nameText.getLayoutParams().height / 2);

            spikes.setImageBitmap(spikeBitmap);

            Paint newPaint = new Paint();
            newPaint.setColor(Color.WHITE);


            int y = 0;
            for (int x = 0; x <= widthPixels; x = x + widthPixels / 16) {

                path.lineTo(x, y);

                if (y == 0) {
                    y = widthPixels / 16;
                } else {
                    y = 0;
                }
            }


            path.close();
            spikeCanvas.drawPath(path, newPaint);
            spikes.setImageBitmap(spikeBitmap);
        }

        void instructInterstice() {
            if (status == portStatus.LOWERING) {
                if (loadingLevel) {
                    levelText.setText(getString(R.string.intersticeText1, (currentLevel + 1)));
                    nameText.setText(level[currentLevel].name);
                } else {
                    levelText.setText(R.string.intersticeText0);
                    nameText.setText("");
                }
                this.setY(this.getY() + (float) heightPixels / 32);
                if (this.getY() > 0) {
                    status = portStatus.LOWERED;
                    this.setY(0);
                    intersticeTimer = 64;
                }
            } else if (status == portStatus.RAISING) {
                this.setY(this.getY() - (float) heightPixels / 32);
                if (this.getY() < -this.getHeight()) {
                    this.setY(-this.getHeight());
                    this.status = portStatus.RAISED;
                    loadingLevel = false;
                }
            }

            if (intersticeTimer > 0) {
                if (intersticeTimer == 1) {
                    status = portStatus.RAISING;
                }
                intersticeTimer--;
                if (intersticeTimer == 32) {
                    if (loadingLevel) {
                        createLevel();
                    } else {
                        endLayout.setVisibility(View.INVISIBLE);
                        pauseLayout.setVisibility(View.INVISIBLE);
                        gameLayout.setVisibility(View.INVISIBLE);
                        menuLayout.setVisibility(View.VISIBLE);
                    }

                    if(!adsRemoved) {
                        if (adCount >= 2) {
                            displayAd();
                        } else {
                            adCount++;
                        }
                    }

                }
            }
        }
    }

    class Avoider extends androidx.appcompat.widget.AppCompatImageView {

        int spawnX;
        int spawnY;
        final int multiplier = 8;
        float speedX;
        float speedY;
        Thrust thrust;
        Point[][] collisionPoint = new Point[12][2];
        Point midpoint = new Point();
        Particle[] particle = new Particle[16];
        Bitmap bitmap;
        Canvas canvas;
        Paint paint;
        Path path;

        Bitmap goldBitmap;
        Canvas goldCanvas;
        Path goldPath;

        public Avoider() {


            super(getApplicationContext());
            gameLayout.addView(this);
            this.getLayoutParams().width = square;
            this.getLayoutParams().height = square;
            ViewCompat.setElevation(this, 12);
            thrust = new Thrust();
            for (int i = 0; i < particle.length; i++) {
                particle[i] = new Particle(i);
            }

            bitmap = Bitmap.createBitmap(square, square, Bitmap.Config.ARGB_8888);
            canvas = new Canvas(bitmap);
            path = new Path();


            Paint paint = new Paint();
            paint.setColor(Color.WHITE);

            path.moveTo((float) this.getLayoutParams().width / 2, 0);
            path.lineTo(this.getLayoutParams().width, this.getLayoutParams().height);
            path.lineTo((float) this.getLayoutParams().width / 2, ((float) this.getLayoutParams().height / 4) * 3);
            path.lineTo(0, this.getLayoutParams().height);


            path.close();
            canvas.drawPath(path, paint);
            this.setImageBitmap(bitmap);

            goldBitmap = Bitmap.createBitmap(square, square, Bitmap.Config.ARGB_8888);
            goldCanvas = new Canvas(goldBitmap);
            goldPath = new Path();


            paint.setColor(Color.parseColor("#FFD700"));

            goldPath.moveTo((float) this.getLayoutParams().width / 2, 0);
            goldPath.lineTo(this.getLayoutParams().width, this.getLayoutParams().height);
            goldPath.lineTo((float) this.getLayoutParams().width / 2, ((float) this.getLayoutParams().height / 4) * 3);
            goldPath.lineTo(0, this.getLayoutParams().height);
            goldPath.close();
            goldCanvas.drawPath(goldPath, paint);

        }

        void setSpawn(int x, int y) {
            spawnX = Math.round(mapImage[0].getX() + (square * x));
            spawnY = Math.round(mapImage[0].getY() + (square * y));
        }

        void spawn() {
            int count = 0;
            for (int i = 0; i < level.length; i++) {
                if (levelStars[i] == 4) {
                    count++;
                }
            }
            if (count == 100) {
                avoider.setImageBitmap(goldBitmap);
            } else {
                avoider.setImageBitmap(bitmap);
            }
            this.setRotation(level[currentLevel].startRotation);
            this.setVisibility(View.VISIBLE);
            upAction();
            mouseDown = false;
            speedX = 0;
            speedY = 0;

            this.setX(spawnX);
            this.setY(spawnY);
        }

        void move() {
            this.setX(this.getX() + ((float) mapImage[0].getWidth() / 256) * speedX / 256);
            this.setY(this.getY() + ((float) mapImage[0].getWidth() / 256) * speedY / 256);
        }

        void update() {
            if (joystick.base.getX() != joystick.x - (float) joystick.base.getLayoutParams().width / 2 || joystick.base.getY() != joystick.y - (float) joystick.base.getLayoutParams().height / 2) {
                speedX += (float) (Math.cos(Math.toRadians(Math.toDegrees(Math.atan2(joystick.base.getX() + ((float) joystick.base.getWidth() / 2) - joystick.x, joystick.base.getY() + ((float) joystick.base.getHeight() / 2) - joystick.y)) + 90))) * multiplier;
                speedY += (float) (Math.sin(Math.toRadians(Math.toDegrees(Math.atan2(joystick.base.getX() + ((float) joystick.base.getWidth() / 2) - joystick.x, joystick.base.getY() + ((float) joystick.base.getHeight() / 2 - joystick.y))) - 90))) * multiplier;
            }
        }

        void updateCollisionPoints() {
            collisionPoint[0][0] = new Point((int) this.getX(), (int) (this.getY() + this.getHeight()));
            collisionPoint[1][0] = new Point((int) (this.getX() + this.getWidth() / 8), (int) (this.getY() + (this.getHeight() / 4) * 3));
            collisionPoint[2][0] = new Point((int) (this.getX() + this.getWidth() / 4), (int) (this.getY() + this.getHeight() / 2));
            collisionPoint[3][0] = new Point((int) (this.getX() + (this.getWidth() / 8) * 3), (int) (this.getY() + this.getHeight() / 4));
            collisionPoint[4][0] = new Point((int) (this.getX() + this.getWidth() / 2), (int) this.getY());
            collisionPoint[5][0] = new Point((int) (this.getX() + (this.getWidth() / 8) * 5), (int) (this.getY() + this.getHeight() / 4));
            collisionPoint[6][0] = new Point((int) (this.getX() + (this.getWidth() / 8) * 6), (int) (this.getY() + this.getHeight() / 2));
            collisionPoint[7][0] = new Point((int) (this.getX() + (this.getWidth() / 8) * 7), (int) (this.getY() + (this.getHeight() / 4) * 3));
            collisionPoint[8][0] = new Point((int) (this.getX() + this.getWidth()), (int) (this.getY() + this.getHeight()));
            collisionPoint[9][0] = new Point((int) (this.getX() + (this.getWidth() / 8) * 6), (int) (this.getY() + (this.getHeight() / 8) * 7));
            collisionPoint[10][0] = new Point((int) (this.getX() + this.getWidth() / 2), (int) (this.getY() + (this.getHeight() / 4) * 3));
            collisionPoint[11][0] = new Point((int) (this.getX() + this.getWidth() / 4), (int) (this.getY() + (this.getHeight() / 8) * 7));

            for (int i = 0; i < collisionPoint.length; i++) {
                collisionPoint[i][1] = new Point((int) (((this.getX() + this.getWidth() / 2) + (collisionPoint[i][0].x - (this.getX() + this.getWidth() / 2)) * Math.cos(Math.toRadians(this.getRotation()))) - (collisionPoint[i][0].y - (this.getY() + this.getHeight() / 2)) * Math.sin(Math.toRadians(this.getRotation()))), (int) ((this.getY() + this.getHeight() / 2) + (collisionPoint[i][0].x - (this.getX() + this.getWidth() / 2)) * Math.sin(Math.toRadians(this.getRotation())) + (collisionPoint[i][0].y - (this.getY() + this.getHeight() / 2)) * Math.cos(Math.toRadians(this.getRotation()))));
            }
        }

        void checkForCollisions() {

            midpoint.x = (int) (avoider.getX() + (float) avoider.getLayoutParams().width / 2);
            midpoint.y = (int) (avoider.getY() + (float) avoider.getLayoutParams().height / 2);

            for (int i = 0; i <= 11; i++) {
                if (pointWithinBounds(collisionPoint[i][1].x, collisionPoint[i][1].y, mapImage[0])) {
                    if (pointColliding(collisionPoint[i][1].x, collisionPoint[i][1].y, mapImage[1], levelBitmap[1][currentBitmap()], Color.GREEN) && deathTimer == 0) {
                        levelComplete();
                    } else if (pointColliding(collisionPoint[i][1].x, collisionPoint[i][1].y, mapImage[0], levelBitmap[0][currentBitmap()], Color.MAGENTA)) {
                        for (int j = 0; j < moverList.size(); j++) {
                            if (pointColliding(collisionPoint[i][1].x, collisionPoint[i][1].y, moverList.get(j), moverList.get(j).bitmap, Color.BLACK)) {
                                inFreespace = true;
                                break;
                            }
                        }
                        if (!inFreespace && deathTimer == 0) {
                            levelFailed();
                            //gameText[0].setText("CRASHED");
                        }
                        inFreespace = false;
                    } else if (pointColliding(collisionPoint[i][1].x, collisionPoint[i][1].y, mapImage[1], levelBitmap[1][currentBitmap()], Color.RED)) {
                        if (currentBitmap() == 0) {
                            mapImage[0].setImageBitmap(levelBitmap[0][1]);
                            mapImage[1].setImageBitmap(levelBitmap[1][1]);
                        } else {
                            mapImage[0].setImageBitmap(levelBitmap[0][0]);
                            mapImage[1].setImageBitmap(levelBitmap[1][0]);
                        }
                        for (int j = 0; j < moverList.size(); j++) {
                            if (moverList.get(j).switchable && moverList.get(j).switchable) {
                                moverList.get(j).flip();
                            }
                        }
                        buttonSound.playSound();
                    } else if (pointColliding(midpoint.x, midpoint.y, mapImage[1], levelBitmap[1][currentBitmap()], Color.CYAN)) {
                        if (Math.sqrt(Math.pow(this.getX() - teleportX[currentBitmap()][0], 2) + Math.pow(this.getY() - teleportY[currentBitmap()][0], 2)) >= Math.sqrt(Math.pow(this.getX() - teleportX[currentBitmap()][1], 2) + Math.pow(this.getY() - teleportY[currentBitmap()][1], 2))) {
                            teleport(teleportX[currentBitmap()][0], teleportY[currentBitmap()][0]);
                        } else {
                            teleport(teleportX[currentBitmap()][1], teleportY[currentBitmap()][1]);
                        }
                    } else if (pointColliding(midpoint.x, midpoint.y, mapImage[1], levelBitmap[1][currentBitmap()], Color.YELLOW)) {
                        if (Math.sqrt(Math.pow(this.getX() - teleportX[currentBitmap()][2], 2) + Math.pow(this.getY() - teleportY[currentBitmap()][2], 2)) >= Math.sqrt(Math.pow(this.getX() - teleportX[currentBitmap()][3], 2) + Math.pow(this.getY() - teleportY[currentBitmap()][3], 2))) {
                            teleport(teleportX[currentBitmap()][2], teleportY[currentBitmap()][2]);
                        } else {
                            teleport(teleportX[currentBitmap()][3], teleportY[currentBitmap()][3]);
                        }
                    }
                }
            }
        }

        void checkIfExitedTeleporter() {
            freePoints = 0;


            if (!pointColliding(midpoint.x, midpoint.y, mapImage[1], levelBitmap[1][currentBitmap()], Color.CYAN) && !pointColliding(midpoint.x, midpoint.y, mapImage[1], levelBitmap[1][currentBitmap()], Color.YELLOW)) {
                teleporting = false;
            }
        }

        void animateAvoider() {
            if (joystick.base.getX() != joystick.x - (float) joystick.base.getLayoutParams().width / 2 || joystick.base.getY() != joystick.y - (float) joystick.base.getLayoutParams().height / 2) {
                this.setRotation(180 - Math.round(Math.toDegrees(Math.atan2(joystick.base.getX() + ((float) joystick.base.getWidth() / 2) - joystick.x, joystick.base.getY() + ((float) joystick.base.getHeight() / 2) - joystick.y))) + 180);
            }
            thrust.update();
        }

        void explode() {
            this.setVisibility(View.INVISIBLE);
            for (Particle value : particle) {
                value.spawn();
            }
        }

        void implode() {
            this.setVisibility(View.INVISIBLE);
            for (Particle value : particle) {
                value.winSpawn();
            }
        }

        class Thrust extends androidx.appcompat.widget.AppCompatImageView {

            int timer;

            public Thrust() {
                super(getApplicationContext());
                gameLayout.addView(this);
                this.getLayoutParams().width = Avoider.this.getLayoutParams().width;
                this.getLayoutParams().height = (Avoider.this.getLayoutParams().height / 2) * 3;
                ViewCompat.setElevation(this, 11);

                this.setVisibility(INVISIBLE);

                Bitmap bitmap = Bitmap.createBitmap(this.getLayoutParams().width, this.getLayoutParams().height, Bitmap.Config.ARGB_8888);
                canvas = new Canvas(bitmap);
                paint = new Paint();
                paint.setColor(Color.RED);
                canvas.drawOval(new RectF((float) this.getLayoutParams().width / 4, (float) this.getLayoutParams().height / 2, ((float) this.getLayoutParams().width / 4) * 3, this.getLayoutParams().height), paint);
                this.setImageBitmap(bitmap);
            }

            void update() {

                this.setRotation(Avoider.this.getRotation());
                this.setX(avoider.getX() - (float) this.getWidth() / 2 + (float) Avoider.this.getWidth() / 2);
                this.setY(avoider.getY() - (float) this.getHeight() / 2 + (float) Avoider.this.getHeight() / 2);

                if (timer >= 2) {
                    this.setVisibility(View.INVISIBLE);
                } else {
                    this.setVisibility(View.VISIBLE);
                }

                timer++;

                if (timer == 4) {
                    timer = 0;
                }
            }

            void stop() {
                this.setVisibility(View.INVISIBLE);
                timer = 0;
            }

        }

        class Particle extends androidx.appcompat.widget.AppCompatImageView {

            int i;
            int alpha;
            float direction;
            int speed;
            int alphaSpeed;
            Bitmap white;
            Bitmap red;

            public Particle(int i) {
                super(getApplicationContext());
                this.i = i;
                gameLayout.addView(this, square / 2, square / 2);
                this.setVisibility(View.INVISIBLE);
                ViewCompat.setElevation(this, 1000000);

                red = Bitmap.createBitmap(this.getLayoutParams().width, this.getLayoutParams().height, Bitmap.Config.ARGB_8888);
                canvas = new Canvas(red);
                paint = new Paint();
                paint.setColor(Color.RED);
                canvas.drawCircle((float) this.getLayoutParams().width / 2, (float) this.getLayoutParams().height / 2, (float) this.getLayoutParams().width / 2, paint);

                white = Bitmap.createBitmap(this.getLayoutParams().width, this.getLayoutParams().height, Bitmap.Config.ARGB_8888);
                canvas = new Canvas(white);
                paint = new Paint();
                paint.setColor(Color.WHITE);
                canvas.drawCircle((float) this.getLayoutParams().width / 2, (float) this.getLayoutParams().height / 2, (float) this.getLayoutParams().width / 2, paint);
            }

            void spawn() {
                this.setX(avoider.getX());
                this.setY(avoider.getY());
                this.setVisibility(View.VISIBLE);
                alpha = 255 - random.nextInt(56);
                direction = random.nextInt(360);
                speed = random.nextInt(129);
                this.setImageBitmap(red);
                alphaSpeed = 8;
                //this.setBackgroundColor(Color.RED);
            }

            void winSpawn() {
                this.setX(avoider.getX());
                this.setY(avoider.getY());
                this.setVisibility(View.VISIBLE);
                alpha = 255;
                direction = i * (float) 22.5;
                speed = 128;
                alphaSpeed = 8;
                this.setImageBitmap(white);
                //this.setBackgroundColor(Color.WHITE);
            }

            void instruct() {
                this.setImageAlpha(alpha);
                this.setX(this.getX() + ((float) (zoneWidth / (128 + speed))) * ((float) (Math.cos(Math.toRadians(direction)))));
                this.setY(this.getY() + ((float) (zoneWidth / (128 + speed))) * ((float) (Math.sin(Math.toRadians(direction)))));
                alpha = alpha - alphaSpeed;
                if (alpha <= 0) {
                    alpha = 0;
                    this.setVisibility(View.INVISIBLE);
                }
            }
        }

    }

    class Mover extends androidx.appcompat.widget.AppCompatImageView {

        boolean respawn;
        boolean waitForStart;
        boolean switchable;
        boolean flicker;

        int hyp;
        int color;
        int targetPoint;
        float distanceTravelled;
        int height;
        int pointCount;
        int speed;
        int width;
        int flipCount;

        float rotation;
        float rotationSpeed;

        double direction;
        double distanceBetween;

        Point[] point = new Point[25];

        Bitmap bitmap;
        Canvas canvas;

        public Mover(double[][] centerPoints, int width, int height, float rotation, int speed, float rotationSpeed, boolean waitForStart, boolean freeSpace, boolean flicker, boolean switchable, boolean respawn) {
            super(getApplicationContext());
            if (rotation == 0 && rotationSpeed == 0) {
                for (int i = 0; i < centerPoints.length; i++) {
                    point[i] = new Point((int) Math.floor(mapImage[0].getX() + (square * centerPoints[i][0]) - ((float) (square * width) / 2.0) + (float) square / 2), (int) Math.floor(mapImage[0].getY() + (square * centerPoints[i][1]) - ((float) (square * height) / 2.0) + (float) square / 2));
                }
            } else {
                float hyp = (float) Math.ceil(Math.sqrt(Math.pow(width * square, 2) + Math.pow(height * square, 2)));
                for (int i = 0; i < centerPoints.length; i++) {
                    point[i] = new Point((int) Math.floor(mapImage[0].getX() + (square * centerPoints[i][0]) - (hyp / 2) + (float) square / 2), (int) Math.floor(mapImage[0].getY() + (square * centerPoints[i][1]) - (hyp / 2) + (float) square / 2));
                }
            }
            this.width = (square * width) + 1;
            this.height = (square * height) + 1;
            if (freeSpace) {
                color = Color.BLACK;
            } else {
                color = Color.MAGENTA;
            }
            this.speed = speed;
            this.rotationSpeed = rotationSpeed;
            this.rotation = rotation;
            pointCount = centerPoints.length;
            this.waitForStart = waitForStart;
            this.respawn = respawn;
            this.switchable = switchable;
            this.flicker = flicker;
            gameLayout.addView(this);
            createImage();
        }


        void createImage() {
            flipCount = pointCount;

            if (rotationSpeed == 0 && rotation == 0) {
                bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
            } else {
                hyp = (int) Math.ceil(Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2)));
                bitmap = Bitmap.createBitmap(hyp, hyp, Bitmap.Config.ARGB_8888);

            }

            canvas = new Canvas(bitmap);

            if (color == Color.BLACK) {
                ViewCompat.setElevation(this, 8);
            } else {
                ViewCompat.setElevation(this, 10);
            }

            this.setImageBitmap(bitmap);
            this.setVisibility(View.VISIBLE);
            this.setX(point[0].x);
            this.setY(point[0].y);
            canvas.rotate(-rotation, (float) hyp / 2, (float) hyp / 2);

            if (pointCount > 1) {
                distanceTravelled = 0;
                distanceBetween = Math.sqrt(Math.pow(point[1].x - point[0].x, 2) + Math.pow(point[1].y - point[0].y, 2));
                targetPoint = 1;
                direction = Math.atan2(point[targetPoint].y - this.getY(), point[targetPoint].x - this.getX());
            }

        }

        void instruct() {
            canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);
            if (switchable && currentBitmap() == 1) {
                flipCount = 0;
                canvas.rotate(-rotationSpeed, (float) hyp / 2, (float) hyp / 2);
            } else {
                flipCount = pointCount;
                canvas.rotate(rotationSpeed, (float) hyp / 2, (float) hyp / 2);
            }

            paint.setColor(color);

            if (rotationSpeed == 0 && rotation == 0) {
                canvas.drawRect(0, 0, width, height, paint);
            } else {
                canvas.drawRect(((float) hyp / 2) - ((float) width / 2) - 1, ((float) hyp / 2) - ((float) height / 2) - 1, ((float) hyp / 2) + ((float) width / 2) + 1, (float) (Math.ceil((float) hyp / 2) + ((float) height / 2)) + 1, paint);
            }

            if (pointCount > 1 && (!waitForStart || status == Status.ONGOING || status == Status.WON || status == Status.LOST)) {
                if (Math.abs(distanceTravelled) < Math.abs(distanceBetween)) {
                    if (!flicker) {
                        this.setX((float) (this.getX() + (speed * Math.cos(direction) * ((float) zoneWidth / 1000))));
                        this.setY((float) (this.getY() + (speed * Math.sin(direction) * ((float) zoneWidth / 1000))));
                    }
                    distanceTravelled += speed * ((float) zoneWidth / 1000);
                }

                if ((Math.abs(distanceTravelled) >= Math.abs(distanceBetween))) {
                    this.setX(point[targetPoint].x);
                    this.setY(point[targetPoint].y);
                    if (switchable && currentBitmap() == 1) {
                        targetPoint--;
                    } else {
                        targetPoint++;
                    }
                    if ((targetPoint == pointCount && !switchable) || (targetPoint == pointCount && currentBitmap() == 0 && switchable) || (targetPoint == -1 && currentBitmap() == 1 && switchable)) {
                        if (respawn) {
                            if (switchable && currentBitmap() == 1) {
                                this.setX(point[pointCount - 1].x);
                                this.setY(point[pointCount - 1].y);
                                targetPoint = pointCount - 2;
                            } else {
                                this.setX(point[0].x);
                                this.setY(point[0].y);
                                targetPoint = 1;
                            }
                        } else {
                            if (switchable && currentBitmap() == 1) {
                                targetPoint = pointCount - 1;
                            } else {
                                targetPoint = 0;
                            }
                        }
                    }
                    direction = Math.atan2(point[targetPoint].y - this.getY(), point[targetPoint].x - this.getX());
                    distanceBetween = Math.sqrt(Math.pow(point[targetPoint].x - this.getX(), 2) + Math.pow(point[targetPoint].y - this.getY(), 2));
                    distanceTravelled = 0;
                }
            }

            if (
                    (status == Status.ONGOING && avoider.getX() > this.getX() - avoider.getLayoutParams().width) &&
                            (avoider.getY() > this.getY() - avoider.getLayoutParams().width) &&
                            (avoider.getX() < this.getX() + bitmap.getWidth()) &&
                            (avoider.getY() < this.getY() + bitmap.getHeight())) {
                for (int i = 0; i <= 11; i++) {
                    if (pointColliding(avoider.collisionPoint[i][1].x, avoider.collisionPoint[i][1].y, this, bitmap, Color.MAGENTA) && deathTimer == 0) {
                        levelFailed();
                        //gameText[0].setText("CRASHED");
                    }
                }
            }

            if (status == Status.LOST && avoider.getVisibility() == View.VISIBLE) {
                avoider.setVisibility(View.INVISIBLE);
                avoider.setX(spawn.x);
                avoider.setY(spawn.y);
                avoider.speedX = 0;
                avoider.speedY = 0;
            }

        }

        void flip() {
            if (currentBitmap() == 0) {
                if (targetPoint == pointCount - 1) {
                    targetPoint = 0;
                } else {
                    targetPoint += 1;
                }
            } else {
                if (targetPoint == 0) {
                    targetPoint = pointCount - 1;
                } else {
                    targetPoint -= 1;
                }
            }

            distanceTravelled = 0;
            distanceBetween = Math.sqrt(Math.pow(point[targetPoint].x - this.getX(), 2) + Math.pow(point[targetPoint].y - this.getY(), 2));
            direction = Math.atan2(point[targetPoint].y - this.getY(), point[targetPoint].x - this.getX());
        }
    }

    static class Level {

        String name;
        int starTime;
        int startRotation;
        String baseMap;
        String altMap;

        public Level(String name, int starTime, Direction startDirection, String baseMap, String altMap) {
            this.name = name;
            this.starTime = starTime * 50;
            this.baseMap = baseMap;
            if (altMap == null) {
                this.altMap = baseMap;
            } else {
                this.altMap = altMap;
            }
            startRotation = directionToRotation(startDirection);

        }

        int directionToRotation(Direction direction) {
            switch (direction) {
                case NORTH:
                    return 0;
                case NORTHEAST:
                    return 45;
                case EAST:
                    return 90;
                case SOUTHEAST:
                    return 135;
                case SOUTH:
                    return 180;
                case SOUTHWEST:
                    return 225;
                case WEST:
                    return 270;
                case NORTHWEST:
                    return 315;
                default:
                    return 360;
            }
        }
    }


    @Override
    public void onBackPressed() {
        if (inMenu()) {
            if (deleteLayout.getVisibility() == View.VISIBLE) {
                deleteLayout.setVisibility(View.INVISIBLE);
                menuInterfaceLayout.setVisibility(View.VISIBLE);
            } else if (creditsLayout.getVisibility() == View.VISIBLE) {
                creditsLayout.setVisibility(View.INVISIBLE);
                menuInterfaceLayout.setVisibility(View.VISIBLE);
            } else if (menuInterfaceLayout.getX() == -widthPixels) {
                android.os.Process.killProcess(android.os.Process.myPid());
                active = false;
                System.exit(0);
            } else if (menuInterfaceLayout.getX() == -widthPixels * 2) {
                slideDirection = 1;
                slide = true;
            } else if (menuInterfaceLayout.getX() == 0) {
                slideDirection = -1;
                slide = true;
            }
        } else {
            if (inGame() && portcullis.status == portStatus.RAISED) {
                if (creditsLayout.getVisibility() == View.VISIBLE) {
                    creditsLayout.setVisibility(View.INVISIBLE);
                    endLayout.setVisibility(View.VISIBLE);
                } else {
                    if (status == Status.PAUSED) {
                        pauseLayout.setVisibility(View.INVISIBLE);
                        status = pauseStatus;
                        upAction();
                    } else {
                        if(deathTimer == 0) {
                            pauseGame();
                        }
                    }
                }
            }
        }
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        joystick.x = (int) event.getX();
        joystick.y = (int) event.getY();
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                mouseDown = true;
                if (!inMenu() && inGame()) {
                    if (status == Status.ONGOING || status == Status.WAITING) {
                        joystick.base.setX(joystick.x - (float) joystick.base.getLayoutParams().width / 2);
                        joystick.base.setY(joystick.y - (float) joystick.base.getLayoutParams().height / 2);
                        joystick.setX(joystick.x - (float) joystick.getLayoutParams().width / 2);
                        joystick.setY(joystick.y - (float) joystick.getLayoutParams().height / 2);
                        if (data.getBoolean("joystick", true)) {
                            joystick.base.setVisibility(View.VISIBLE);
                            joystick.setVisibility(View.VISIBLE);
                        }

                    }
                }

                return true;
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_CANCEL:
                upAction();
        }
        return false;
    }

    @Override
    protected void onStop() {
        super.onStop();
        if (status == Status.ONGOING) {
            pauseGame();
        }
        visible = false;
    }

    @Override
    public void onRestart() {
        super.onRestart();
        visible = true;
    }


    class Task implements Runnable {

        @Override
        public void run() {

            while (active) {

                if (visible) {
                    try {
                        Thread.sleep(20);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    handler.post(() -> {

                        if (inMenu()) {
                            menuBackground.instructMenuBackground();
                            if (start = true) {
                                instructMenuFeatures();
                            }
                            if (slide) {
                                slideMenu();
                            }
                            if (levelButtonDisplacement != 0) {
                                instructLevelButton();
                            }
                        } else {
                            if (status == Status.PAUSED) {
                                instructPauseText();
                            } else {
                                slapSpinners();
                                avoider.updateCollisionPoints();
                                updateEndOpacity();
                                instructMovers();

                                if (nextButtonDisplacement != 0) {
                                    instructNextButton();
                                }

                                if (status == Status.ONGOING || status == Status.WAITING) {
                                    joystick.moveCursor();
                                    if (mouseDown) {
                                        if (joystick.base.getX() != joystick.x - (float) joystick.base.getLayoutParams().width / 2 || joystick.base.getY() != joystick.y - (float) joystick.base.getLayoutParams().height / 2) {
                                            status = Status.ONGOING;
                                            if (!(rocketSound.audioTrack.getPlayState() == PLAYSTATE_PLAYING)) {
                                                //playSound(rocketSound);
                                                rocketSound.playSound();
                                            }
                                        }
                                    }
                                    if(stopTimer > 0){
                                        stopTimer--;
                                        if(stopTimer == 1){
                                            rocketSound.audioTrack.stop();
                                            rocketSound.audioTrack.release();
                                        }
                                    }
                                }
                                if (status == Status.ONGOING) {
                                    updateTime();
                                    avoider.move();
                                    avoider.checkForCollisions();
                                    avoider.checkIfExitedTeleporter();
                                    if (mouseDown) {
                                        avoider.update();
                                        if (joystick.base.getX() != joystick.x - (float) joystick.base.getLayoutParams().width / 2 || joystick.base.getY() != joystick.y - (float) joystick.base.getLayoutParams().height / 2) {
                                            avoider.animateAvoider();
                                        }
                                    }

                                } else if (status == Status.WON || status == Status.LOST) {
                                    if (endStarTimer < 60) {
                                        endStarInstruct();
                                    }
                                    instructParticles();
                                }
                            }
                        }

                        if (portcullis.status != portStatus.RAISED) {
                            portcullis.instructInterstice();
                        }

                        if (creditsLayout.getVisibility() == View.VISIBLE) {
                            creditsTimer++;
                            instructCredits();
                        }
                    });
                }
            }
        }
    }


    public void createLevelButtons() {


        Bitmap bitmap;
        Canvas canvas1;
        Paint paint1;
        Path path;

        bitmap = Bitmap.createBitmap(200, 200, Bitmap.Config.ARGB_8888);
        canvas1 = new Canvas(bitmap);
        paint1 = new Paint();
        path = new Path();

        paint1.setColor(Color.GRAY);

        path.moveTo((float) bitmap.getWidth() / 2, 0);
        path.lineTo((float) (bitmap.getWidth() / 5) * 4, (float) bitmap.getHeight());
        path.lineTo(0, ((float) bitmap.getHeight() / 5) * 2);
        path.lineTo((float) bitmap.getWidth(), ((float) bitmap.getHeight() / 5) * 2);
        path.lineTo((float) (bitmap.getWidth() / 5), (float) bitmap.getHeight());
        path.close();

        canvas1.drawPath(path, paint1);


        Canvas[] canvas = new Canvas[5];

        Paint paint2;

        paint2 = new Paint();

        paint2.setColor(getResources().getColor(R.color.buttonBackgroundColor));


        for (int i = 0; i < 5; i++) {
            levelButtonBitmap[i] = Bitmap.createBitmap(800, 800, Bitmap.Config.ARGB_8888);
            canvas[i] = new Canvas(levelButtonBitmap[i]);
            canvas[i].drawRect(0, 0, levelButtonBitmap[i].getWidth(), levelButtonBitmap[i].getHeight(), paint2);

        }

        paint2.setColor(Color.LTGRAY);
        canvas[0].drawRect(0, ((float) levelButtonBitmap[0].getWidth() / 32) * 23, ((float) levelButtonBitmap[0].getWidth() / 32) * 14, ((float) levelButtonBitmap[0].getWidth() / 16) * 12, paint2);
        canvas[0].drawRect(((float) levelButtonBitmap[0].getWidth() / 32) * 18, ((float) levelButtonBitmap[0].getWidth() / 32) * 23, levelButtonBitmap[0].getWidth(), ((float) levelButtonBitmap[0].getWidth() / 16) * 12, paint2);

        paint2.setColor(Color.GRAY);

        canvas[0].drawOval(new RectF(((float) levelButtonBitmap[0].getWidth() / 32) * 13, ((float) levelButtonBitmap[0].getHeight() / 16) * 10, ((float) levelButtonBitmap[0].getWidth() / 32) * 19, ((float) levelButtonBitmap[0].getHeight() / 16) * 14), paint2);

        paint2.setColor(getResources().getColor(R.color.buttonBackgroundColor));
        canvas[0].drawOval(new RectF(((float) levelButtonBitmap[0].getWidth() / 32) * 14, ((float) levelButtonBitmap[0].getHeight() / 32) * 21, ((float) levelButtonBitmap[0].getWidth() / 32) * 18, ((float) levelButtonBitmap[0].getHeight() / 32) * 27), paint2);

        paint2.setColor(Color.GRAY);

        canvas[0].drawRect(((float) levelButtonBitmap[0].getWidth() / 8) * 3, ((float) levelButtonBitmap[0].getWidth() / 16) * 12, ((float) levelButtonBitmap[0].getWidth() / 8) * 5, ((float) levelButtonBitmap[0].getWidth() / 16) * 15, paint2);


        paint2.setColor(getResources().getColor(R.color.buttonBackgroundColor));


        for (int i = 1; i < 5; i++) {
            for (int j = 0; j < 3; j++) {
                canvas[i].drawBitmap(bitmap, (float) levelButtonBitmap[1].getWidth() / 16 + ((float) levelButtonBitmap[1].getWidth() / 16) * 5 * j, (float) (levelButtonBitmap[1].getHeight() / 16) * 11, paint2);
            }
        }
        paint1.setColor(Color.YELLOW);
        canvas1.drawPath(path, paint1);


        for (int i = 2; i < 5; i++) {
            for (int j = 0; j < i - 1; j++) {
                canvas[i].drawBitmap(bitmap, (float) levelButtonBitmap[1].getWidth() / 16 + ((float) levelButtonBitmap[1].getWidth() / 16) * 5 * j, (float) (levelButtonBitmap[1].getHeight() / 16) * 11, paint2);
            }
        }


        levelButtonCount = ((heightPixels / (widthPixels / 4)) + 1) * 3;
        levelButton = new Button[100];

        int p = 0;
        int q = 0;

        for (int i = 0; i < levelButton.length; i++) {
            levelButton[i] = new Button(this, null, android.R.attr.borderlessButtonStyle);
            scrollLayout.addView(levelButton[i], menuSector[2].getLayoutParams().width / 5, menuSector[2].getLayoutParams().width / 5);
            levelButton[i].setText(String.valueOf(i + 1));
            ViewCompat.setElevation(levelButton[i], 2);
            levelButton[i].setTextColor(Color.WHITE);
            levelButton[i].setX(zoneX + ((float) zoneWidth / 25) + ((((float) zoneWidth / 5) + ((float) zoneWidth / 25)) * q));
            levelButton[i].setY(zoneY + ((((float) zoneWidth / 5 + ((float) zoneWidth / 25)))) + ((((float) zoneWidth / 5 + ((float) zoneWidth / 25)) * p)));
            levelButton[i].setId(i);
            levelButton[i].setTypeface(Typeface.MONOSPACE);
            levelButton[i].setPadding(0, 0, 0, zoneWidth / 16);
            levelButton[i].setTextColor(Color.WHITE);
            levelButton[i].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) levelButton[i].getLayoutParams().height / 2);

            updateLevelButton(i);


            levelButton[i].setOnClickListener(v -> {
                if (!loadingLevel && levelButtonDisplacement == 0) {
                    if (levelStars[v.getId()] >= 1) {
                        loadingLevel = true;
                        currentLevel = v.getId();
                        portcullis.status = portStatus.LOWERING;
                    } else {
                        levelButtonInQuestion = v.getId();
                        levelButtonDisplacement = (int) (16 * Math.ceil((float) zoneWidth / 1028));
                        levelButtonBaseX = Math.round(levelButton[levelButtonInQuestion].getX());
                    }
                }
            });

            q++;
            if (q == 4) {
                q = 0;
                p++;
            }
        }
    }

    public void createTitleLetters() {
        for (int i = 0; i <= 10; i++) {
            titleLetters[i] = new TextView(this);
        }


        for (int i = 0; i <= 3; i++) {
            menuInterfaceLayout.addView(titleLetters[i], (zoneWidth - (zoneWidth / 16)) / 4, (zoneWidth - (zoneWidth / 16)) / 2);
            titleLetters[i].setY(-titleLetters[i].getLayoutParams().height);
            titleLetters[i].setGravity(Gravity.CENTER);
            titleLetters[i].setX(widthPixels + zoneX + (float) zoneWidth / 32 + titleLetters[i].getLayoutParams().width * i);
        }

        for (int i = 4; i <= 10; i++) {
            menuInterfaceLayout.addView(titleLetters[i], (zoneWidth - (zoneWidth / 16)) / 7, (int) Math.round((zoneWidth - ((float) zoneWidth / 16)) / 3.5));
            titleLetters[i].setY(-titleLetters[i].getLayoutParams().height);
            titleLetters[i].setGravity(Gravity.CENTER);
            titleLetters[i].setX(widthPixels + zoneX + (float) zoneWidth / 32 + titleLetters[i].getLayoutParams().width * (i - 4));
        }

        titleLetters[0].setText("P");
        titleLetters[1].setText("I");
        titleLetters[2].setText("N");
        titleLetters[3].setText("K");
        titleLetters[4].setText("A");
        titleLetters[5].setText("V");
        titleLetters[6].setText("O");
        titleLetters[7].setText("I");
        titleLetters[8].setText("D");
        titleLetters[9].setText("E");
        titleLetters[10].setText("R");

        for (TextView titleLetter : titleLetters) {
            titleLetter.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) titleLetter.getLayoutParams().height / 2);
            titleLetter.setGravity(Gravity.CENTER);
            titleLetter.setTypeface(Typeface.MONOSPACE, Typeface.BOLD);
            titleLetter.setTextColor(Color.parseColor("#000000"));

        }

        for (int i = 4; i < 11; i++) {
            titleLetters[i].setTextColor(Color.parseColor("#000000"));
            //titleLetters[i].setBackgroundColor(Color.RED);
        }


    }

    public void createEndButton() {
        for (int i = 0; i < endButton.length; i++) {
            endButton[i] = new Button(this, null, android.R.attr.borderlessButtonStyle);
            endLayout.addView(endButton[i], (zoneWidth / 2) - (zoneWidth / 16), zoneHeight / 12);
            endButton[i].setBackgroundColor(getResources().getColor(R.color.buttonBackgroundColor));
            endButton[i].setTextColor(Color.WHITE);
            endButton[i].setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) endButton[i].getLayoutParams().height / 2);
        }

        endButton[0].setX(((float) zoneWidth / 4) - ((float) endButton[0].getLayoutParams().width / 2));
        endButton[0].setY(bestText.getY() + bestText.getLayoutParams().height + ((float) zoneHeight / 32));
        endButton[0].setText(R.string.end_button_1);
        endButton[0].setOnClickListener(v -> {

            upAction();

            for (int i = 0; i < avoider.particle.length; i++) {
                avoider.particle[i].setVisibility(View.INVISIBLE);
            }

            endLayout.setVisibility(View.INVISIBLE);

            for (int i = 0; i < star.length; i++) {
                star[i].setX(((float) endLayout.getLayoutParams().width / 2) - ((float) star[i].getLayoutParams().width / 2) - ((float) endLayout.getLayoutParams().width / 3) + (((float) endLayout.getLayoutParams().width / 3) * i));
                star[i].setY(endText.getY() + endText.getLayoutParams().height + ((float) zoneHeight / 16));
                star[i].getLayoutParams().width = zoneHeight / 7;
                star[i].getLayoutParams().height = zoneHeight / 7;
            }
            endStarTimer = 60;

            avoider.spawn();
            respawnTimer = 32;


            time = 0;
            gameText[1].setText(getString(R.string.time_text, (float) time / 50));
            status = Status.WAITING;
            for (int i = 0; i < moverList.size(); i++) {
                if (moverList.get(i).switchable && currentBitmap() == 1) {
                    mapImage[0].setImageBitmap(levelBitmap[0][0]);
                    mapImage[1].setImageBitmap(levelBitmap[1][0]);
                    moverList.get(i).flip();
                    mapImage[0].setImageBitmap(levelBitmap[0][1]);
                    mapImage[1].setImageBitmap(levelBitmap[1][1]);
                }
                if (moverList.get(i).waitForStart) {
                    moverList.get(i).createImage();
                    //moverList.get(i).reposition();
                }
            }
            mapImage[0].setImageBitmap(levelBitmap[0][0]);
            mapImage[1].setImageBitmap(levelBitmap[1][0]);
        });

        endButton[1].setX(endButton[0].getX() + ((float) zoneWidth / 2));
        endButton[1].setY(endButton[0].getY());
        endButton[1].setText(R.string.end_button_2);
        endButton[1].setOnClickListener(v -> {
            upAction();
            if (currentLevel < level.length - 1) {
                if (levelStars[currentLevel + 1] > 0) {
                    loadingLevel = true;
                    currentLevel++;
                    portcullis.status = portStatus.LOWERING;
                } else {
                    nextButtonDisplacement = 16;
                    nextButtonBaseX = (int) endButton[1].getX();
                }
            } else {
                endLayout.setVisibility(View.INVISIBLE);
                credits[12].setText(R.string.credits13);
                creditsLayout.setVisibility(View.VISIBLE);
                for (TextView credit : credits) {
                    credit.setTextColor(Color.WHITE);
                }
                creditsTimer = 0;
                moveCreditsToStart();
            }
        });

        endButton[2].setX(endButton[0].getX() + ((float) zoneWidth / 4));
        endButton[2].setY(endButton[0].getY() + endButton[0].getLayoutParams().height + ((float) zoneHeight / 32));
        endButton[2].setText(R.string.end_button_0);
        endButton[2].setOnClickListener(v -> {
            portcullis.status = portStatus.LOWERING;
            upAction();
        });
    }


    public void instructMenuFeatures() {
        for (int i = 0; i <= 3; i++) {
            if (titleLetters[i].getY() < zoneY || titleLettersBounce[i] != 5) {
                if (i <= 1 && (2 - i) * 10 < introduction) {
                    titleLetters[i].setY(titleLetters[i].getY() + titleLettersSpeed[i]);
                    titleLettersSpeed[i] += (float) zoneHeight / 1028;
                }
                if (i > 1 && (i - 1) * 10 < introduction) {
                    titleLetters[i].setY(titleLetters[i].getY() + titleLettersSpeed[i]);
                    titleLettersSpeed[i] += (float) zoneHeight / 1028;
                }
                if (titleLetters[i].getY() >= zoneY) {
                    titleLetters[i].setY(zoneY);
                    titleLettersBounce[i]++;
                    titleLettersSpeed[i] = -titleLettersSpeed[i] / 2;
                }
            }
        }

        float xy = zoneY + ((float) titleLetters[0].getLayoutParams().height / 16) * 13;

        for (int i = 4; i <= 10; i++) {
            if (titleLetters[i].getY() < xy || titleLettersBounce[i] != 5) {
                if (i < 7 && (7 - i) * 10 < introduction) {
                    titleLetters[i].setY(titleLetters[i].getY() + titleLettersSpeed[i]);
                    titleLettersSpeed[i] += (float) zoneHeight / 1028;
                }
                if (i == 7 && 0 < introduction) {
                    titleLetters[i].setY(titleLetters[i].getY() + titleLettersSpeed[i]);
                    titleLettersSpeed[i] += (float) zoneHeight / 1028;
                }
                if (i > 7 && (i - 7) * 10 < introduction) {
                    titleLetters[i].setY(titleLetters[i].getY() + titleLettersSpeed[i]);
                    titleLettersSpeed[i] += (float) zoneHeight / 1028;
                }
                if (titleLetters[i].getY() >= xy) {
                    titleLetters[i].setY(xy);
                    titleLettersBounce[i]++;
                    titleLettersSpeed[i] = -titleLettersSpeed[i] / 2;
                }
            }

        }

        if (introduction > 50) {
            copyright.setVisibility(View.VISIBLE);
            start = false;
        }

        introduction++;
    }

    void createLevel() {
        deathLayerOpacity = 0;
        deathLayer.getBackground().setAlpha(deathLayerOpacity);


        avoider.speedX = 0;
        avoider.speedY = 0;

        status = Status.WAITING;

        gameText[0].setText(getString(R.string.game_level_text, currentLevel + 1));
        gameText[1].setText(getString(R.string.time_text, (float) time / 50));


        endLayout.setVisibility(View.INVISIBLE);
        menuLayout.setVisibility(View.INVISIBLE);
        gameLayout.setVisibility(View.VISIBLE);

        levelCanvas[0][0].drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);
        levelCanvas[0][1].drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);
        levelCanvas[1][0].drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);
        levelCanvas[1][1].drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);


        for (int i = 0; i <= 3; i++) {
            setTeleport(i, 0, -2, -2);
            setTeleport(i, 1, -2, -2);
        }

        for (int i = 0; i < levelBitmap.length; i++) {
            for (int y = 0; y < verticalTiles; y++) {
                for (int x = 0; x < horizontalTiles; x++) {

                    if (level[currentLevel].altMap == null && i == 1) {
                        tile = '?';
                    } else {
                        if (i == 0) {
                            tile = level[currentLevel].baseMap.charAt(x + (y * horizontalTiles));
                        } else {
                            tile = level[currentLevel].altMap.charAt(x + (y * horizontalTiles));
                        }
                    }

                    drawSquare(i, x, y, Color.BLACK, false);

                    switch (tile) {
                        case '0':
                            drawSquare(i, x, y, Color.BLACK, false);
                            break;
                        case '1':
                            drawSquare(i, x, y, Color.MAGENTA, false);
                            break;
                        case 'A':
                            drawTriangle(i, x, y, Color.MAGENTA, 0);
                            break;
                        case 'B':
                            drawTriangle(i, x, y, Color.MAGENTA, 90);
                            break;
                        case 'C':
                            drawTriangle(i, x, y, Color.MAGENTA, 180);
                            break;
                        case 'D':
                            drawTriangle(i, x, y, Color.MAGENTA, 270);
                            break;
                        case 'E':
                            drawQuadrant(i, x, y, 0, false);
                            break;
                        case 'F':
                            drawQuadrant(i, x, y, 90, false);
                            break;
                        case 'G':
                            drawQuadrant(i, x, y, 180, false);
                            break;
                        case 'H':
                            drawQuadrant(i, x, y, 270, false);
                            break;
                        case 'I':
                            drawQuadrant(i, x, y, 180, true);
                            break;
                        case 'J':
                            drawQuadrant(i, x, y, 270, true);
                            break;
                        case 'K':
                            drawQuadrant(i, x, y, 0, true);
                            break;
                        case 'L':
                            drawQuadrant(i, x, y, 90, true);
                            break;
                        case 'M':
                            drawSquare(i, x, y, Color.DKGRAY, false);
                            break;
                        case 'N':
                            drawTriangle(i, x, y, Color.DKGRAY, 0);
                            break;
                        case 'O':
                            drawTriangle(i, x, y, Color.DKGRAY, 90);
                            break;
                        case 'P':
                            drawTriangle(i, x, y, Color.DKGRAY, 180);
                            break;
                        case 'Q':
                            drawTriangle(i, x, y, Color.DKGRAY, 270);
                            break;
                        case 'a':
                            drawSquare(i, x, y, Color.BLACK, false);
                            avoider.setSpawn(x, y);
                            break;
                        case 'b':
                            drawCircle(i, x, y, Color.GREEN);
                            break;
                        case 'c':
                            if (i == 0) {
                                drawSquare(i, x, y, Color.RED, true);
                            } else {
                                drawSquare(i, x, y, Color.DKGRAY, true);
                            }
                            break;
                        case 'd':
                            if (i == 0) {
                                drawSquare(i, x, y, Color.DKGRAY, true);
                            } else {
                                drawSquare(i, x, y, Color.RED, true);
                            }
                            break;
                        case 'e':
                            drawCircle(i, x, y, Color.CYAN);
                            drawSquare(i, x, y, Color.CYAN, true);
                            setTeleport(0, i, x, y);
                            break;
                        case 'f':
                            drawCircle(i, x, y, Color.CYAN);
                            drawSquare(i, x, y, Color.CYAN, true);
                            setTeleport(1, i, x, y);
                            break;
                        case 'g':
                            drawCircle(i, x, y, Color.YELLOW);
                            drawSquare(i, x, y, Color.YELLOW, true);
                            setTeleport(2, i, x, y);
                            break;
                        case 'h':
                            drawCircle(i, x, y, Color.YELLOW);
                            drawSquare(i, x, y, Color.YELLOW, true);
                            setTeleport(3, i, x, y);
                            break;
                        case 'y':
                            drawSquare(i, x, y, Color.MAGENTA, false);
                            avoider.setSpawn(x, y);
                            break;
                        case 'z':
                            drawSquare(i, x, y, Color.MAGENTA, false);
                            drawCircle(i, x, y, Color.GREEN);
                            break;
                        default:
                            drawSquare(i, x, y, Color.WHITE, false);
                            break;
                    }
                }
            }
        }

        avoider.spawn();

        time = 0;
        mapImage[0].setImageBitmap(levelBitmap[0][0]);
        mapImage[1].setImageBitmap(levelBitmap[1][0]);

        for (int i = 0; i < moverList.size(); i++) {
            gameLayout.removeView(moverList.get(i));
        }

        moverList.clear();

        switch (currentLevel) {
            case 9:
                moverList.add(new Mover(new double[][]{{3, 20.5}, {15, 20.5}}, 5, 2, 0, 2, 0, false, false, false, false, false));
                break;
            case 11:
                moverList.add(new Mover(new double[][]{{13.5, 3}, {13.5, 17}}, 2, 5, 0, 4, 0, false, false, false, false, false));
                break;
            case 13:
                moverList.add(new Mover(new double[][]{{12, 8}}, 18, 3, 0, 0, (float) -0.5, false, false, false, false, false));
                break;
            case 17:
                moverList.add(new Mover(new double[][]{{3, 17.5}, {17, 17.5}}, 5, 2, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 19.5}, {3, 19.5}}, 5, 2, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 21.5}, {17, 21.5}}, 5, 2, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 23.5}, {3, 23.5}}, 5, 2, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 25.5}, {17, 25.5}}, 5, 2, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 27.5}, {3, 27.5}}, 5, 2, 0, 4, 0, false, false, false, false, false));
                break;
            case 37:
                moverList.add(new Mover(new double[][]{{5, 0}, {5, 34}}, 9, 1, 0, 8, 0, false, false, false, false, true));
                break;
            case 21:
                moverList.add(new Mover(new double[][]{{6, 18}, {17, 18}, {17, 7}, {17, 18}}, 5, 5, 0, 2, 0, false, true, false, false, false));
                break;
            case 14:
                moverList.add(new Mover(new double[][]{{6.5, 8}, {6.5, 26}}, 2, 5, 0, 8, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13.5, 14}, {13.5, 20}}, 2, 5, 0, 4, 0, false, false, false, false, false));
                break;
            case 16:
                moverList.add(new Mover(new double[][]{{7.5, 19.5}}, 14, 2, 0, 0, (float) 0.75, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{7, 3}, {12, 8}, {17, 13}}, 1, 6, 45, 4, 0, false, false, false, false, true));
                break;
            case 41:
                moverList.add(new Mover(new double[][]{{10, 17}}, 19, 3, 0, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 17}}, 3, 19, 0, 0, -1, false, false, false, false, false));
                break;
            case 24:
                moverList.add(new Mover(new double[][]{{3, 17}, {17, 17}}, 5, 3, 0, 5, 0, false, false, false, false, false));
                break;
            case 18:
                moverList.add(new Mover(new double[][]{{6.5, 6.5}}, 12, 2, 0, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13.5, 27.5}}, 12, 2, 0, 0, 1, false, false, false, false, false));
                break;
            case 43:
                moverList.add(new Mover(new double[][]{{-2, 26}, {10, 30}, {22, 26}}, 1, 7, 0, 9, 0, false, false, false, false, true));
                break;
            case 27:
                moverList.add(new Mover(new double[][]{{6, 14}}, 11, 1, 0, 0, 2, false, false, false, true, false));
                break;
            case 15:
                moverList.add(new Mover(new double[][]{{3, 12.5}, {17, 12.5}}, 5, 8, 0, 5, 0, false, true, true, false, false));
                break;
            case 28:
                moverList.add(new Mover(new double[][]{{3, 3}, {10, 17}}, 5, 5, 0, 7, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 3}, {10, 17}}, 5, 5, 0, 5, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 31}, {10, 17}}, 5, 5, 0, 6, 0, false, true, false, false, false));
                break;
            case 54:
                moverList.add(new Mover(new double[][]{{7, 14}}, 5, 1, 0, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{7, 14}}, 1, 5, 0, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13, 14}}, 5, 1, 0, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13, 14}}, 1, 5, 0, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 24}}, 3, 1, 0, 0, -2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 24}}, 1, 3, 0, 0, -2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{8, 24}}, 3, 1, 0, 0, -2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{8, 24}}, 1, 3, 0, 0, -2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 24}}, 3, 1, 0, 0, 2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 24}}, 1, 3, 0, 0, 2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 24}}, 3, 1, 0, 0, 2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 24}}, 1, 3, 0, 0, 2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 29}, {10, 34}}, 19, 1, 0, 1, 0, false, false, false, false, false));
                break;
            case 31:
                moverList.add(new Mover(new double[][]{{4, 30}}, 7, 1, 0, 0, 2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{6, 15}, {6, 3}}, 1, 5, 0, 7, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 3}, {12, 15}}, 1, 5, 0, 7, 0, false, false, false, false, false));
                break;
            case 32:
                moverList.add(new Mover(new double[][]{{7, 17}, {7, 7}}, 5, 1, 0, 3, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{7, 23}, {7, 33}}, 5, 1, 0, 3, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{18, 20}}, 3, 15, 0, 0, -1, false, false, false, false, true));
                break;
            case 46:
                moverList.add(new Mover(new double[][]{{9, 38}, {18, 0}}, 5, 1, -11, 10, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{15, 23}, {20, 24}}, 5, 1, -11, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{21, 20}, {16, 19}}, 5, 1, -11, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 15}, {22, 16}}, 5, 1, -11, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{23, 12}, {18, 11}}, 5, 1, -11, 4, 0, false, false, false, false, false));
                break;
            case 45:
                moverList.add(new Mover(new double[][]{{2.5, 2.5}, {2.5, 10.5}, {6.5, 31.5}, {13.5, 31.5}, {17.5, 10.5}, {17.5, 2.5}}, 4, 4, 0, 7, 5, true, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13.5, 31.5}, {17.5, 10.5}, {17.5, 2.5}, {2.5, 2.5}, {2.5, 10.5}, {6.5, 31.5}}, 4, 4, 0, 7, 5, true, false, false, false, false));
                moverList.add(new Mover(new double[][]{{7, 9.5}, {13, 9.5}}, 3, 6, 0, 1, 0, false, false, false, false, false));
                break;
            case 38:
                moverList.add(new Mover(new double[][]{{2.5, 29}, {6.5, 29}}, 4, 1, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{14.5, 28.5}}, 10, 2, 0, 0, -2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12.5, 7.5}, {18.5, 1.5}}, 2, 2, 0, 8, 4, false, false, false, false, false));
                break;
            case 66:
                moverList.add(new Mover(new double[][]{{17, 11}}, 4, 1, 0, 0, (float) -1.5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{4, 18.5}, {18, 18.5}}, 1, 2, 0, 4, 0, false, false, false, false, true));
                break;
            case 60:
                moverList.add(new Mover(new double[][]{{3, 9}, {17, 9}}, 5, 1, 0, 5, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 15}, {17, 15}, {3, 15}}, 5, 1, 0, 5, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 21}, {3, 21}}, 5, 1, 0, 5, 0, false, false, false, false, false));
                break;
            case 67:
                moverList.add(new Mover(new double[][]{{10, 37}, {10, -3}}, 7, 7, 0, 5, 0, false, true, false, false, true));
                moverList.add(new Mover(new double[][]{{10, 37}}, 7, 7, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, -3}}, 7, 7, 0, 0, 0, false, false, false, false, false));
                break;
            case 59:
                moverList.add(new Mover(new double[][]{{-8, 2}, {18, 2}, {18, 32}, {2, 32}, {2, 6}, {14, 6}, {14, 28}, {6, 28}, {6, 10}, {10, 10}, {10, 35}}, 3, 3, 0, 5, 0, true, false, false, false, true));
                break;
            case 77:
                moverList.add(new Mover(new double[][]{{15, 2}, {15, 32}}, 5, 1, 0, 15, 10, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{6, 10}, {18, 10}}, 3, 3, 0, 5, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{2, 2}, {2, 32}}, 3, 3, 0, 5, 0, false, true, false, false, true));
                break;
            case 91:
                moverList.add(new Mover(new double[][]{{10, 10}}, 19, 1, 0, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 10}}, 19, 1, 45, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 10}}, 19, 1, 90, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 10}}, 19, 1, 135, 0, 1, false, false, false, false, false));
                break;
            case 26:
                moverList.add(new Mover(new double[][]{{10, 0}, {10, 34}}, 5, 1, 0, 7, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{6.5, -0.5}}, 2, 22, 0, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13.5, 34.5}}, 2, 22, 0, 0, 1, false, false, false, false, false));
                break;
            case 61:
                moverList.add(new Mover(new double[][]{{10, 17}, {7, 17}, {7, 31}, {12, 31}, {12, 26}, {17, 26}, {17, 10}, {3, 10}, {3, 31}, {7, 31}, {7, 31}, {7, 17}}, 5, 5, 0, 3, 0, true, true, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 26}}, 5, 5, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 10}}, 9, 5, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 24}}, 2, 1, 0, 0, 5, false, false, false, false, false));
                break;
            case 34:
                moverList.add(new Mover(new double[][]{{11, 5}, {11, 16}}, 5, 5, 0, 4, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{11, 22}, {11, 31}}, 5, 5, 0, 4, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{2, 28}, {2, 12}}, 3, 3, 0, 2, 0, false, true, false, false, true));
                break;
            case 12:
                moverList.add(new Mover(new double[][]{{4, 31}, {16, 31}}, 7, 5, 0, 3, 0, false, true, false, true, false));
                break;
            case 50:
                moverList.add(new Mover(new double[][]{{4.5, 18.5}, {15.5, 29.5}, {8.5, 36.5}, {-2.5, 25.5}}, 3, 1, 45, 3, 0, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{10.5, 24.5}, {15.5, 29.5}, {8.5, 36.5}, {-2.5, 25.5}, {4.5, 18.5}}, 3, 1, 45, 3, 0, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{14.5, 30.5}, {8.5, 36.5}, {-2.5, 25.5}, {4.5, 18.5}, {15.5, 29.5}}, 3, 1, 45, 3, 0, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{8.5, 36.5}, {-2.5, 25.5}, {4.5, 18.5}, {15.5, 29.5}}, 3, 1, 45, 3, 0, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{2.5, 30.5}, {-2.5, 25.5}, {4.5, 18.5}, {15.5, 29.5}, {8.5, 36.5}}, 3, 1, 45, 3, 0, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{-1.5, 24.5}, {4.5, 18.5}, {15.5, 29.5}, {8.5, 36.5}, {-2.5, 25.5}}, 3, 1, 45, 3, 0, false, false, false, true, false));
                break;
            case 63:
                moverList.add(new Mover(new double[][]{{13, 14}}, 5, 15, 0, 0, (float) 1.5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 6}, {0, 6}}, 1, 2, 0, 6, 0, false, false, false, false, true));
                break;
            case 70:
                moverList.add(new Mover(new double[][]{{0, 13}, {10, 23}}, 3, 1, -45, 4, 0, false, false, false, true, true));
                moverList.add(new Mover(new double[][]{{10, 18}, {0, 28}}, 3, 1, 45, 4, 0, false, false, false, true, true));
                moverList.add(new Mover(new double[][]{{8.5, 33}, {0, 6}}, 2, 12, 0, 0, (float) 1.5, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{17.5, 14}, {17.5, -1}}, 4, 1, 0, 8, 0, false, false, false, false, true));
                break;
            case 65:
                moverList.add(new Mover(new double[][]{{-2, 6}, {10, 6}, {12, 7}, {18, 7}, {18, 11}, {10, 11}, {8, 12}, {2, 12}, {2, 16}, {10, 16}, {12, 17}, {18, 17}, {18, 21}, {10, 21}, {8, 22}, {2, 22}, {2, 26}, {10, 26}, {12, 27}, {18, 27}, {18, 31}, {10, 31}, {8, 32}, {-34, 32}}, 2, 2, 0, 9, 5, true, false, false, false, true));
                moverList.add(new Mover(new double[][]{{-34, 6}, {10, 6}, {12, 7}, {18, 7}, {18, 11}, {10, 11}, {8, 12}, {2, 12}, {2, 16}, {10, 16}, {12, 17}, {18, 17}, {18, 21}, {10, 21}, {8, 22}, {2, 22}, {2, 26}, {10, 26}, {12, 27}, {18, 27}, {18, 31}, {10, 31}, {8, 32}, {-68, 32}}, 2, 2, 0, 6, -5, true, false, false, false, true));
                moverList.add(new Mover(new double[][]{{-162, 6}, {10, 6}, {12, 7}, {18, 7}, {18, 11}, {10, 11}, {8, 12}, {2, 12}, {2, 16}, {10, 16}, {12, 17}, {18, 17}, {18, 21}, {10, 21}, {8, 22}, {2, 22}, {2, 26}, {10, 26}, {12, 27}, {18, 27}, {18, 31}, {10, 31}, {8, 32}, {-2, 32}}, 2, 2, 0, 6, 5, true, false, false, false, true));
                break;
            case 52:
                moverList.add(new Mover(new double[][]{{18, 25}, {18, 2}}, 3, 3, 0, 2, 0, false, true, false, true, true));
                moverList.add(new Mover(new double[][]{{8, 2}}, 9, 1, 0, 0, 2, false, false, false, true, true));
                break;
            case 39:
                moverList.add(new Mover(new double[][]{{2.5, 31.5}, {2.5, 2.5}, {10, 2.5}, {10, 31.5}, {17.5, 31.5}, {17.5, 2.5}}, 4, 4, 0, 3, 0, true, true, false, false, true));
                break;
            case 58:
                moverList.add(new Mover(new double[][]{{2.5, 0}, {2.5, 22}}, 4, 1, 0, 7, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{3, 25.5}, {20, 8.5}}, 1, 4, 45, 5, 0, false, false, false, true, true));
                break;
            case 92:
                moverList.add(new Mover(new double[][]{{10, 29}, {18, 29}}, 3, 3, 0, 3, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{6, 26}, {6, 32}, {2, 32}, {2, 26}, {2, 32}, {6, 32}}, 3, 3, 0, 3, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{2, 21}, {18, 21}}, 3, 3, 0, 3, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 13}, {3, 13}}, 3, 3, 0, 3, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 9}, {4, 9}, {16, 9}}, 5, 5, 0, 4, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{5, 5}, {15, 5}}, 7, 3, 0, 5, 0, false, true, false, false, false));
                break;
            case 72:
                moverList.add(new Mover(new double[][]{{17, 11.5}, {22, 11.5}}, 5, 12, 0, 3, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 23}, {22, 23}}, 5, 11, 0, 3, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{8, 31}, {8, 26}, {3, 26}, {3, 31}}, 5, 5, 0, 2, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 26}, {3, 31}, {8, 31}, {8, 26}}, 5, 5, 0, 2, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 16}, {8, 16}, {8, 6}, {3, 6}, {8, 6}, {8, 16}}, 5, 5, 0, 6, 0, false, false, false, false, false));
                break;
            case 42:
                moverList.add(new Mover(new double[][]{{15.5, 14.5}}, 2, 10, 0, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{6, 31.5}, {6, 26.5}}, 1, 4, 0, 3, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{11, 26.5}, {11, 31.5}}, 1, 4, 0, 3, 0, false, false, false, false, false));
                break;
            case 48:
                moverList.add(new Mover(new double[][]{{17.5, 31.5}, {2.5, 31.5}, {2.5, 2.5}, {17.5, 2.5}}, 4, 4, 0, 3, 0, true, true, false, true, false));
                moverList.add(new Mover(new double[][]{{10, 2.5}}, 11, 4, 0, 0, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 2.5}}, 12, 1, 20, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 2.5}}, 12, 1, -20, 0, 0, false, false, false, false, false));
                break;
            case 75:
                moverList.add(new Mover(new double[][]{{10, 16}}, 11, 1, 0, 0, -1, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{10, 16}}, 11, 1, 60, 0, -1, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{10, 16}}, 11, 1, 120, 0, -1, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{18, -1}, {18, 1}}, 3, 2, 0, 1, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{18, 5}, {18, 3}}, 3, 2, 0, 1, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{16, 26}}, 7, 1, 0, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{16, 26}}, 7, 1, 90, 0, 1, false, false, false, false, false));
                break;
            case 71:
                moverList.add(new Mover(new double[][]{{5, 21}, {5, 0}}, 3, 1, 0, 5, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{7, 4}}, 7, 1, 0, 0, 2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{9, 0}, {9, 15}}, 3, 1, 0, 5, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{10, 25}, {10, 28}}, 3, 3, 0, 2, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{6, 28}, {6, 25}}, 3, 3, 0, 2, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{14, 18}}, 5, 1, 0, 0, (float) 1.5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{18, 18}}, 5, 1, 0, 0, (float) -1.5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{14, 23}}, 5, 1, 90, 0, (float) 1.5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{18, 23}}, 5, 1, 90, 0, (float) -1.5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{0, 32}, {3, 32}, {6, 32}, {9, 32}, {12, 32}, {15, 32}, {18, 32}, {21, 32}, {21, 35}, {18, 35}, {15, 35}, {12, 35}, {9, 35}, {6, 35}, {3, 35}, {0, 35}}, 1, 3, 0, 7, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 32}, {15, 32}, {18, 32}, {21, 32}, {21, 35}, {18, 35}, {15, 35}, {12, 35}, {9, 35}, {6, 35}, {3, 35}, {0, 35}, {0, 32}, {3, 32}, {6, 32}, {9, 32}}, 1, 3, 0, 7, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{21, 35}, {18, 35}, {15, 35}, {12, 35}, {9, 35}, {6, 35}, {3, 35}, {0, 35}, {0, 32}, {3, 32}, {6, 32}, {9, 32}, {12, 32}, {15, 32}, {18, 32}, {21, 32}}, 1, 3, 0, 7, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{9, 35}, {6, 35}, {3, 35}, {0, 35}, {0, 32}, {3, 32}, {6, 32}, {9, 32}, {12, 32}, {15, 32}, {18, 32}, {21, 32}, {21, 35}, {18, 35}, {15, 35}, {12, 35}}, 1, 3, 0, 7, 0, false, false, false, false, false));
                break;
            case 81:
                moverList.add(new Mover(new double[][]{{16, 4}}, 7, 1, 0, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{16, 4}}, 7, 1, 90, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 15}}, 13, 3, 0, 0, 1, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 25}}, 13, 3, 0, 0, -1, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{0, 4}}, 11, 1, 0, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{0, 4}}, 11, 1, 90, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{4, 0}}, 11, 1, 45, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{4, 0}}, 11, 1, 135, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{0, 25}}, 5, 1, 0, 0, 1, false, false, false, false, false));
                //moverList.add(new Mover(new double[][]{{0, 25}}, 5, 1, 90, 0, 1, false, false, false, false, false));
                break;
            case 56:
                moverList.add(new Mover(new double[][]{{8, 2.5}, {8, 6.5}}, 5, 4, 0, 3, 0, false, false, true, false, false));
                break;
            case 35:
                moverList.add(new Mover(new double[][]{{6, -2.5}, {6, 36.5}}, 1, 6, 0, 24, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{13, 36.5}, {13, -2.5}}, 1, 6, 0, 24, 0, false, false, false, false, true));
                break;
            case 79:
                moverList.add(new Mover(new double[][]{{15, 32}, {15, 2}}, 9, 3, 0, 2, 0, true, true, false, false, false));
                moverList.add(new Mover(new double[][]{{13.5, 26}}, 6, 1, 27, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13.5, 26}}, 6, 1, -27, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{16.5, 17}}, 6, 1, 27, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{16.5, 17}}, 6, 1, -27, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 8}}, 3, 1, 45, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 8}}, 3, 1, -45, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{18, 8}}, 3, 1, 45, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{18, 8}}, 3, 1, -45, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{2, 15}, {8, 15}}, 3, 3, 0, 1, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{8, 21}, {2, 21}}, 3, 3, 0, 2, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{2, 27}, {8, 27}}, 3, 3, 0, 3, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{10, 12}, {0, 12}}, 1, 1, 0, 2, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{0, 18}, {10, 18}}, 1, 1, 0, 3, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{10, 24}, {0, 24}}, 1, 1, 0, 4, 0, false, false, false, false, true));
                break;
            case 83:
                moverList.add(new Mover(new double[][]{{2, 17}, {2, 11}, {5, 11}, {5, 2}, {11, 2}, {11, 11}, {21, 11}, {21, 35}, {18, 35}, {18, 17}}, 3, 3, 0, 15, 0, true, false, false, false, false));
                moverList.add(new Mover(new double[][]{{2, 23}, {2, 32}, {14, 32}, {14, 23}}, 3, 3, 0, 10, 0, false, false, false, false, false));
                break;
            case 85:
                moverList.add(new Mover(new double[][]{{15.5, 2}, {12.5, 2}, {9.5, 2}, {6.5, 2}, {3.5, 2}, {6.5, 2}, {9.5, 2}, {12.5, 2}}, 6, 3, 0, 3, 0, false, true, true, false, false));
                moverList.add(new Mover(new double[][]{{2, 15.5}, {2, 12.5}, {2, 9.5}, {2, 6.5}, {2, 3.5}, {2, 6.5}, {2, 9.5}, {2, 12.5}}, 3, 6, 0, 3, 0, false, true, true, false, false));
                moverList.add(new Mover(new double[][]{{8.5, 23}, {12.5, 31}}, 8, 5, 0, 2, 0, false, false, true, false, false));
                break;
            case 80:
                moverList.add(new Mover(new double[][]{{12, 22}, {6, 22}, {6, 28}, {12, 28}}, 3, 3, 0, 3, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{9, 9}, {9, 12}, {9, 15}, {6, 15}, {3, 15}, {6, 15}, {9, 15}, {9, 12}}, 3, 3, 0, 2, 0, false, true, false, true, false));
                moverList.add(new Mover(new double[][]{{12, 9}, {12, 12}, {12, 15}, {15, 15}, {18, 15}, {18, 12}, {18, 9}, {15, 9}}, 3, 3, 0, 2, 0, false, true, false, true, false));
                moverList.add(new Mover(new double[][]{{18, 13.5}}, 3, 6, 0, 0, 0, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{2, 2}, {8, 2}}, 3, 3, 0, 4, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{2, 2}, {2, 8}}, 3, 3, 0, 4, 0, false, true, false, false, false));
                break;
            case 98:
                moverList.add(new Mover(new double[][]{{5.5, 2.5}, {9.5, 2.5}, {9.5, 6.5}, {5.5, 6.5}}, 4, 4, 0, 1, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{9.5, 6.5}, {5.5, 6.5}, {5.5, 2.5}, {9.5, 2.5}}, 4, 4, 0, 1, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13.5, 2.5}, {17.5, 2.5}, {17.5, 6.5}, {13.5, 6.5}}, 4, 4, 0, 1, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17.5, 6.5}, {13.5, 6.5}, {13.5, 2.5}, {17.5, 2.5}}, 4, 4, 0, 1, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{5.5, 10.5}, {9.5, 10.5}, {9.5, 14.5}, {5.5, 14.5}}, 4, 4, 0, 1, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{9.5, 14.5}, {5.5, 14.5}, {5.5, 10.5}, {9.5, 10.5}}, 4, 4, 0, 1, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13.5, 10.5}, {17.5, 10.5}, {17.5, 14.5}, {13.5, 14.5}}, 4, 4, 0, 1, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17.5, 14.5}, {13.5, 14.5}, {13.5, 10.5}, {17.5, 10.5}}, 4, 4, 0, 1, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{7, 23.5}, {14, 23.5}}, 5, 2, 0, 2, 0, false, true, true, false, false));
                moverList.add(new Mover(new double[][]{{10, 31}, {10, 41}}, 19, 5, 0, 3, 0, false, false, false, false, false));
                break;
            case 93:
                moverList.add(new Mover(new double[][]{{3, 8}}, 5, 1, 0, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 13}}, 5, 1, 0, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{8, 13}}, 5, 1, 0, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{15, 9}}, 5, 1, 90, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 21}, {3, 31}}, 5, 1, 0, 1, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 31}, {3, 21}}, 5, 1, 90, 1, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13, 31}}, 5, 1, 0, 0, -1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{16, 28}}, 5, 1, 90, 0, -1, false, false, false, false, false));
                break;
            case 88:
                moverList.add(new Mover(new double[][]{{8, 20}, {12, 20}, {14, 18}, {14, 14}, {12, 12}, {8, 12}, {6, 14}, {6, 18}}, 2, 2, 0, 5, 5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{14, 18}, {14, 14}, {12, 12}, {8, 12}, {6, 14}, {6, 18}, {8, 20}, {12, 20}}, 2, 2, 0, 5, 5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 12}, {8, 12}, {6, 14}, {6, 18}, {8, 20}, {12, 20}, {14, 18}, {14, 14}}, 2, 2, 0, 5, 5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{6, 14}, {6, 18}, {8, 20}, {12, 20}, {14, 18}, {14, 14}, {12, 12}, {8, 12}}, 2, 2, 0, 5, 5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{2, 2}, {2, 4}, {2, 6}, {2, 8}, {4, 8}, {6, 8}, {8, 8}, {8, 6}, {8, 4}, {8, 2}, {6, 2}, {4, 2}}, 3, 3, 0, 3, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{8, 8}, {8, 6}, {8, 4}, {8, 2}, {6, 2}, {4, 2}, {2, 2}, {2, 4}, {2, 6}, {2, 8}, {4, 8}, {6, 8}}, 3, 3, 0, 3, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{14, 24}, {14, 26}, {14, 28}, {16, 28}, {18, 28}, {18, 26}, {18, 24}, {18, 26}, {18, 28}, {16, 28}, {14, 28}, {14, 26}}, 3, 3, 0, 3, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{2, 32}}, 19, 3, 0, 0, -1, false, false, false, true, false));
                break;
            case 89:
                moverList.add(new Mover(new double[][]{{9, -1}, {9, 5}, {9, 11}, {9, 17}, {9, 23}, {9, 29}, {9, 35}, {15, 35}, {21, 35}, {21, 29}, {21, 23}, {21, 17}, {21, 11}, {21, 5}, {21, -1}, {15, -1}}, 3, 3, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{15, -1}, {15, 5}, {15, 11}, {15, 17}, {15, 23}, {15, 29}, {15, 35}, {21, 35}, {27, 35}, {27, 29}, {27, 23}, {27, 17}, {27, 11}, {27, 5}, {27, -1}, {21, -1}}, 3, 3, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10.5, 11}, {10.5, 17}, {10.5, 23}, {10.5, 29}, {10.5, 35}, {16.5, 35}, {22.5, 35}, {22.5, 29}, {22.5, 23}, {22.5, 17}, {22.5, 11}, {22.5, 5}, {22.5, -1}, {16.5, -1}, {10.5, -1}, {10.5, 5}}, 6, 3, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13.5, 23}, {13.5, 29}, {13.5, 35}, {19.5, 35}, {25.5, 35}, {25.5, 29}, {25.5, 23}, {25.5, 17}, {25.5, 11}, {25.5, 5}, {25.5, -1}, {19.5, -1}, {13.5, -1}, {13.5, 5}, {13.5, 11}, {13.5, 17}}, 6, 3, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{10.5, 35}, {16.5, 35}, {22.5, 35}, {22.5, 29}, {22.5, 23}, {22.5, 17}, {22.5, 11}, {22.5, 5}, {22.5, -1}, {16.5, -1}, {10.5, -1}, {10.5, 5}, {10.5, 11}, {10.5, 17}, {10.5, 23}, {10.5, 29}}, 6, 3, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{21, 35}, {21, 29}, {21, 23}, {21, 17}, {21, 11}, {21, 5}, {21, -1}, {15, -1}, {9, -1}, {9, 5}, {9, 11}, {9, 17}, {9, 23}, {9, 29}, {9, 35}, {15, 35}}, 3, 3, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{27, 35}, {27, 29}, {27, 23}, {27, 17}, {27, 11}, {27, 5}, {27, -1}, {21, -1}, {15, -1}, {15, 5}, {15, 11}, {15, 17}, {15, 23}, {15, 29}, {15, 35}, {21, 35}}, 3, 3, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{25.5, 23}, {25.5, 17}, {25.5, 11}, {25.5, 5}, {25.5, -1}, {19.5, -1}, {13.5, -1}, {13.5, 5}, {13.5, 11}, {13.5, 17}, {13.5, 23}, {13.5, 29}, {13.5, 35}, {19.5, 35}, {25.5, 35}, {25.5, 29}}, 6, 3, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{22.5, 11}, {22.5, 5}, {22.5, -1}, {16.5, -1}, {10.5, -1}, {10.5, 5}, {10.5, 11}, {10.5, 17}, {10.5, 23}, {10.5, 29}, {10.5, 35}, {16.5, 35}, {22.5, 35}, {22.5, 29}, {22.5, 23}, {22.5, 17}}, 6, 3, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{25.5, -1}, {19.5, -1}, {13.5, -1}, {13.5, 5}, {13.5, 11}, {13.5, 17}, {13.5, 23}, {13.5, 29}, {13.5, 35}, {19.5, 35}, {25.5, 35}, {25.5, 29}, {25.5, 23}, {25.5, 17}, {25.5, 11}, {25.5, 5}}, 6, 3, 0, 4, 0, false, false, false, false, false));
                break;
            case 47:
                moverList.add(new Mover(new double[][]{{7, 26}, {10, 26}, {13, 26}, {16, 26}, {19, 26}}, 1, 3, 0, 2, 0, false, false, true, false, true));
                moverList.add(new Mover(new double[][]{{8, 20.5}, {8, 31.5}}, 7, 4, 0, 4, 0, false, false, true, false, false));
                moverList.add(new Mover(new double[][]{{2.5, 15}, {2.5, 26}}, 4, 7, 0, 4, 0, false, false, true, false, false));
                break;
            case 55:
                moverList.add(new Mover(new double[][]{{14, 24}, {17, 24}}, 3, 5, 0, 2, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{7, 33}, {1, 27}}, 3, 1, 45, 5, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{9.5, 14.5}}, 12, 2, 0, 0, 2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13.5, 6.5}}, 12, 2, 0, 0, 2, false, false, false, false, false));
                break;
            case 82:
                moverList.add(new Mover(new double[][]{{6, 24.5}, {6, 3.5}}, 3, 6, 0, 6, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{18, 25.5}, {18, 17.5}}, 3, 2, 0, 1, 0, false, true, false, false, true));
                moverList.add(new Mover(new double[][]{{15, 8.5}, {15, 16.5}}, 3, 2, 0, 1, 0, false, true, false, true, true));
                break;
            case 23:
                moverList.add(new Mover(new double[][]{{2, 23.5}, {6, 23.5}}, 4, 6, 0, 2, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{14, 23.5}, {10, 23.5}}, 4, 6, 0, 2, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{6, 6}}, 7, 1, 0, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13, 23.5}, {17, 23.5}}, 2, 3, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{23, 23.5}, {19, 23.5}}, 2, 3, 0, 4, 0, false, false, false, false, false));
                break;
            case 95:
                moverList.add(new Mover(new double[][]{{13.5, 9.5}, {13.5, 13.5}, {15.5, 13.5}, {17.5, 13.5}, {17.5, 17.5}, {17.5, 13.5}, {15.5, 13.5}, {13.5, 13.5}, {13.5, 9.5}}, 2, 2, 0, 1, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{17.5, 17.5}, {17.5, 13.5}, {15.5, 13.5}, {13.5, 13.5}, {13.5, 9.5}, {13.5, 13.5}, {15.5, 13.5}, {17.5, 13.5}, {17.5, 17.5}}, 2, 2, 0, 1, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{17.5, 26.5}, {17.5, 30.5}, {17.5, 32.5}, {15.5, 32.5}, {11.5, 32.5}, {15.5, 32.5}, {17.5, 32.5}, {17.5, 30.5}, {17.5, 26.5}}, 2, 2, 0, 1, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{11.5, 32.5}, {15.5, 32.5}, {17.5, 32.5}, {17.5, 30.5}, {17.5, 26.5}, {17.5, 30.5}, {17.5, 32.5}, {15.5, 32.5}, {11.5, 32.5}}, 2, 2, 0, 1, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 23}, {8, 23}}, 5, 5, 0, 2, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{8, 18}, {3, 18}}, 5, 5, 0, 2, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 13}, {8, 13}}, 5, 5, 0, 2, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{1.5, 23}}, 2, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{5.5, 23}}, 2, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{9.5, 23}}, 2, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3.5, 18}}, 2, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{7.5, 18}}, 2, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{1.5, 13}}, 2, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{5.5, 13}}, 2, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{9.5, 13}}, 2, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 3}}, 5, 1, 0, 0, 1, false, false, false, false, false));
                break;
            case 68:
                moverList.add(new Mover(new double[][]{{2.5, 29.5}, {17.5, 29.5}}, 4, 8, 0, 4, 0, false, true, false, false, true));
                moverList.add(new Mover(new double[][]{{6.5, 27.5}}, 4, 4, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{15.5, 31.5}}, 8, 4, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{6, 7}, {6, 11}}, 11, 3, 0, 2, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{4, 7.5}}, 1, 4, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{8, 10.5}}, 1, 4, 0, 0, 0, false, false, false, false, false));
                break;
            case 96:
                moverList.add(new Mover(new double[][]{{8, 20}, {8, 0}}, 3, 1, 0, 10, 0, false, false, false, true, true));
                moverList.add(new Mover(new double[][]{{18, 22}, {18, 2}}, 3, 1, 0, 10, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{1, 21}, {-2, 21}}, 5, 1, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{5, 21}, {8, 21}}, 5, 1, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{3, 31}, {3, 25}}, 1, 1, 0, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{13, 3}}, 3, 1, 0, 0, -3, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{11, 25}, {17, 25}, {17, 31}, {17, 25}, {11, 25}}, 3, 3, 0, 4, 0, false, false, true, false, false));
                break;
            case 87:
                moverList.add(new Mover(new double[][]{{-5, 39}, {6, 28}}, 15, 3, 45, 4, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{19.5, 28.5}, {2.5, 11.5}, {11.5, 2.5}, {14.5, 5.5}, {8.5, 11.5}, {22.5, 25.5}}, 1, 1, 0, 6, 9, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{11.5, 2.5}, {14.5, 5.5}, {8.5, 11.5}, {22.5, 25.5}, {19.5, 28.5}, {2.5, 11.5}}, 1, 1, 0, 6, 9, false, false, false, false, false));
                break;
            case 86:
                moverList.add(new Mover(new double[][]{{12, 8}}, 3, 15, 0, 0, 1, false, true, false, true, false));
                moverList.add(new Mover(new double[][]{{12, 8}}, 3, 9, 0, 0, 1, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{12, 14}}, 3, 5, 0, 0, 0, false, false, false, true, false));
                moverList.add(new Mover(new double[][]{{6, 28}}, 11, 3, 0, 0, 1, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{6, 28}}, 5, 3, 0, 0, 1, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{14, 28}}, 11, 3, 0, 0, -1, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{14, 28}}, 5, 3, 0, 0, -1, false, false, false, false, false));
                break;
            case 84:
                moverList.add(new Mover(new double[][]{{6.5, 20.5}, {7.5, 19.5}, {8.5, 18.5}, {6.5, 20.5}}, 9, 1, -45, 1, 0, false, false, true, true, true));
                break;
            case 97:
                moverList.add(new Mover(new double[][]{{13.5, 22}, {16.5, 22}}, 2, 3, 0, 1, 0, false, false, true, false, false));
                moverList.add(new Mover(new double[][]{{14, 21.5}, {14, 24.5}}, 3, 2, 0, 1, 0, false, false, true, false, false));
                moverList.add(new Mover(new double[][]{{8.5, 27}, {11.5, 27}}, 2, 3, 0, 1, 0, false, false, true, false, false));
                moverList.add(new Mover(new double[][]{{9, 26.5}, {9, 29.5}}, 3, 2, 0, 1, 0, false, false, true, false, false));
                moverList.add(new Mover(new double[][]{{9.5, 27}, {6.5, 27}}, 2, 3, 0, 1, 0, false, false, true, false, false));
                moverList.add(new Mover(new double[][]{{4, 21.5}, {4, 24.5}}, 3, 2, 0, 1, 0, false, false, true, false, false));
                moverList.add(new Mover(new double[][]{{4.5, 22}, {1.5, 22}}, 2, 3, 0, 1, 0, false, false, true, false, false));
                moverList.add(new Mover(new double[][]{{2, 6}, {5, 6}, {5, 9}, {2, 9}}, 1, 1, 0, 8, 10, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{14.5, 34}, {14.5, 26}}, 2, 1, 0, 2, 0, false, false, false, false, true));
                break;
            case 78:
                moverList.add(new Mover(new double[][]{{2, 9}, {2, 37}}, 3, 7, 0, 7, 0, false, true, false, false, true));
                moverList.add(new Mover(new double[][]{{2, 9}}, 3, 7, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{2, 37}}, 3, 7, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{14, 26}, {8, 26}, {8, 23}, {8, 26}, {14, 26}}, 3, 3, 0, 2, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{15, 22}, {18, 22}, {18, 28}, {18, 22}, {15, 22}}, 3, 3, 0, 2, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{5, 3}, {17, 3}, {17, 8}}, 5, 5, 0, 3, 0, false, true, false, false, true));
                moverList.add(new Mover(new double[][]{{9, 4.5}}, 1, 2, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 1.5}}, 1, 2, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{15, 5}}, 3, 1, 45, 0, 0, false, false, false, false, false));
                break;
            case 73:
                moverList.add(new Mover(new double[][]{{2, 26}, {2, 11}, {5, 11}}, 3, 1, 0, 9, 0, false, false, false, false, true));
                moverList.add(new Mover(new double[][]{{8, 9}, {8, 2}, {12, 2}, {12, 9}}, 3, 3, 0, 3, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 2}, {12, 9}, {8, 9}, {8, 2}}, 3, 3, 0, 3, 0, false, true, false, false, false));
                moverList.add(new Mover(new double[][]{{8.5, 17.5}, {8, 2}, {12, 2}, {12, 9}}, 1, 7, 0, 0, (float) -1.5, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{14, 20}, {14, 28}}, 3, 3, 0, 4, 0, false, false, false, false, false));
                break;
            case 99:
                moverList.add(new Mover(new double[][]{{1.5, 32.5}, {5.5, 32.5}, {5.5, 27.5}, {1.5, 27.5}, {1.5, 20.5}}, 2, 2, 0, 1, 0, true, true, false, false, true));
                moverList.add(new Mover(new double[][]{{4, 27.5}}, 1, 2, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{1.5, 25}, {8, 31}}, 2, 1, 0, 0, 0, false, false, false, false, false));


                moverList.add(new Mover(new double[][]{{1.5, 17.5}, {1.5, 15.5}, {1.5, 13.5}, {3.5, 13.5}, {3.5, 13.5}, {3.5, 11.5}, {3.5, 9.5}, {1.5, 9.5}, {1.5, 7.5}, {1.5, 5.5}, {3.5, 5.5}, {3.5, 3.5}, {3.5, 1.5}, {1.5, 1.5}}, 2, 2, 0, 6, 0, false, false, true, false, true));
                moverList.add(new Mover(new double[][]{{16.5, 3.5}}, 6, 1, 0, 0, -2, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{16, 18}, {16, 32}}, 7, 3, 0, 1, 0, false, true, false, false, true));
                moverList.add(new Mover(new double[][]{{15.5, 18}}, 2, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 19}}, 5, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{15, 23}}, 5, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{17, 27}}, 5, 1, 0, 0, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{15, 31}}, 5, 1, 0, 0, 0, false, false, false, false, false));

                moverList.add(new Mover(new double[][]{{12, 31}, {8, 31}}, 1, 1, 0, 2, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{8, 28}, {12, 28}}, 1, 1, 0, 2, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 25}, {8, 25}}, 1, 1, 0, 3, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{8, 22}, {12, 22}}, 1, 1, 0, 3, 0, false, false, false, false, false));
                moverList.add(new Mover(new double[][]{{12, 19}, {8, 19}}, 1, 1, 0, 4, 0, false, false, false, false, false));


                break;
            default:
                break;
        }
    }

    public void endLevel(boolean win) {
        endLayout.setVisibility(View.VISIBLE);
        avoider.setVisibility(View.INVISIBLE);
        avoider.speedX = 0;
        avoider.speedY = 0;

        endLevelText.setText(getString(R.string.end_level_text, currentLevel + 1, level[currentLevel].name));


        if (win) {
            //winSound.start();
            endText.setText(R.string.end_text_1);
            endText.setTextColor(Color.GREEN);

            endButton[1].setBackgroundColor(getResources().getColor(R.color.buttonBackgroundColor));
            endButton[1].setTextColor(Color.parseColor("#ffffff"));

            if (levelStars[currentLevel + 1] == 0) {
                if (currentLevel < level.length - 1) {
                    levelStars[currentLevel + 1] = 1;
                    levelButton[currentLevel + 1].setBackground(new BitmapDrawable(this.getResources(), levelButtonBitmap[1]));
                }
            }
        } else {
            endText.setText(R.string.end_text_0);
            endText.setTextColor(Color.RED);

            if (currentLevel < level.length - 1) {
                if (levelStars[currentLevel + 1] == 0) {
                    endButton[1].setBackgroundColor(getResources().getColor(R.color.fadedButtonBackgroundColor));
                    endButton[1].setTextColor(Color.parseColor("#808080"));
                }
            }
        }

        if (currentLevel < level.length - 1) {
            endButton[1].setText(R.string.end_button_2);
        } else {
            endButton[1].setText(R.string.end_credits_button);

        }

        for (int i = 0; i <= 2; i++) {
            star[i].setImageBitmap(star[i].bitmap[0]);
        }

        avoider.setX(spawn.x);
        avoider.setY(spawn.y);

        if (win) {
            if (time < data.getInt("highScore" + currentLevel, Integer.MAX_VALUE)) {
                bestText.setText(getString(R.string.end_score_text_0, (float) time / 50));
            } else {
                if (data.getInt("highScore" + currentLevel, Integer.MAX_VALUE) < level[currentLevel].starTime) {
                    bestText.setText(getString(R.string.end_score_text_1, (float) time / 50, (float) data.getInt("highScore" + currentLevel, 0) / 50));
                    star[2].setImageBitmap(star[2].bitmap[1]);
                    star[1].setImageBitmap(star[1].bitmap[1]);
                    star[0].setImageBitmap(star[0].bitmap[1]);
                } else if (data.getInt("highScore" + currentLevel, Integer.MAX_VALUE) < (int) Math.round(level[currentLevel].starTime * 1.25)) {
                    bestText.setText(getString(R.string.end_score_text_1, (float) time / 50, (float) data.getInt("highScore" + currentLevel, 0) / 50));
                    star[1].setImageBitmap(star[1].bitmap[1]);
                    star[0].setImageBitmap(star[0].bitmap[1]);
                } else {
                    bestText.setText(getString(R.string.end_score_text_1, (float) time / 50, (float) data.getInt("highScore" + currentLevel, 0) / 50));
                    star[0].setImageBitmap(star[0].bitmap[1]);
                }
            }
        } else {
            if (data.getInt("highScore" + currentLevel, 0) != 0) {
                if (data.getInt("highScore" + currentLevel, 0) < level[currentLevel].starTime) {
                    bestText.setText(getString(R.string.end_score_text_2, (float) data.getInt("highScore" + currentLevel, 0) / 50));
                    star[2].setImageBitmap(star[2].bitmap[1]);
                    star[1].setImageBitmap(star[1].bitmap[1]);
                    star[0].setImageBitmap(star[0].bitmap[1]);
                } else if (data.getInt("highScore" + currentLevel, 0) < (int) Math.round(level[currentLevel].starTime * 1.25)) {
                    bestText.setText(getString(R.string.end_score_text_2, (float) data.getInt("highScore" + currentLevel, 0) / 50));
                    star[1].setImageBitmap(star[1].bitmap[1]);
                    star[0].setImageBitmap(star[0].bitmap[1]);
                } else {
                    bestText.setText(getString(R.string.end_score_text_2, (float) data.getInt("highScore" + currentLevel, 0) / 50));
                    star[0].setImageBitmap(star[0].bitmap[1]);
                }
            } else {
                bestText.setText(R.string.end_score_text_3);
            }
        }

        if (win) {
            endStarTimer = 0;


            if (time < data.getInt("highScore" + currentLevel, Integer.MAX_VALUE)) {
                dataEditor.putInt("highScore" + currentLevel, time);
                dataEditor.apply();
            }

            setLevelStars(level[currentLevel], currentLevel, false);
            setLevelStars(level[currentLevel + 1], currentLevel + 1, false);
            dataEditor.apply();
        }

        updateLevelButton(currentLevel);


    }

    public void endStarInstruct() {
        if (endStarTimer >= 0 && endStarTimer < 10) {
            endStarSizing = 1;
            endStarInQuestion = 0;
        } else if (endStarTimer >= 10 && endStarTimer < 20) {
            endStarSizing = -1;
        } else if (time < level[currentLevel].starTime * 1.25 && endStarTimer >= 20 && endStarTimer < 30) {
            endStarSizing = 1;
            endStarInQuestion = 1;
        } else if (time < level[currentLevel].starTime * 1.25 && endStarTimer >= 30 && endStarTimer < 40) {
            endStarSizing = -1;
        } else if (time < level[currentLevel].starTime && endStarTimer >= 40 && endStarTimer < 50) {
            endStarSizing = 1;
            endStarInQuestion = 2;
        } else if (time < level[currentLevel].starTime && endStarTimer >= 50 && endStarTimer < 60) {
            endStarSizing = -1;
        } else {
            endStarTimer = 60;
        }

        if (endStarTimer < 60) {
            star[endStarInQuestion].instruct(endStarSizing);
            endStarTimer++;
        }
    }

    void instructLevelButton() {
        levelButtonDisplacement = -levelButtonDisplacement;
        if (levelButtonDisplacement > 0) {
            levelButtonDisplacement -= Math.ceil((float) zoneWidth / 1028);
        } else {
            levelButtonDisplacement += Math.ceil((float) zoneWidth / 1028);
        }
        levelButton[levelButtonInQuestion].setX(levelButtonBaseX + levelButtonDisplacement);
    }

    void instructNextButton() {
        nextButtonDisplacement = -nextButtonDisplacement;
        if (nextButtonDisplacement > 0) {
            nextButtonDisplacement--;
        } else {
            nextButtonDisplacement++;
        }
        endButton[1].setX(nextButtonBaseX + nextButtonDisplacement);
    }

    void teleport(int x, int y) {
        if (!teleporting) {
            teleportSound.playSound();
            avoider.setX(x);
            avoider.setY(y);
            teleporting = true;
        }
    }

    void setTeleport(int i, int j, int x, int y) {
        teleportX[j][i] = Math.round(mapImage[0].getX() + (square * x));
        teleportY[j][i] = Math.round(mapImage[0].getY() + (square * y));


    }

    boolean pointWithinBounds(int x, int y, ImageView image) {
        return x >= image.getX() && y >= image.getY() && x < image.getX() + image.getWidth() && y < image.getY() + image.getHeight();
    }

    boolean pointColliding(int x, int y, ImageView image, Bitmap bitmap, int i) {
        try {
            return bitmap.getPixel(x - Math.round(image.getX()), y - Math.round(image.getY())) == i;
        } catch (IllegalArgumentException boundsExceeded) {
            return false;
        }
    }


    boolean inMenu() {
        return menuLayout.getVisibility() == View.VISIBLE;
    }

    boolean inGame() {
        return endLayout.getVisibility() == View.INVISIBLE;
    }

    int currentBitmap() {
        if (((BitmapDrawable) mapImage[0].getDrawable()).getBitmap() == levelBitmap[0][0]) {
            return 0;
        }
        return 1;
    }

    void drawQuadrant(int i, int x, int y, int rotation, boolean inverted) {
        if (inverted) {
            paint.setColor(Color.MAGENTA);
            levelCanvas[0][i].drawRect(square * x, square * y, square * (x + 1), square * (y + 1), paint);
            paint.setColor(Color.BLACK);
        } else {
            paint.setColor(Color.MAGENTA);
        }

        path.rewind();
        path.moveTo(square * x, square * y);
        bounds.set(square * (x - 1), square * (y - 1), square * (x + 1), square * (y + 1));
        path.arcTo(bounds, 0, 90, false);
        path.close();
        path.computeBounds(bounds, true);
        matrix.reset();
        matrix.postRotate(rotation, bounds.centerX(), bounds.centerY());
        path.transform(matrix);
        levelCanvas[0][i].drawPath(path, paint);
    }

    void levelFailed() {
        status = Status.LOST;
        crashSound.playSound();
        //playSound(crashSound);
        upAction();




        deathTimer = 32;

        avoider.explode();
    }

    void levelComplete() {
        winSound.playSound();
        status = Status.WON;
        upAction();
        deathTimer = -32;
        avoider.implode();
    }

    void drawSquare(int i, int x, int y, int color, boolean small) {
        paint.setColor(color);
        if (small) {
            vSquare = (square * (1 - (float) Math.sqrt(Math.PI / 4))) / 2;
            levelCanvas[1][i].drawRect((square * x) + vSquare, (square * y) + vSquare, (square * (x + 1)) - vSquare, (square * (y + 1)) - vSquare, paint);
        } else {
            vSquare = 0;
            levelCanvas[0][i].drawRect((square * x) + vSquare, (square * y) + vSquare, (square * (x + 1)) - vSquare, (square * (y + 1)) - vSquare, paint);
        }
    }

    void drawTriangle(int i, int x, int y, int color, int rotation) {
        paint.setColor(color);
        path.rewind();
        path.moveTo(square * x, square * y);
        path.lineTo(square * (x + 1), square * y);
        path.lineTo(square * x, square * (y + 1));
        path.close();
        path.computeBounds(bounds, true);
        matrix.reset();
        matrix.postRotate(rotation, bounds.centerX(), bounds.centerY());
        path.transform(matrix);
        levelCanvas[0][i].drawPath(path, paint);
    }

    void drawCircle(int i, int x, int y, int color) {
        paint.setColor(color);
        levelCanvas[1][i].drawCircle((square * x) + ((float) square / 2), (square * y) + ((float) square / 2), (float) square / 2, paint);
    }

    void updateLevelButton(int i) {
        levelButton[i].setBackground(new BitmapDrawable(this.getResources(), levelButtonBitmap[levelStars[i]]));
    }

    void createButton(Button button, ConstraintLayout layout, int width, int height, float x, float y) {
        layout.addView(button, width, height);
        button.setX(zoneX + ((float) button.getLayoutParams().width / 2) + x);
        button.setY(zoneY + ((float) button.getLayoutParams().height / 2) + y);
        button.setBackgroundColor(getResources().getColor(R.color.buttonBackgroundColor));
        button.setTextColor(Color.WHITE);
        button.setTypeface(Typeface.MONOSPACE);
        button.setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) button.getLayoutParams().height / 2);
    }


    void updateTime() {
        time++;
        gameText[1].setText(getString(R.string.time_text, (float) time / 50));
    }

    void instructPauseText() {
        if (pauseTimer < 50) {
            pauseText.setVisibility(View.VISIBLE);
        } else {
            pauseText.setVisibility(View.INVISIBLE);
        }
        pauseTimer++;
        if (pauseTimer == 100) {
            pauseTimer = 0;
        }
    }

    void slideMenu() {
        menuInterfaceLayout.setX(menuInterfaceLayout.getX() + (((float) widthPixels / 8) * slideDirection));
        if (menuInterfaceLayout.getX() == 0 || menuInterfaceLayout.getX() == -widthPixels || menuInterfaceLayout.getX() == -widthPixels * 2) {
            slide = false;
        }
    }


    void updateEndOpacity() {
        if (deathTimer > 0 && deathTimer <= 16) {
            deathLayerOpacity += 8;
            deathLayer.getBackground().setAlpha(deathLayerOpacity);
        }

        if (deathTimer == 16) {
            endLevel(false);
            if (deathCount >= 4) {
                loadAdFlag = true;
            } else {
                deathCount++;
            }
        }

        if(!adsRemoved) {

            if ((loadAdFlag) & (deathTimer == 0)) {
                displayAd();
            }

        }

        if (deathTimer == -16) {
            endLevel(true);
        }

        if (deathTimer < 0 && deathTimer >= -16) {
            deathLayerOpacity += 8;
            deathLayer.getBackground().setAlpha(deathLayerOpacity);
        }

        if (respawnTimer > 16 && respawnTimer <= 32) {
            deathLayerOpacity -= 8;
            deathLayer.getBackground().setAlpha(deathLayerOpacity);
        }

        if (deathTimer > 0) {
            deathTimer--;
        }

        if (deathTimer < 0) {
            deathTimer++;
        }

        if (respawnTimer > 0) {
            respawnTimer--;
        }

        if (respawnTimer > 4 && respawnTimer <= 8 || respawnTimer > 12 && respawnTimer <= 16 || respawnTimer > 20 && respawnTimer <= 24 || respawnTimer > 28 && respawnTimer <= 32) {
            avoider.setVisibility(View.INVISIBLE);
        }

        if (respawnTimer > 0 && respawnTimer <= 4 || respawnTimer > 8 && respawnTimer <= 12 || respawnTimer > 16 && respawnTimer <= 20 || respawnTimer > 24 && respawnTimer <= 28) {
            avoider.setVisibility(View.VISIBLE);
        }
    }

    void instructParticles() {
        for (int i = 0; i < avoider.particle.length; i++) {
            if (avoider.particle[i].getVisibility() == View.VISIBLE && avoider.particle[i].alpha > 0) {
                avoider.particle[i].instruct();
            }
        }
    }

    void instructMovers() {
        for (int i = 0; i < moverList.size(); i++) {
            if (status != Status.PAUSED) {
                moverList.get(i).instruct();
            }
        }
    }

    void pauseGame() {
        pauseStatus = status;
        pauseTimer = 0;
        pauseLayout.setVisibility(View.VISIBLE);
        status = Status.PAUSED;
        upAction();
    }


    void upAction() {
        mouseDown = false;
        avoider.thrust.stop();
        joystick.base.setVisibility(View.INVISIBLE);
        joystick.setVisibility(View.INVISIBLE);

        if (rocketSound.audioTrack.getPlayState() == PLAYSTATE_PLAYING) {
            rocketSound.audioTrack.setStereoVolume(0, 0);
            stopTimer = 5;
        }
    }

    void slapSpinners() {
        gameText[1].setText(getString(R.string.time_text, (float) time / 50));
    }

    void loadAd() {
        AdRequest adRequest = new AdRequest.Builder().build();

        InterstitialAd.load(this, "ca-app-pub-9119760007522850/4769378273", adRequest,
                new InterstitialAdLoadCallback() {
                    @Override
                    public void onAdLoaded(@NonNull InterstitialAd interstitialAd) {
                        // The mInterstitialAd reference will be null until
                        // an ad is loaded.
                        mInterstitialAd = interstitialAd;
                        Log.i(TAG, "onAdLoaded");
                    }

                    @Override
                    public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {
                        // Handle the error
                        Log.i(TAG, "oh well");
                        Log.i(TAG, loadAdError.getMessage());
                        mInterstitialAd = null;
                    }
                });
    }

    void displayAd() {
        if (mInterstitialAd != null) {
            loadAd();
            mInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {
                @Override
                public void onAdDismissedFullScreenContent() {
                    // Called when fullscreen content is dismissed.
                    Log.d("TAG", "The ad was dismissed.");
                }

                @Override
                public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {
                    // Called when fullscreen content failed to show.
                    Log.d("TAG", "The ad failed to show.");
                }

                @Override
                public void onAdShowedFullScreenContent() {
                    // Called when fullscreen content is shown.
                    // Make sure to set your reference to null so you don't
                    // show it a second time.
                    mInterstitialAd = null;
                    Log.d("TAG", "The ad was shown.");
                }
            });
            mInterstitialAd.show(MainActivity.this);
            adCount = 0;
            deathCount = 0;
            loadAdFlag = false;
        }
    }

    void instructCredits() {
        if (creditsTimer >= 0 && creditsTimer < 38 || creditsTimer >= 192 && creditsTimer < 256) {
            credits[0].setY(credits[0].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 0 && creditsTimer < 38 || creditsTimer >= 192 && creditsTimer < 256) {
            credits[1].setY(credits[1].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 256 && creditsTimer < 300 || creditsTimer >= 448 && creditsTimer < 512) {
            credits[2].setY(credits[2].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 256 && creditsTimer < 300 || creditsTimer >= 448 && creditsTimer < 512) {
            credits[3].setY(credits[3].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 256 && creditsTimer < 300 || creditsTimer >= 448 && creditsTimer < 512) {
            credits[4].setY(credits[4].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 256 && creditsTimer < 300 || creditsTimer >= 448 && creditsTimer < 512) {
            credits[5].setY(credits[5].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 512 && creditsTimer < 554 || creditsTimer >= 704 && creditsTimer < 768) {
            credits[6].setY(credits[6].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 512 && creditsTimer < 554 || creditsTimer >= 704 && creditsTimer < 768) {
            credits[7].setY(credits[7].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 512 && creditsTimer < 554 || creditsTimer >= 704 && creditsTimer < 768) {
            credits[8].setY(credits[8].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 512 && creditsTimer < 554 || creditsTimer >= 704 && creditsTimer < 768) {
            credits[9].setY(credits[9].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 768 && creditsTimer < 806 || creditsTimer >= 960 && creditsTimer < 1024) {
            credits[10].setY(credits[10].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 768 && creditsTimer < 806 || creditsTimer >= 960 && creditsTimer < 1024) {
            credits[11].setY(credits[11].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 1024 && creditsTimer < 1058) {
            credits[12].setY(credits[12].getY() - ((float) heightPixels / 64));
        }
        if (creditsTimer >= 1058) {
            creditsTimer = 1058;
        }
    }

    void moveCreditsToStart() {
        for (TextView credit : credits) {
            credit.setY(heightPixels);
        }
        credits[1].setY(credits[0].getY() + credits[0].getLayoutParams().height);
        credits[3].setY(credits[2].getY() + credits[2].getLayoutParams().height);
        credits[4].setY(credits[3].getY() + credits[3].getLayoutParams().height);
        credits[5].setY(credits[4].getY() + credits[4].getLayoutParams().height);
        credits[7].setY(credits[6].getY() + credits[6].getLayoutParams().height);
        credits[8].setY(credits[7].getY() + credits[7].getLayoutParams().height);
        credits[9].setY(credits[8].getY() + credits[8].getLayoutParams().height);
        credits[11].setY(credits[10].getY() + credits[10].getLayoutParams().height);


    }

    void genTone() {
        // fill out the array

    }



    void generateCrashSound() {
        final int duration = 2; // seconds
        final int sampleRate = 8000;
        final int numSamples = duration * sampleRate;
        final double sample[] = new double[numSamples];
        final double freqOfTone = 880; // hz
        final short generatedSnd[] = new short[2 * numSamples];

        for (int i = 0; i < numSamples; ++i) {
            sample[i] = Math.sin(2 * Math.PI * i / (sampleRate / freqOfTone));
            Log.d(TAG, "generateCrashSound: " + sample);
        }

        //for (;;) {
        //buffer.clear();

        int idx = 0;

        for (int i = 0; i < Short.MAX_VALUE; i = i + 8) {
            generatedSnd[idx++] = ((short) (random.nextGaussian() * (Short.MAX_VALUE - i)));
        }

        //line.write(buffer.array(), 0, buffer.position());
        //}

        /**crashSound = new AudioTrack(AudioManager.STREAM_MUSIC,
                sampleRate, AudioFormat.CHANNEL_CONFIGURATION_MONO,
                AudioFormat.CHANNEL_OUT_DEFAULT, numSamples,
                AudioTrack.MODE_STATIC);
        crashSound.write(generatedSnd, 0, generatedSnd.length);**/
    }

    void generateButtonSound() {
        final int duration = 1; // seconds
        final int sampleRate = 8000;
        final int numSamples = duration * sampleRate;
        final double sample[] = new double[numSamples];
        final double freqOfTone = 2000; // hz
        final short generatedSnd[] = new short[2 * numSamples];

        for (int i = 0; i < numSamples; ++i) {
            sample[i] = Math.sin(2 * Math.PI * i / (sampleRate / freqOfTone));
            Log.d(TAG, "generateCrashSound: " + sample);
        }

        //for (;;) {
        //buffer.clear();

        int idx = 0;

        for (int i = 0; i < Short.MAX_VALUE; i = i + 8) {
            generatedSnd[idx++] = (short) Math.sin(2 * Math.PI * i / (sampleRate / freqOfTone));
        }

        //line.write(buffer.array(), 0, buffer.position());
        //}

        /**buttonSound = new AudioTrack(AudioManager.STREAM_MUSIC,
                sampleRate, AudioFormat.CHANNEL_CONFIGURATION_MONO,
                AudioFormat.CHANNEL_OUT_DEFAULT, numSamples,
                AudioTrack.MODE_STATIC);
        buttonSound.write(generatedSnd, 0, generatedSnd.length);**/
    }


    void initializeBillingClient() {
        billingClient = BillingClient.newBuilder(this)
                .enablePendingPurchases(PendingPurchasesParams.newBuilder().enableOneTimeProducts().build())
                .setListener(
                        (billingResult, list) -> {
                            if(billingResult.getResponseCode()==BillingClient.BillingResponseCode.OK && list != null) {
                                for (Purchase purchase: list){
                                    verifyPurchase(purchase);
                                }
                            }
                        }
                ).build();

        //start the connection after initializing the billing client
        startConnection();
    }

    void startConnection() {
        Log.d(TAG,"connectGooglePlayBilling ");

        billingClient.startConnection(new BillingClientStateListener() {
            @Override
            public void onBillingServiceDisconnected() {
                startConnection();
            }

            @Override
            public void onBillingSetupFinished(@NonNull BillingResult billingResult) {
                if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {
                    showProducts();
                }
            }
        });
    }

    void showProducts() {

        ImmutableList<QueryProductDetailsParams.Product> productList = ImmutableList.of(
            QueryProductDetailsParams.Product.newBuilder()
                .setProductId("remove_ads")
                .setProductType(BillingClient.ProductType.INAPP)
                .build()
        );

        QueryProductDetailsParams params = QueryProductDetailsParams.newBuilder()
            .setProductList(productList)
            .build();

        billingClient.queryProductDetailsAsync(params, (billingResult, list) -> {
            //Clear the list
            productDetailsList.clear();

            Log.d(TAG,"Size "+list.getProductDetailsList().size());

            //Handler to delay by two seconds to wait for google play to return the list of products.
            handler.postDelayed(() -> {
                //Adding new productList, returned from google play
                productDetailsList.addAll(list.getProductDetailsList());

                //Updating the UI
                //If the product is not showing then it means that you didn't properly setup your Testing email.
                googlePlayIsLoaded = true;
                if(!data.getBoolean("remove_ads", false)) {
                    settingsButton[0].setBackgroundColor(getResources().getColor(R.color.buttonBackgroundColor));
                    settingsButton[0].setTextColor(Color.WHITE);
                }

            }, 2000);
        });

    }

    void launchPurchaseFlow(ProductDetails productDetails) {

        ImmutableList<BillingFlowParams.ProductDetailsParams> productDetailsParamsList =
                ImmutableList.of(BillingFlowParams.ProductDetailsParams.newBuilder()
                        .setProductDetails(productDetails)
                        .build());
        BillingFlowParams billingFlowParams = BillingFlowParams.newBuilder()
                .setProductDetailsParamsList(productDetailsParamsList)
                .build();
        billingClient.launchBillingFlow(this, billingFlowParams);
    }

    void verifyPurchase(Purchase purchase) {
        ConsumeParams consumeParams = ConsumeParams.newBuilder()
                .setPurchaseToken(purchase.getPurchaseToken())
                .build();
        ConsumeResponseListener listener = (billingResult, s) -> {
            if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {
                dataEditor.putBoolean("remove_ads", true);
                dataEditor.apply();
                adsRemoved = true;
                settingsButton[0].setBackgroundColor(Color.parseColor("#005f00"));
                settingsButton[0].setTextColor(Color.parseColor("#ffffff"));
                settingsButton[0].setText(R.string.ads_removed);
            }
        };
        billingClient.consumeAsync(consumeParams, listener);
    }

    protected void onResume() {
        super.onResume();
        billingClient.queryPurchasesAsync(
                QueryPurchasesParams.newBuilder().setProductType(BillingClient.ProductType.INAPP).build(),
                (billingResult, list) -> {
                    if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {
                        for (Purchase purchase : list) {
                            if (purchase.getPurchaseState() == Purchase.PurchaseState.PURCHASED && !purchase.isAcknowledged()) {
                                verifyPurchase(purchase);
                            }
                        }
                    }
                }
        );
    }






    class Sound {
        double duration;
        int sampleRate;
        int sampleCount;
        double sample[];
        byte soundBytes[];

        int type;

        AudioTrack audioTrack;

        public Sound(double duration, int sampleRate, int type) {
            this.type = type;
            this.duration = duration;
            this.sampleRate = sampleRate;
            sampleCount = (int) (duration * sampleRate);
            sample = new double[sampleCount];
            soundBytes = new byte[2 * sampleCount];
            audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
                    sampleRate, AudioFormat.CHANNEL_OUT_MONO,
                    AudioFormat.ENCODING_PCM_16BIT, soundBytes.length,
                    AudioTrack.MODE_STATIC);
            generateTone();
            writeAudio();
        }

        void generateTone() {
            Random random = new Random();
            double prev = 0;
            double mod = 0;

            for (int i = 0; i < sampleCount; i++) {
                double white = random.nextGaussian() * 0.02;

                double sine = 1;







                sample[i] = prev = (prev + white)/(1.02 * sine);

                if(type == 3) {
                    float frequency = 500 + ((float) i/ (float) sampleCount)*500;

                    sample[i] *= Math.sin(2 * Math.PI * i / (float) (44100 / frequency));

                }

                if(type == 2) {
                    int frequency = 500;
                    if(i > sampleCount / 4){
                        frequency = 1500;
                    }
                    sample[i] *= Math.sin(2 * Math.PI * i / (float) (44100 / frequency));

                }
                if(type == 4) {

                    int j = Math.round(i/128);

                    double frequency = 1000 + 250 * Math.sin(2 * Math.PI * j / (float) (44100 / 1500));
                    sample[i] *= Math.sin(2 * Math.PI * i / (float) (44100 / frequency));
                }
                if(type == 1 || type == 2 || type == 3 || type == 4) {
                    sample[i] *= (2.0 - (double) 2 * i / (double) sampleCount);
                }
            }

            for (int i = 0; i < sampleCount; i++) {
                sample[i] = sample[i];
            }

            int idx = 0;
            for (final double dVal : sample) {
                // scale to maximum amplitude
                final short val = (short) ((dVal * 32767));
                // in 16 bit wav PCM, first byte is the low order byte
                soundBytes[idx++] = (byte) (val & 0x00ff);
                soundBytes[idx++] = (byte) ((val & 0xff00) >>> 8);
            }
        }

        void writeAudio() {
            audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
                    sampleRate, AudioFormat.CHANNEL_OUT_MONO,
                    AudioFormat.ENCODING_PCM_16BIT, soundBytes.length,
                    AudioTrack.MODE_STATIC);
            audioTrack.write(soundBytes, 0, soundBytes.length);
        }

        void playSound() {
            if(data.getBoolean("soundEffects", true)) {
                audioTrack.release();
                writeAudio();

                if (type == 0) {
                    float playbackRate = 0.125f;

                    audioTrack.setPlaybackRate((int) (sampleRate * playbackRate));
                }

                if (type == 3) {
                    //float playbackRate = 4f;

                    //audioTrack.setPlaybackRate((int) (sampleRate * playbackRate));
                }

                if (type == 1 || type == 2 || type == 3 || type == 4) {
                    float playbackRate = 0.5f;

                    audioTrack.setPlaybackRate((int) (sampleRate * playbackRate));
                }

                //try {
                    audioTrack.play();
                //} catch (Exception e) {
                    //Log.e(C.TAG, rate + "Exception, keep trying.",e);
                //}
                audioTrack.setStereoVolume(1, 1);

            }
        }
    }

    boolean setLevelStars(Level level, int index, boolean marker){

        int highScore = data.getInt("highScore" + index, Integer.MAX_VALUE);

        if (highScore < level.starTime) {
            levelStars[index] = 4;
        } else if (highScore < (level.starTime * 1.25)) {
            levelStars[index] = 3;
        } else if (highScore < Integer.MAX_VALUE) {
            levelStars[index] = 2;
        } else if (!marker){
            levelStars[index] = 1;
            return true;
        } else {
            levelStars[index] = 0;
        }

        return marker;
    }
}